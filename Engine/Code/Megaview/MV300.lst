
MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 1
MV_ECU


                        1  ;***************************************************
                                                      *************************
                        2  ;
                        3  ;                                MV300.asm
                        4  ;
                        5  ;        Real Time Variable Display and "digital 
                                                         dashboard" for MSnS300
                        6  ;
                        7  ;                         By Robert Hiebert 2010
                        8  ;
                        9  ; - Rev 1: 4/13/12 Add configurable bank fuel flow 
                                            constants for fuel burn calculation
                       10  ;          fine tuning
                       11  ;
                       12  ;***************************************************
                                                      *************************
                       13  
                       14  ;***************************************************
                                   ********************************************
                       15  ;
                       16  ; ------------------------------------------- 
                             Operation ----------------------------------------
                       17  ;
                       18  ; On power up, the unit defaults to display screen 
                                                                            #0.
                       19  ; The user has a choice of 17,(0-16), screens which 
                                                     display the variables name
                       20  ; abreviation on the top line, and their correspondi
                                                         ng real time values on
                       21  ; the bottom line. The lower line is updated every 
                                                               250 miliseconds.
                       22  ; The earlier version, MV_ECU also had a constant 
                                                       configuration mode which
                       23  ; this version does not. This is a "display only" 
                                                                          unit.
                       24  ;
                       25  ; Screen 0 displays "ERPM MAP AFR CLT MAT" ; 
                                                                 Default screen
                       26  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                       27  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       28  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       29  ; "CLT"  is Engine Coolant Temp in degrees F+40, 
                                                                     uses "clt"
                       30  ; "MAT"  is Manifold Air Temperature in degrees 
                                                               F+40, uses "mat"
                       31  ;
                       32  ; Screen 1 displays " ERPM KPH LTHR KMLT " ; Fuel 
                                                                    burn screen
                       33  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                       34  ; "KPH"  is Vehicle Speed in KPH (Lo Res Fast 
                                                            Update), uses "kph"
                       35  ; "LTHR" is Current fuel burn in L/Hr x 100, uses 
                                                                "ltrHrH:ltrHrL"
                       36  ; "KMLT" is Current fuel burn in KM/L x 100, over a 
                                          1 second period, uses "kmLtrH:kmLtrL"
                       37  ;
                       38  ; Screen 2 displays "ERPM MAP AFR FTC PLW" ; Fuel 


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 2
MV_ECU


                                                                    tune screen
                       39  ; "ERPM" is Engine RPM, uses calculated ""rpmhrH:rpm
                                                                          hrL""
                       40  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       41  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       42  ; "FTC"  is Fuel Trim Correction in percent, uses 
                                                                     "Ftrimcor"
                       43  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                       44  ;
                       45  ; Screen 3 displays "ERPM MAP TRA CTA MTA" ; 
                                                           Ignition tune screen
                       46  ; "ERPM" is Engine RPM, uses calculated ""rpmhrH:rpm
                                                                          hrL""
                       47  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       48  ; "TRA"  is Ignition Trim Angle in degrees BTDC, 
                                                                  uses "trmAng"
                       49  ; "CTA"  is Calculated Timing Angle in degrees 
                                                            BTDC, uses "timAng"
                       50  ; "MTA"  is Monitored Ignition Timing Angle in 
                                                 degrees BTDC, uses "monTimAng"
                       51  ;
                       52  ; Screen 4 displays " GAM WCR ACR BCR TCR" ; 
                                                             Corrections screen
                       53  ; "GAM" is Gamma Correction in percent, uses gammae
                       54  ; "WCR" is Engine Coolant Correction in percent, 
                                                                  uses "warmcor
                       55  ; "ACR" is Manifold Air Temperature Correction in 
                                                         percent, uses "aircor"
                       56  ; "BCR" is Barometric Pressure Correction in 
                                                        percent, uses "barocor"
                       57  ; "TCR" is Acceleration Correction in percent, uses 
                                                                     "tpsaccel"
                       58  ;
                       59  ; Screen 5 displays " ego EGV LMD AFR FTC" ; EGO 
                                                                         screen
                       60  ; "ego" is Exhaust Gas Oxygen ADC, uses "egoADC"
                       61  ; "EGV" is Exhaust Gas Oxygen voltage x 10, uses 
                                                                         "egoV"
                       62  ; "LMD" is Exhaust Gas Oxygen Lambda x 10, uses 
                                                                       "lambda"
                       63  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                       64  ; "FTC"  is Fuel Trim Correction in percent, uses 
                                                                     "Ftrimcor"
                       65  ;
                       66  ; Screen 6 displays " map MAP bar BAR BCR" ; ADC 
                                                                       screen 1
                       67  ; "map" is Manifold Pressure ADC, uses "mapADC"
                       68  ; "MAP" is Manifold Absolute Pressure in KPA, uses 
                                                                          "map"
                       69  ; "bar" is Barometric Pressure ADC, uses "baroADC"
                       70  ; "BAR" is Barometric Pressure in KPA, uses 
                                                                    "barometer"
                       71  ; "BCR" is Barometric Pressure Correction in 
                                                        percent, uses "barocor"
                       72  ;
                       73  ; Screen 7 displays " vlt VLT clt CLT WCR" ; ADC 


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 3
MV_ECU


                                                                       screen 2
                       74  ; "vlt" is Battery Voltage ADC, uses "battADC"
                       75  ; "VLT" is Battery Voltage x 10, uses "volts"
                       76  ; "clt" is Engine Coolant Temperature ADC, uses 
                                                                       "cltADC"
                       77  ; "CLT" is Engine Coolant Temperature in degrees 
                                                               F+40, uses "clt"
                       78  ; "WCR" is Engine Coolant Correction in percent, 
                                                                 uses "warmcor"
                       79  ;
                       80  ; Screen 8 displays " vlt VLT mat MAT ACR" ; ADC 
                                                                       screen 3
                       81  ; "vlt" is Battery Voltage ADC, uses "battADC"
                       82  ; "VLT" is Battery Voltage x 10, uses "volts"
                       83  ; "mat" is Manifold Air Temperature ADC, uses 
                                                                       "matADC"
                       84  ; "MAT" is Manifold Air Temperature in degrees 
                                                               F+40, uses "mat"
                       85  ; "ACR" is Manifold Air Temperature Correction in 
                                                         percent, uses "aircor"
                       86  ;
                       87  ; Screen 9 displays " tps TPP trm FTC TAF" ; ADC 
                                                                       screen 4
                       88  ; "tps" is Throttle Position ADC, uses "tps"
                       89  ; "TPP" is Throttle Positioin in percent, uses 
                                                                         "tpsp"
                       90  ; "trm" is Fuel/Ign Trim ADC, uses "trimADC"
                       91  ; "FTC"  is Fuel Trim Correction in percent, uses 
                                                                     "Ftrimcor"
                       92  ; "TAF"  is Ignition Trim Angle Factor, uses 
                                                                    "trmAngFac"
                       93  ;
                       94  ; Screen 10 displays "PWHR PLW FLD VEC DTY" ; 
                                                              Pulsewidth screen
                       95  ; "PWHR" is Pulse Width Hi Res in mmS, uses 
                                                              "pwcalcH:pwcalcL"
                       96  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                       97  ; "FLD"  is Fuel Deleivery Pulse Width Lo Res in 
                                                                 mmS, uses "fd"
                       98  ; "VEC   is Volumetric Efficiency(Current VE table 
                                               value in percent), uses "vecurr"
                       99  ; "DTY"  is Injector Duty Cycle in percent, uses 
                                                                         "duty"
                      100  ;
                      101  ; Screen 11 displays " ERPM PIPD MNPD VSPD" ; 
                                                                  Period screen
                      102  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmh
                                                                            rL"
                      103  ; "PIPD" is PIP Period in mmS, uses "tachH:tachL"
                      104  ; "MNPD" is Ignition Monitor Period in mmS, uses 
                                                                  "monpH:monpL"
                      105  ; "VSPD" is Vehicle Speed Period in mmS, uses 
                                                                    "vspH:vspL"
                      106  ;
                      107  ; Screen 12 displays "ERPM MAP SAF DAF TAF" ; 
                                                         Ignition factor screen
                      108  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      109  ; "MAP"  is Manifold Absolute Pressure in KPA, uses 


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 4
MV_ECU


                                                                          "map"
                      110  ; "SAF"  is Spark Angle Factor(Current ST table 
                                                       value), uses "spkAngFac"
                      111  ; "DAF"  is Delay Angle Factor, uses "dlyAngFac"
                      112  ; "TAF"  is Ignition Trim Angle Factor, uses 
                                                                    "trmAngFac"
                      113  ;
                      114  ; Screen 13 displays "ERPM TRA DLA CTA MTA" ; 
                                                          Ignition angle screen
                      115  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      116  ; "TRA"  is Ignition Trim Angle in degrees BTDC, 
                                                                  uses "trmAng"
                      117  ; "DLA"  is Ignition Delay Angle in degrees BTDC, 
                                                                  uses "dlyAng"
                      118  ; "CTA"  is Calculated Timing Angle in degrees 
                                                            BTDC, uses "timAng"
                      119  ; "MTA"  is Monitored Ignition Timing Angle in 
                                                 degrees BTDC, uses "monTimAng"
                      120  ;
                      121  ; Screen 14 displays "KPH kph ODS FDSC SEC" ; Fuel 
                                                          burn variables screen
                      122  ; "KPH"  is Vehicle Speed in KPH (Lo Res Fast 
                                                            Update), uses "kph"
                      123  ; "kph"  is Vehicle Speed in KPH (Hi Res Slow 
                                                           Update), uses "kph1"
                      124  ; "ODS"  is Odometer Counts over a 1 second period, 
                                                                  uses "odoSec"
                      125  ; "FDSC" is Fuel Delivery Injector On Time over a 1 
                                     second period in mmS, uses "fdSecH:fdSecL"
                      126  ; "SEC"  is Seconds Counter Lo byte, uses "secL"
                      127  ;
                      128  ; Screen 15 displays " RL FC  FP FT  AL WL" ; 
                                   "Alarmbits", "portAbits", "portCbits" screen
                      129  ; "RL" is Rev Limiter(alarmbits 5)
                      130  ; "FC" is Flood Clear(alarmbits 6)
                      131  ; "FP" is Fuel Pump(portAbits 0)
                      132  ; "FT" is Fuel Trim Enable(portAbits 5)
                      133  ; "AL" is Accel LED(portCbits 1)
                      134  ; "WL" is Warmup LED(portCbits 2)
                      135  ;
                      136  ; Screen 16 displays " RN CR SW  RW AC DC " ; 
                                                      "Engine" bit field screen
                      137  ; "RN" is Engine Running(engine 0)
                      138  ; "CR" is Engine Cranking(engine 1)
                      139  ; "SW" is Start Warmup(engine 2)
                      140  ; "RW" is Run Warmup(engine 3)
                      141  ; "AC" is Accellerating(engine 4)
                      142  ; "DC" is Decelerating(engine 5)
                      143  ;
                      144  ;***************************************************
                                   ********************************************
                      145  
                      146  ;***************************************************
                                                      *************************
                      147  
                      148  ;***************************************************
                                                      *************************
                      149  ;


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 5
MV_ECU


                      150  ; -------------------------- MV_ECU Hardware Wiring 
                                                       ------------------------
                      151  ;
                      152  ;***************************************************
                                                      *************************
                      153  ;
                      154  ; ----- Inputs [port name - function] -----
                      155  ;
                      156  ;  PTA0      - Display Screen next
                      157  ;  PTA1      - Display Screen previous
                      158  ;  PTA2      - not used
                      159  ;  PTA3      - not used
                      160  ;
                      161  ; ----- Outputs [port name - function] -----
                      162  ;
                      163  ;  PTB4       - VFD Display Enable
                      164  ;  PTB5       - VFD Display R/W
                      165  ;  PTB6       - VFD Display RS
                      166  ;  PTC0       - VFD Display data DB4
                      167  ;  PTC1       - VFD Display data DB5
                      168  ;  PTC2       - VFD Display data DB6
                      169  ;  PTC3       - VFD Display data DB7
                      170  ;
                      171  ;***************************************************
                                                      *************************
                      172  
                      173  ;***************************************************
                                                      *************************
                      174  ; ------------------------ Input Port Equates 
                                                -------------------------------
                      175  ;***************************************************
                                                      *************************
                      176  ;
                      177  ;Sw0     equ 0     ; PTA0 - Display Screen next
                      178  ;Sw1     equ 1     ; PTA1 - Display Screen previous
                      179  ;Sw2     equ 2     ; PTA2 - not used
                      180  ;Sw3     equ 3     ; PTA3 - not used
                      181  ;
                      182  ; ----- Outputs [port name - function] -----
                      183  ;
                      184  ;  PTB4       - VFD Display Enable
                      185  ;  PTB5       - VFD Display R/W
                      186  ;  PTB6       - VFD Display RS
                      187  ;  PTC0       - VFD Display data DB4
                      188  ;  PTC1       - VFD Display data DB5
                      189  ;  PTC2       - VFD Display data DB6
                      190  ;  PTC3       - VFD Display data DB7
                      191  ;
                      192  ;***************************************************
                                                      *************************
                      193  
                      194  
 0040                 195       org        ram_start    ; Origin  Memory location $0040=64
                      196                                  ;(start of RAM)
 0040                 197       include "MV300.inc"    ; Include definitions for MV300.asm
                      198  ;***********************************************************************************************
                      199  ;
                      200  ;                    MV300.inc (header file for MV300.asm)
                      201  ;
                      202  ;        Real Time Variable Display and "digital dashboard" for MSnS300
                      203  ;
                      204  ;                         By Robert Hiebert 2010
                      205  ;
                      206  ; - Rev 1: 4/13/12 Add configurable bank fuel flow constants for fuel burn calculation
                      207  ;          fine tuning
                      208  ;
                      209  ;***********************************************************************************************
                      210  ;***********************************************************************************************
                      211  ;
                      212  ; ------------------------------------------- Operation ----------------------------------------
                      213  ;
                      214  ; On power up, the unit defaults to display screen #0.
                      215  ; The user has a choice of 17,(0-16), screens which display the variables name
                      216  ; abreviation on the top line, and their corresponding real time values on
                      217  ; the bottom line. The lower line is updated every 250 miliseconds.
                      218  ; The earlier version, MV_ECU also had a constant configuration mode which
                      219  ; this version does not. This is a "display only" unit.
                      220  ;
                      221  ; Screen 0 displays "ERPM MAP AFR CLT MAT" ; Default screen
                      222  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      223  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      224  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      225  ; "CLT"  is Engine Coolant Temp in degrees F+40, uses "clt"
                      226  ; "MAT"  is Manifold Air Temperature in degrees F+40, uses "mat"
                      227  ;
                      228  ; Screen 1 displays " ERPM KPH LTHR KMLT " ; Fuel burn screen
                      229  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      230  ; "KPH"  is Vehicle Speed in KPH (Lo Res Fast Update), uses "kph"
                      231  ; "LTHR" is Current fuel burn in L/Hr x 100, uses "ltrHrH:ltrHrL"
                      232  ; "KMLT" is Current fuel burn in KM/L x 100, over a 1 second period, uses "kmLtrH:kmLtrL"
                      233  ;
                      234  ; Screen 2 displays "ERPM MAP AFR FTC PLW" ; Fuel tune screen
                      235  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      236  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      237  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      238  ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                      239  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                      240  ;
                      241  ; Screen 3 displays "ERPM MAP TRA CTA MTA" ; Ignition tune screen
                      242  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      243  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      244  ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                      245  ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                      246  ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                      247  ;
                      248  ; Screen 4 displays " GAM WCR ACR BCR TCR" ; Corrections screen
                      249  ; "GAM" is Gamma Correction in percent, uses gammae
                      250  ; "WCR" is Engine Coolant Correction in percent, uses "warmcor
                      251  ; "ACR" is Manifold Air Temperature Correction in percent, uses "aircor"
                      252  ; "BCR" is Barometric Pressure Correction in percent, uses "barocor"
                      253  ; "TCR" is Acceleration Correction in percent, uses "tpsaccel"
                      254  ;
                      255  ; Screen 5 displays " ego EGV LMD AFR FTC" ; EGO screen
                      256  ; "ego" is Exhaust Gas Oxygen ADC, uses "egoADC"
                      257  ; "EGV" is Exhaust Gas Oxygen voltage x 10, uses "egoV"
                      258  ; "LMD" is Exhaust Gas Oxygen Lambda x 10, uses "lambda"
                      259  ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                      260  ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                      261  ;
                      262  ; Screen 6 displays " map MAP bar BAR BCR" ; ADC screen 1
                      263  ; "map" is Manifold Pressure ADC, uses "mapADC"
                      264  ; "MAP" is Manifold Absolute Pressure in KPA, uses "map"
                      265  ; "bar" is Barometric Pressure ADC, uses "baroADC"
                      266  ; "BAR" is Barometric Pressure in KPA, uses "barometer"
                      267  ; "BCR" is Barometric Pressure Correction in percent, uses "barocor"
                      268  ;
                      269  ; Screen 7 displays " vlt VLT clt CLT WCR" ; ADC screen 2
                      270  ; "vlt" is Battery Voltage ADC, uses "battADC"
                      271  ; "VLT" is Battery Voltage x 10, uses "volts"
                      272  ; "clt" is Engine Coolant Temperature ADC, uses "cltADC"
                      273  ; "CLT" is Engine Coolant Temperature in degrees F+40, uses "clt"
                      274  ; "WCR" is Engine Coolant Correction in percent, uses "warmcor"
                      275  ;
                      276  ; Screen 8 displays " vlt VLT mat MAT ACR" ; ADC screen 3
                      277  ; "vlt" is Battery Voltage ADC, uses "battADC"
                      278  ; "VLT" is Battery Voltage x 10, uses "volts"


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 6
MV_ECU


                      279  ; "mat" is Manifold Air Temperature ADC, uses "matADC"
                      280  ; "MAT" is Manifold Air Temperature in degrees F+40, uses "mat"
                      281  ; "ACR" is Manifold Air Temperature Correction in percent, uses "aircor"
                      282  ;
                      283  ; Screen 9 displays " tps TPP trm FTC TAF" ; ADC screen 4
                      284  ; "tps" is Throttle Position ADC, uses "tps"
                      285  ; "TPP" is Throttle Positioin in percent, uses "tpsp"
                      286  ; "trm" is Fuel/Ign Trim ADC, uses "trimADC"
                      287  ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                      288  ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                      289  ;
                      290  ; Screen 10 displays "PWHR PLW FLD VEC DTY" ; Pulsewidth screen
                      291  ; "PWHR" is Pulse Width Hi Res in mmmS, uses "pwcalcH:pwcalcL"
                      292  ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                      293  ; "FLD"  is Fuel Deleivery Pulse Width Lo Res in mmS, uses "fd"
                      294  ; "VEC   is Volumetric Efficiency(Current VE table value in percent), uses "vecurr"
                      295  ; "DTY"  is Injector Duty Cycle in percent, uses "duty"
                      296  ;
                      297  ; Screen 11 displays " ERPM PIPD MNPD VSPD" ; Period screen
                      298  ; "ERPM" is Engine RPM, uses calculated "rpmhrH:rpmhrL"
                      299  ; "PIPD" is PIP Period in mmmS, uses "tachH:tachL"
                      300  ; "MNPD" is Ignition Monitor Period in mmmS, uses "monpH:monpL"
                      301  ; "VSPD" is Vehicle Speed Period in mmS, uses "vspH:vspL"
                      302  ;
                      303  ; Screen 12 displays "ERPM MAP SAF DAF TAF" ; Ignition factor screen
                      304  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      305  ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                      306  ; "SAF"  is Spark Angle Factor(Current ST table value), uses "spkAngFac"
                      307  ; "DAF"  is Delay Angle Factor, uses "dlyAngFac"
                      308  ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                      309  ;
                      310  ; Screen 13 displays "ERPM TRA DLA CTA MTA" ; Ignition angle screen
                      311  ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                      312  ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                      313  ; "DLA"  is Ignition Delay Angle in degrees BTDC, uses "dlyAng"
                      314  ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                      315  ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                      316  ;
                      317  ; Screen 14 displays "KPH kph ODS FDSC SEC" ; Fuel burn variables screen
                      318  ; "KPH"  is Vehicle Speed in KPH (Lo Res Fast Update), uses "kph"
                      319  ; "kph"  is Vehicle Speed in KPH (Hi Res Slow Update), uses "kph1"
                      320  ; "ODS"  is Odometer Counts over a 1 second period, uses "odoSec"
                      321  ; "FDSC" is Fuel Delivery Injector On Time over a 1 second period in mmS, uses "fdSecH:fdSecL"
                      322  ; "SEC"  is Seconds Counter Lo byte, uses "secL"
                      323  ;
                      324  ; Screen 15 displays " RL FC  FP FT  AL WL" ; "Alarmbits", "portAbits", "portCbits" screen
                      325  ; "RL" is Rev Limiter(alarmbits 5)
                      326  ; "FC" is Flood Clear(alarmbits 6)
                      327  ; "FP" is Fuel Pump(portAbits 0)
                      328  ; "FT" is Fuel Trim Enable(portAbits 5)
                      329  ; "AL" is Accel LED(portCbits 1)
                      330  ; "WL" is Warmup LED(portCbits 2)
                      331  ;
                      332  ; Screen 16 displays " RN CR SW  RW AC DC " ; "Engine" bit field screen
                      333  ; "RN" is Engine Running(engine 0)
                      334  ; "CR" is Engine Cranking(engine 1)
                      335  ; "SW" is Start Warmup(engine 2)
                      336  ; "RW" is Run Warmup(engine 3)
                      337  ; "AC" is Accellerating(engine 4)
                      338  ; "DC" is Decelerating(engine 5)
                      339  ;
                      340  ;***********************************************************************************************
                      341  
                      342  ;****************************************************************************
                      343  ;
                      344  ; -------------------------- MV_ECU Hardware Wiring  ------------------------
                      345  ;
                      346  ;****************************************************************************
                      347  ;
                      348  ; ----- Inputs [port name - function] -----
                      349  ;
                      350  ;  PTA0      - Display Screen next
                      351  ;  PTA1      - Display Screen previous
                      352  ;  PTA2      - not used
                      353  ;  PTA3      - not used
                      354  ;
                      355  ; ----- Outputs [port name - function] -----
                      356  ;
                      357  ;  PTB4       - VFD Display Enable
                      358  ;  PTB5       - VFD Display R/W
                      359  ;  PTB6       - VFD Display RS
                      360  ;  PTC0       - VFD Display data DB4
                      361  ;  PTC1       - VFD Display data DB5
                      362  ;  PTC2       - VFD Display data DB6
                      363  ;  PTC3       - VFD Display data DB7
                      364  ;
                      365  ;****************************************************************************
                      366  
                      367  ;****************************************************************************
                      368  ; ------------------------ Input Port Equates -------------------------------
                      369  ;****************************************************************************
                      370  
 0040                 371  Sw0     equ 0     ; PTA0 - Display Screen next
 0040                 372  Sw1     equ 1     ; PTA1 - Display Screen previous
 0040                 373  Sw2     equ 2     ; PTA2 - not used
 0040                 374  Sw3     equ 3     ; PTA3 - not used
                      375  
                      376  ;****************************************************************************
                      377  ; ------------------------ Output Port Equates ------------------------------
                      378  ;****************************************************************************
                      379  
 0040                 380  Enable     equ 4     ; PTB4 - VFD Display Enable
 0040                 381  Rd_Wrt     equ 5     ; PTB5 - VFD Display R/W
 0040                 382  Reg_Sel    equ 6     ; PTB6 - VFD Display RS
 0040                 383  DB0        equ 0     ; PTC0 - VFD Display data DB0 (4 bit mode)
 0040                 384  DB1        equ 1     ; PTC1 - VFD Display data DB1 (4 bit mode)
 0040                 385  DB2        equ 2     ; PTC2 - VFD Display data DB2 (4 bit mode)
 0040                 386  DB3        equ 3     ; PTC3 - VFD Display data DB3 (4 bit mode)
 0040                 387  DB4        equ 0     ; PTC0 - VFD Display data DB4
 0040                 388  DB5        equ 1     ; PTC1 - VFD Display data DB5
 0040                 389  DB6        equ 2     ; PTC2 - VFD Display data DB6
 0040                 390  DB7        equ 3     ; PTC3 - VFD Display data DB7
                      391  
                      392  ;****************************************************************************
                      393  ; ------------------------ Output Mask Equates ------------------------------
                      394  ;****************************************************************************
                      395  
 0040                 396  DB0m     equ $01     ; %00000001 - PTC0 - VFD Display data DB0 (4 bit mode)
 0040                 397  DB1m     equ $02     ; %00000010 - PTC1 - VFD Display data DB1 (4 bit mode)
 0040                 398  DB2m     equ $04     ; %00000100 - PTC2 - VFD Display data DB2 (4 bit mode)
 0040                 399  DB3m     equ $08     ; %00001000 - PTC3 - VFD Display data DB3 (4 bit mode)
 0040                 400  DB4m     equ $10     ; %00010000 - PTC0 - VFD Display data DB4
 0040                 401  DB5m     equ $20     ; %00100000 - PTC1 - VFD Display data DB5
 0040                 402  DB6m     equ $40     ; %01000000 - PTC2 - VFD Display data DB6
 0040                 403  DB7m     equ $80     ; %10000000 - PTC3 - VFD Display data DB7
                      404  
                      405  
                      406  ;****************************************************************************
                      407  ; -------------- "Flags" Operating Status bit field equates -----------------
                      408  ;****************************************************************************
                      409  
 0040                 410  mde      equ 0  ; 1 = Configure mode             0 = Display mode
 0040                 411  frz      equ 1  ; 1 = Dsply Vars frozen          0 = Dsply vars 250mS update
 0040                 412  sel      equ 2  ; 1 = Current Constant Selected  0 = No Constant selected
 0040                 413  RcvVE    equ 3  ; 1 = Receiving VE group         0 = Not receiving VE group
 0040                 414  RcvST    equ 4  ; 1 = Receiving ST group         0 = Not receiving ST group


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 7
MV_ECU


 0040                 415  LinChng  equ 5  ; 1 = Bot Line changed           0 = Bot Line not changed
                      416  
                      417  ;****************************************************************************
                      418  ; ----------------- "LPflags","ARCflags","ARflags" equates ------------------
                      419  ;****************************************************************************
                      420  
 0040                 421  Sw0LP     equ 0     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 422  Sw1LP     equ 1     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 423  Sw2LP     equ 2     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
 0040                 424  Sw3LP     equ 3     ; 1 = last pass closed(Lo)   0 = last pass open(Hi)
                      425  
                      426  ;****************************************************************************
                      427  ; --------------------------- "Swflags" equates -----------------------------
                      428  ;****************************************************************************
                      429  
 0040                 430  Sw0cls     equ 0     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 431  Sw1cls     equ 1     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 432  Sw2cls     equ 2     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
 0040                 433  Sw3cls     equ 3     ; 1 = contacts closed(Lo)     0 = contacts open(Hi)
                      434  
                      435  ;***********************************************************************************************
                      436  ; ----------------------- "Engine" Operating Status bit field equates --------------------------
                      437  ;***********************************************************************************************
                      438  
 0040                 439  running:    equ 0    ; 1 = Engine running      0 = Engine not running
 0040                 440  crank:      equ 1    ; 1 = Engine cranking     0 = Engine not cranking
 0040                 441  startw:     equ 2    ; 1 = Warmup enrich       0 = Not in startup warmup
 0040                 442  warmup:     equ 3    ; 1 = In warmup           0 = Not in warmup
 0040                 443  tpsaen:     equ 4    ; 1 = TPS accel mode      0 = Not in TPS accel mode
 0040                 444  tpsden:     equ 5    ; 1 = Decel mode          0 = Not in decel mode
                      445  
                      446  ;***********************************************************************************************
                      447  ; ----------------------- "alarmbits" Operating Status bit field equates -----------------------
                      448  ;***********************************************************************************************
                      449  
 0040                 450  REVL:    equ 5     ; 1 = Engine Rev Limit         0 = No Engine Rev Limit
 0040                 451  fldClr:  equ 6     ; 1 = Engine Flood Clear       0 = No Engine Flood Clear
                      452  
                      453  ;***********************************************************************************************
                      454  ; ----------------------- "portAbits" Operating Status bit field equates -----------------------
                      455  ;***********************************************************************************************
                      456  
 0040                 457  FPon:     equ 0    ; 1 = Fuel Pump On            0 = Fuel Pump Not On
 0040                 458  FTen:     equ 5    ; 1 = Fuel Trim Enabled       0 = Ignition Trim Enabled
                      459  
                      460  ;***********************************************************************************************
                      461  ; ----------------------- "portCbits" Operating Status bit field equates -----------------------
                      462  ;***********************************************************************************************
                      463  
 0040                 464  acclLED:     equ 1    ; 1 = Accel LED on          0 = Accel LED not on
 0040                 465  wmLED:       equ 2    ; 1 = Warmup LED on         0 = Warmup LED not on
                      466  
                      467  
                      468  ;****************************************************************************
                      469  ; -------------------------- RAM Variables ---------------------------------
                      470  ; - I/O Registers from $000 to $003F(0 to 63)(64 bytes)
                      471  ; - RAM from $0040 to $023F(64 to 575)(512 bytes)
                      472  ;****************************************************************************
                      473  
                      474  ;***************************************************************************
                      475  ; - Misc. Variables
                      476  ;***************************************************************************
                      477  
                      478  ;Memory Location $0040 (decimal 64)
                      479  
 0040                 480  Sw0DB:          ds 1     ; Switch #0 de-bounce timer counter variable
 0041                 481  Sw0ARC:         ds 1     ; Switch #0 auto-repeat command timer counter var
 0042                 482  Sw0AR:          ds 1     ; Switch #0 auto-repeat timer counter variable
 0043                 483  Sw1DB:          ds 1     ; Switch #1 de-bounce timer counter variable
 0044                 484  Sw1ARC:         ds 1     ; Switch #1 auto-repeat command timer counter var
 0045                 485  Sw1AR:          ds 1     ; Switch #1 auto-repeat timer counter variable
 0046                 486  Sw2DB:          ds 1     ; Switch #2 de-bounce timer counter variable
 0047                 487  Sw2ARC:         ds 1     ; Switch #2 auto-repeat command timer counter var
 0048                 488  Sw2AR:          ds 1     ; Switch #2 auto-repeat timer counter variable
 0049                 489  Sw3DB:          ds 1     ; Switch #3 de-bounce timer counter variable
 004A                 490  Sw3ARC:         ds 1     ; Switch #3 auto-repeat command timer counter var
 004B                 491  Sw3AR:          ds 1     ; Switch #3 auto-repeat timer counter variable
 004C                 492  LPflags:        ds 1     ; Switch last pass status bit field variable
 004D                 493  ARCflags:       ds 1     ; Switch auto-repeat command status bit field
 004E                 494  ARflags:        ds 1     ; Switch auto-repeat status bit field variable
 004F                 495  Swflags:        ds 1     ; Switch status bit field variable
                      496  
                      497  ;Memory Location $0050 (decimal 80)
                      498  
 0050                 499  ModeCntr:       ds 1     ; Counter for determining "mode" bit status
 0051                 500  FrzCntr:        ds 1     ; Counter for determining "frz" bit status
 0052                 501  SelCntr:        ds 1     ; Counter for determining "sel" bit status
 0053                 502  flags:          ds 1     ; Bit field for operating status flags (1 of 2)
 0054                 503  ScrnCnt:        ds 1     ; Counter for display screen numbers
 0055                 504  ScrnCnt_prv:    ds 1     ; Screen count number previous
 0056                 505  ScrnCnt_Lst:    ds 1     ; Screen count number last
 0057                 506  ConCnt:         ds 1     ; Counter for Constant numbers
 0058                 507  ConCnt_prv:     ds 1     ; Constant number previous
 0059                 508  ConCnt_Lst:     ds 1     ; Constant number last
 005A                 509  CurCon:         ds 1     ; Value of current selected constant
 005B                 510  ConVal:         ds 1     ; Value for constant data
                      511  
                      512  
                      513  ;***************************************************************************
                      514  ; - Serial Communications Interface Variables
                      515  ;***************************************************************************
                      516  
 005C                 517  ByteCnt:        ds 1     ; Count of bytes to receive via SCI
 005D                 518  ByteGoal:       ds 1     ; Desired number of bytes to receive via SCI
 005E                 519  readbuf:        ds 1     ; Buffer for temporary storage of received byte
                      520  
                      521  ;****************************************************************************
                      522  ; ----------------------- Time Clock Variables ------------------------------
                      523  ;****************************************************************************
                      524  
 005F                 525  mS:             ds 1  ; Milliseconds counter
                      526  
                      527  ;Memory Location $0060 (decimal 96)
                      528  
 0060                 529  mSx5:           ds 1     ; 5 Milliseconds counter
                      530  
                      531  ;****************************************************************************
                      532  ; - Variables for integer math
                      533  ;****************************************************************************
                      534  
 0061                 535  INTACC1:      rmb 4
 0065                 536  INTACC2:      rmb 4
                      537  
                      538  
                      539  ;****************************************************************************
                      540  ; - Temporary  variables
                      541  ;****************************************************************************
                      542  
 0069                 543  tmp1:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006A                 544  tmp2:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006B                 545  tmp3:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006C                 546  tmp4:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006D                 547  tmp5:        ds 1     ; used in Umul32, Linterp, Ord_table_find
 006E                 548  tmp6:        ds 1     ; used in Umul32, Linterp
 006F                 549  tmp7:        ds 1     ; used in Umul32, Linterp
                      550  


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 8
MV_ECU


                      551  ;Memory Location $0070 (decimal 112)
                      552  
 0070                 553  tmp8:        ds 1     ; used in Umul32
 0071                 554  tmp9:        ds 1
 0072                 555  tmp10:       ds 1
 0073                 556  tmp11:       ds 1
 0074                 557  tmp12:       ds 1
 0075                 558  tmp13:       ds 1
 0076                 559  tmp14:       ds 1
 0077                 560  tmp15:       ds 1
 0078                 561  tmp16:       ds 1
 0079                 562  tmp17:       ds 1
 007A                 563  tmp18:       ds 1
 007B                 564  tmp19:       ds 1
 007C                 565  tmp20:       ds 1
 007D                 566  local_tmp:   ds 1     ; used in "div_round"
                      567  
                      568  
                      569  ;***************************************************************************
                      570  ; - VFD Variables
                      571  ;***************************************************************************
                      572  
 007E                 573  value:          ds 1     ; Value sent to VFD(instruction or data)
 007F                 574  LineNum:        ds 1     ; Line number for VFD(for instruction)
                      575  
                      576  ;Memory Location $0080 (decimal 128)
                      577  
 0080                 578  ColNum:         ds 1     ; Column number for VFD(for instruction)
 0081                 579  DatVal:         ds 1     ; Data value for VFD
 0082                 580  ComVal:         ds 1     ; Value for VFD command data
 0083                 581  TopVal:         ds 1     ; Value for VFD top line data
 0084                 582  DisVal:         ds 1     ; Value for VFD bottom line variable data
                      583  
                      584  ;***************************************************************************
                      585  ; - Variables to display VFD bottom line
                      586  ;***************************************************************************
                      587  
 0085                 588  BotLin0:      ds 1     ; Bottom Line Column 0
 0086                 589  BotLin1:      ds 1     ; Bottom Line Column 1
 0087                 590  BotLin2:      ds 1     ; Bottom Line Column 2
 0088                 591  BotLin3:      ds 1     ; Bottom Line Column 3
 0089                 592  BotLin4:      ds 1     ; Bottom Line Column 4
 008A                 593  BotLin5:      ds 1     ; Bottom Line Column 5
 008B                 594  BotLin6:      ds 1     ; Bottom Line Column 6
 008C                 595  BotLin7:      ds 1     ; Bottom Line Column 7
 008D                 596  BotLin8:      ds 1     ; Bottom Line Column 8
 008E                 597  BotLin9:      ds 1     ; Bottom Line Column 9
 008F                 598  BotLin10:     ds 1     ; Bottom Line Column 10
                      599  
                      600  ;Memory Location $0090 (decimal 144)
                      601  
 0090                 602  BotLin11:     ds 1     ; Bottom Line Column 11
 0091                 603  BotLin12:     ds 1     ; Bottom Line Column 12
 0092                 604  BotLin13:     ds 1     ; Bottom Line Column 13
 0093                 605  BotLin14:     ds 1     ; Bottom Line Column 14
 0094                 606  BotLin15:     ds 1     ; Bottom Line Column 15
 0095                 607  BotLin16:     ds 1     ; Bottom Line Column 16
 0096                 608  BotLin17:     ds 1     ; Bottom Line Column 17
 0097                 609  BotLin18:     ds 1     ; Bottom Line Column 18
 0098                 610  BotLin19:     ds 1     ; Bottom Line Column 19
                      611  
                      612  ;***************************************************************************
                      613  ; - Variables to display VFD bottom line, last pass through main loop
                      614  ;***************************************************************************
                      615  
 0099                 616  BotLin0L:      ds 1     ; Bottom Line Column 0, last pass
 009A                 617  BotLin1L:      ds 1     ; Bottom Line Column 1, last pass
 009B                 618  BotLin2L:      ds 1     ; Bottom Line Column 2, last pass
 009C                 619  BotLin3L:      ds 1     ; Bottom Line Column 3, last pass
 009D                 620  BotLin4L:      ds 1     ; Bottom Line Column 4, last pass
 009E                 621  BotLin5L:      ds 1     ; Bottom Line Column 5, last pass
 009F                 622  BotLin6L:      ds 1     ; Bottom Line Column 6, last pass
                      623  
                      624  ;Memory Location $00A0 (decimal 160)
                      625  
 00A0                 626  BotLin7L:      ds 1     ; Bottom Line Column 7, last pass
 00A1                 627  BotLin8L:      ds 1     ; Bottom Line Column 8, last pass
 00A2                 628  BotLin9L:      ds 1     ; Bottom Line Column 9, last pass
 00A3                 629  BotLin10L:     ds 1     ; Bottom Line Column 10, last pass
 00A4                 630  BotLin11L:     ds 1     ; Bottom Line Column 11, last pass
 00A5                 631  BotLin12L:     ds 1     ; Bottom Line Column 12, last pass
 00A6                 632  BotLin13L:     ds 1     ; Bottom Line Column 13, last pass
 00A7                 633  BotLin14L:     ds 1     ; Bottom Line Column 14, last pass
 00A8                 634  BotLin15L:     ds 1     ; Bottom Line Column 15, last pass
 00A9                 635  BotLin16L:     ds 1     ; Bottom Line Column 16, last pass
 00AA                 636  BotLin17L:     ds 1     ; Bottom Line Column 17, last pass
 00AB                 637  BotLin18L:     ds 1     ; Bottom Line Column 18, last pass
 00AC                 638  BotLin19L:     ds 1     ; Bottom Line Column 19, last pass
                      639  
                      640  ;***************************************************************************
                      641  ; - Variables to hold ASCII conversions
                      642  ;***************************************************************************
                      643  
 00AD                 644  AC_100:     ds 1     ; 8 bit ASCII conversion 100s column
 00AE                 645  AC_10:      ds 1     ; 8 bit ASCII conversion 10s column
 00AF                 646  AC_1:       ds 1     ; 8 bit ASCII conversion 1s column
                      647  
                      648  ;Memory Location $00B0 (decimal 176)
                      649  
 00B0                 650  thousands:  ds 1     ; 16 bit ASCII conversion 1000s digit
 00B1                 651  hundreds:   ds 1     ; 16 bit ASCII conversion 100s digit
 00B2                 652  tens:       ds 1     ; 16 bit ASCII conversion 10s digit
 00B3                 653  ones:       ds 1     ; 16 bit ASCII conversion 1s digit
                      654  
                      655  ;****************************************************************************
                      656  ; - RS232 Real Time Variables
                      657  ;****************************************************************************
                      658  
 00B4                 659  secl:           ds 1  ; low seconds - from 0 to 255, then rollover
 00B5                 660  mapADC:         ds 1  ; Manifold Absolute Pressure ADC
 00B6                 661  matADC:         ds 1  ; Manifold Air Temp ADC
 00B7                 662  cltADC:         ds 1  ; Coolant Temperature ADC
 00B8                 663  tpsADC:         ds 1  ; Throttle Position Sensor ADC
 00B9                 664  battADC:        ds 1  ; Battery Voltage ADC
 00BA                 665  egoADC:         ds 1  ; Exhaust Gas Oxygen ADC
 00BB                 666  trimADC:        ds 1  ; Fuel/Ignition Trim ADC
 00BC                 667  baroADC:        ds 1  ; Barometric Pressure ADC
 00BD                 668  barometer:      ds 1  ; Barometer Reading - KPa (0 - 255)
 00BE                 669  barocor:        ds 1  ; Barometer Lookup Correction - percent
 00BF                 670  warmcor:        ds 1  ; Total Warmup Correction - percent
                      671  
                      672  ;Memory Location $00C0 (decimal 192)
                      673  
 00C0                 674  aircor:         ds 1  ; Air Density Correction lookup - percent
 00C1                 675  Ftrimcor:       ds 1  ; Fuel Trim Correction Factor (85% - 115%)
 00C2                 676  gammae:         ds 1  ; Total Gamma Enrichments - percent
 00C3                 677  tpsaccel:       ds 1  ; Acceleration enrichment - percent
 00C4                 678  rpm20:          ds 1  ; Computed engine RPM - rpm/100
 00C5                 679  vecurr:         ds 1  ; Current VE value from lookup table - percent
 00C6                 680  pwcalcH:        ds 1  ; Calculated puslewidth Hi Res Hi byte
 00C7                 681  pwcalcL:        ds 1  ; Calculated puslewidth Hi Res Lo byte
 00C8                 682  pw:             ds 1  ; Calculated pulsewidth Lo Res
 00C9                 683  fd:             ds 1  ; Fuel Delivery pulsewidth Lo Res
 00CA                 684  fdSecH:         ds 1  ; Fuel Delivery pulsewidth Lo res over 1 second Hi byte
 00CB                 685  fdSecL:         ds 1  ; Fuel Delivery pulsewidth Lo res over 1 second Lo byte
                      686  ;*pippprdH:       ds 1  ; PIP period predicted Hi byte


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 9
MV_ECU


                      687  ;*pippprdL:       ds 1  ; PIP period predicted Lo byte
 00CC                 688  tachH:          ds 1  ; Tachometer Period(PIP period) Hi byte
 00CD                 689  tachL:          ds 1  ; Tachometer Period(PIP period) Lo byte
 00CE                 690  spkAngFac:      ds 1  ; Spark Angle Factor(from ST table)
 00CF                 691  trmAngFac:      ds 1  ; Trim Angle FActor (calculated in MSnS300)
                      692  
                      693  ;Memory Location $00D0 (decimal 208)
                      694  
 00D0                 695  dlyAngFac:      ds 1  ; Delay Angle Factor
 00D1                 696  odoSec:         ds 1  ; Odometer counts over 1 second
 00D2                 697  vspH:           ds 1  ; Vehicle speed period Hi byte
 00D3                 698  vspL:           ds 1  ; Vehicle speed period Lo byte
 00D4                 699  monpH:          ds 1  ; Ignition monitor period Hi byte
 00D5                 700  monpL:          ds 1  ; Ignition monitor period Lo byte
 00D6                 701  tpsp:           ds 1  ; Throttle position percent
 00D7                 702  engine:         ds 1  ; Variable bit-field to hold engine current status
 00D8                 703  alarmbits:      ds 1  ; Engine alarm status bit field
 00D9                 704  portAbits:      ds 1  ; Port A status bit field
 00DA                 705  portCbits:      ds 1  ; Port C status bit field
 00DB                 706  BnkflowHmv:     ds 1  ; Injector bank flow rate L/hr x 10 Hi byte for MV
 00DC                 707  BnkflowLmv:     ds 1  ; Injector bank flow rate L/hr x 10 Lo byte for MV
                      708  
                      709  ;***********************************************************************************************
                      710  ; This marks the end of the real time download variables, 41 in total
                      711  ;***********************************************************************************************
                      712  
                      713  ;****************************************************************************
                      714  ; Calculated variables
                      715  ;****************************************************************************
                      716  
 00DD                 717  map:            ds 1  ; Manifold Absolute Pressure in KPA
 00DE                 718  mat:            ds 1  ; Manifold Temperature in degrees F + 40
 00DF                 719  clt:            ds 1  ; Engine Coolant Temperature in degrees F + 40
                      720  
                      721  ; - Memory Location $00E0 (decimal 224)
                      722  
 00E0                 723  volts:          ds 1  ; Battery (system) voltage
 00E1                 724  egoV:           ds 1  ; Exhaust Gas Oxygen sensor voltage
 00E2                 725  lambda:         ds 1  ; Exhaust Gas Oxygen lambda
 00E3                 726  afr:            ds 1  ; Exhaust Gas Oxygen Air/Fuel Ratio
 00E4                 727  duty:           ds 1  ; Injector duty cycle
 00E5                 728  trmAng:         ds 1  ; Ignition Trim Angle
 00E6                 729  dlyAng:         ds 1  ; Ignition Delay Angle
 00E7                 730  timAng:         ds 1  ; Calculated Ignition Timing Angle
 00E8                 731  monTimAng:      ds 1  ; Monitored Ignition Timing Angle
 00E9                 732  ltrHrH:         ds 1  ; Fuel burn in Litres per Hour x 10 Hi byte
 00EA                 733  ltrHrL:         ds 1  ; Fuel burn in Litres per Hour x 10 Lo byte
 00EB                 734  kph:            ds 1  ; Vehicle speed in KPH(lo res fast update)
 00EC                 735  kph1:           ds 1  ; Vehicle speed in KPH(hi res slow update)
 00ED                 736  kmLtrH:         ds 1  ; Fuel burn over 1 second time period in kM per litre x 10
 00EE                 737  kmLtrL:         ds 1  ; Fuel burn over 1 second time period in kM per litre x 10
                      738  
                      739  
                      740  ;****************************************************************************
                      741  ; Variables used in calculations
                      742  ;****************************************************************************
                      743  
 00EF                 744  mmH:            ds 1  ; Millimeters travelled over 1 second Hi byte
                      745  
                      746  ; - Memory Location $00F0 (decimal 240)
                      747  
 00F0                 748  mmL:            ds 1  ; Millimeters travelled over 1 second Lo byte
 00F1                 749  mccH:           ds 1  ; CC/1000 fuel used over 1 second Hi byte
 00F2                 750  mccL:           ds 1  ; CC/1000 fuel used over 1 second Lo byte
 00F3                 751  monDlyAngFac:   ds 1  ; Monitored Delay Angle Factor
 00F4                 752  monDlyAng:      ds 1  ; Monitored Delay Angle
 00F5                 753  monFrngAng:     ds 1  ; Monitored Firing Angle
 00F6                 754  rpmH:           ds 1  ; Engine RPM Lo Res Hi Byte
 00F7                 755  rpmL:           ds 1  ; Engine RPM Lo Res Lo byte
 00F8                 756  rpmhrH:         ds 1  ; Engine RPM Hi Res Hi Byte
 00F9                 757  rpmhrL:         ds 1  ; Engine RPM Hi Res Lo byte
 00FA                 758  BnkFloH:        ds 1  ; Injector bank flow rate in cc/sec x 1,000,000 Hi byte
 00FB                 759  BnkFloL:        ds 1  ; Injector bank flow rate in cc/sec x 1,000,000 Lo byte
 00FC                 760  blank1:         ds 1  ; Place holder
 00FD                 761  blank2:         ds 1  ; Place holder
 00FE                 762  blank3:         ds 1  ; Place holder
 00FF                 763  blank4:         ds 1  ; Place holder
                      764  
                      765  ; - Memory Location $0100 (decimal 256)
                      766  
                      767  
                      768  
                      769  
                      770  ;****************************************************************************
                      771  ;
                      772  ; ----------------- Configure system and set up clock ----------------------
                      773  ;
                      774  ;****************************************************************************
                      775  
 8000                 776       org     rom_start              ; Origin at memory location
                      777                                      ; ($8000 = 32,768)(start of ROM)
                      778  
                      779  START:
                      780  
                      781  ;****************************************************************************
                      782  ; - Set Configuration Register 1
                      783  ;****************************************************************************
                      784  
 8000 [04] 6E3B1F     785       mov     #$3B,CONFIG1     ; Move %00111011 into Configuration Register 1
                      786                                ;(COP timeout period=2p18-2p4 CGMXCLK cycles)
                      787                                ;(LVI disabled during stop mode)
                      788                                ;(LVI module resets disabled)
                      789                                ;(LVI module power disabled)
                      790                                ;(LVI operates in 5-V mode)
                      791                                ;(Stop mode recovery after 4096 CGMXCLKC cycls)
                      792                                ;(Stop instruction enabled)
                      793                                ;(COP module disabled)
                      794  
                      795  ;****************************************************************************
                      796  ; - Set Configuration Register 2
                      797  ;****************************************************************************
                      798  
 8003 [04] 6E011E     799       mov     #$01,CONFIG2     ; Move %00000001 into Configuration Register 2
                      800                                ;(Oscillator disabled during stop mode)
                      801                                ;(Internal data bus clock used as clock source
                      802                                ; for SCI)
                      803  
                      804  ;****************************************************************************
                      805  ; - Set The Stack Pointer to the bottom of RAM
                      806  ;****************************************************************************
                      807  
 8006 [03] 450240     808       ldhx     #ram_last+1           ; Load index register with value in
                      809                                      ; "ram_last" +1 ($023F+1=$0240=576)
 8009 [02] 94         810       txs                            ; Transfer value in index register Lo
                      811                                      ; byte to stack
                      812  
                      813  ;****************************************************************************
                      814  ; - Initialize the PLL Control Register for a bus frequency of 8.003584mhz
                      815  ;****************************************************************************
                      816  
 800A [04] 6E0236     817       mov     #$02,PCTL      ; Move %00000010 into PLL Control Register
                      818                              ;(PLL Interrupts Disabled)
                      819                              ;(No change in lock condition(flag))
                      820                              ;(PLL off)
                      821                              ;(CGMXCLK divided by 2 drives CGMOUT)
                      822                              ;(VCO pwr of 2 mult = 1(E=0))


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 10
MV_ECU


                      823                              ;(Prescale mult = 4(P=2))
 800D [04] 6E0338     824       mov     #$03,PMSH      ; Move %00000011 into PLL Multiplier Select
                      825                              ; Register Hi (Set N MSB)
 8010 [04] 6ED139     826       mov     #$D1,PMSL      ; Move %11010001 into PLL Multiplier Select
                      827                              ; Register Lo (Set N LSB)($84 for 7.37 MHz)
 8013 [04] 6ED03A     828       mov     #$D0,PMRS      ; Move %11010000 into PLL VCO Range Select
                      829                              ; Register (Set L) ($C0 for 7.37 MHz)
 8016 [04] 6E013B     830       mov     #$01,PMDS      ; Move %00000001 into Reference Divider Select
                      831                              ; Register (Set "RDS0" bit (default value of 1)
 8019 [04] 1E37       832       bset    AUTO,PBWC      ; Set "Auto" bit of PLL Bandwidth Control Register
 801B [04] 6E3236     833       mov     #$32,PCTL      ; Move %00100000 into PLL Control Register
                      834                              ;(PLL On)
                      835  
                      836  PLL_WAIT:
 801E [05] 0D37FD     837       brclr   LOCK,PBWC,PLL_WAIT     ; If "Lock" bit of PLL Bandwidth Control
                      838                                      ; Register is clear, branch to PLL_WAIT:
 8021 [04] 1836       839       bset    BCS,PCTL               ; Set "BCS" bit of PLL Control Register
                      840                                      ;(CGMXCLK divided by 2 drives CGMOUT)
                      841                                      ;(Select VCO as base clock)
                      842  
                      843  
                      844  ;****************************************************************************
                      845  ;
                      846  ; ----------------------------- Set up RS 232 ------------------------------
                      847  ;
                      848  ;****************************************************************************
                      849  
                      850  ;****************************************************************************
                      851  ; - Enable/disable loop mode
                      852  ;****************************************************************************
                      853  
 8023 [04] 6E4013     854       mov     #$40,SCC1     ; Move %01000000 into SCI Control Register 1
                      855                             ;(Normal operation enabled)
                      856                             ;(Set "ENSCI" bit)(SCI enabled)
                      857                             ;(Transmitter output not inverted)
                      858                             ;(8 bit SCI characters)
                      859                             ;(Idle line wakeup)
                      860                             ;(Idle character bit countbegins after start bit)
                      861                             ;(Parity function disabled)
                      862                             ;(Even Parity)
 8026 [04] 1013       863       bset    PTY,SCC1      ; Set "PTY" bit of SCI Control Register 1
                      864                             ;(Odd Parity)???
                      865  
                      866  ;****************************************************************************
                      867  ; - This register initialize interrupts request and activates the
                      868  ;   transmitter and receiver and wakeup mode
                      869  ;****************************************************************************
                      870  
 8028 [04] 6E0C14     871       mov     #$0C,SCC2     ; Move %00001100 into SCI Control Register 2
                      872                             ;(SCTIE not enabled to generate CPU interrupt)
                      873                             ;(TCIE not enabled to generate CPU interrupt)
                      874                             ;(SCRIE not enabled to generate CPU interrupt)
                      875                             ;(ILIE not enabled to generate CPU interrupt)
                      876                             ;(Set "TE" bit)(Transmitter enabled)
                      877                             ;(Set "RE" bit)(Receiver enabled)
                      878                             ;(Normal Operation)
                      879                             ;(No break characters being transmitted)
                      880  
                      881  ;****************************************************************************
                      882  ; - This register initialize the DMA services and error interrupts
                      883  ;****************************************************************************
                      884  
 802B [03] 3F15       885       clr     SCC3          ; Clear SCI Control Register 3
                      886                             ;(DMA not enabled to service SCI receiver)
                      887                             ;(SCTE DMA service requests disabled)
                      888                             ;(SCI error CPU interrupt requests for OR bit
                      889                             ; disabled)
                      890                             ;(SCI error CPU interrupt requests for NE bit
                      891                             ; disabled)
                      892                             ;(SCI error CPU interrupt requests for FE bit
                      893                             ; disabled)
                      894                             ;(SCI error CPU interrupt requests for PE bit
                      895                             ; disabled)
                      896  
                      897  ;****************************************************************************
                      898  ; - This register sets baud rate
                      899  ;****************************************************************************
                      900  
 802D [02] A630       901       lda      #$30           ; Load accumulator with %00110000
 802F [03] B719       902       sta      SCBR           ; Copy to SCI Baud Rate Register
                      903                               ; 8003584mhz/(64*13*1)=9619.7 baud
                      904  
                      905  ;****************************************************************************
                      906  ; ------------- Set up the port data-direction registers --------------------
                      907  ;               Set directions,
                      908  ;               Preset state of pins to become outputs
                      909  ;               Set all unused pins to outputs initialized Lo
                      910  ;****************************************************************************
                      911  
                      912  ;****************************************************************************
                      913  ; - Set up VFD control line I/Os
                      914  ;****************************************************************************
                      915  
                      916  ; Port B
 8031 [03] 3F01       917       clr     PORTB           ; Clear Port B Data Register
                      918                               ;(Preinit all pins low)
 8033 [02] A6FF       919       lda     #$FF            ; Load accumulator with %11111111
                      920                               ;(port direction setup 1 = output)
 8035 [03] B705       921       sta     DDRB            ; Copy to Port A Data Direction Register
                      922                               ; Set all as outputs
                      923                               ; NA,RS,R/W,En,NA,NA,NA,NA
                      924  
                      925  ; Port C
 8037 [03] 3F02       926       clr     PORTC           ; Clear Port C Data Register
                      927                               ;(Preinit all pins low)
 8039 [02] A6FF       928       lda     #$FF            ; Load accumulator with %11111111
                      929                               ; (set up port directions, 1 = out)
 803B [03] B706       930       sta     DDRC            ; Copy to Port C Data Direction Register
                      931                               ; Set all as outputs
                      932                               ; NA,NA,NA,NA,DB7,DB6,DB5,DB4
                      933  
                      934  ;****************************************************************************
                      935  ; - Set up for push button inputs
                      936  ;****************************************************************************
                      937  
                      938  ; Port A
 803D [04] 6EFF0D     939       mov     #$FF,PTAPUE     ; Move %11111111 into Port A pullup register
                      940                               ;(Set all pullups)
 8040 [03] 3F00       941       clr     PORTA           ; Clear Port A Data Regisister
                      942                               ;(preinit all pins Lo)
 8042 [02] A6F0       943       lda     #$F0            ; Load accumulator with %11110000
                      944                               ;(port direction setup 1 = output)
 8044 [03] B704       945       sta     DDRA            ; Copy to Port A Data Direction Register
                      946                               ; Inputs on PTA3,2,1,0
                      947                               ; Tog Mode,Frz/Sel,Scrl Rt/Inc.Scrl Lft/Dec
                      948                               ; Outputs on PTA7,6,5,4 (not used)
                      949  
                      950  ;****************************************************************************
                      951  ; - Set up Ports D and E.(The Motorola manual states that it is not
                      952  ;   necessarry to set up Port E when SCI is enabled, but we'll do it anyway).
                      953  ;****************************************************************************
                      954  
                      955  ; Port D
 8046 [03] 3F03       956       clr     PORTD           ; Clear Port D Data Register
                      957                               ;(Preinit all pins low)
 8048 [02] A6FF       958       lda     #$FF            ; Load accumulator with %11111111


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 11
MV_ECU


                      959                               ; (init port directions 1 = out)
 804A [03] B707       960       sta     DDRD            ; Copy to Port D Data Direction Register
                      961                               ; Set all as outputs
                      962                               ; NA,NA,NA,NA,NA,NA,NA,NA
                      963  
                      964  ; Port E
 804C [03] 3F08       965       clr     PORTE           ; Clear Port E Data Register (to avoid glitches)
 804E [02] A601       966       lda     #$01            ; Load accumulator with %00000001
                      967                               ; (set up port directions, 1 = out)
                      968                               ; (Serial Comm Port)
 8050 [03] B70C       969       sta     DDRE            ; Copy to Port E Data Direction Register
                      970  
                      971  
                      972  ;***************************************************************************
                      973  ; - Initialize the variables
                      974  ;***************************************************************************
                      975  
 8052 [01] 4F         976       clra                   ; Clear accumulator
 8053 [01] 8C         977       clrh                   ; Clear index register Hi byte
 8054 [01] 5F         978       clrx                   ; Clear index register Lo byte
 8055 [03] 3F40       979       clr     Sw0DB          ; Switch #0 de-bounce timer counter variable
 8057 [03] 3F41       980       clr     Sw0ARC         ; Switch #0 auto-repeat command timer counter var
 8059 [03] 3F42       981       clr     Sw0AR          ; Switch #0 auto-repeat timer counter variable
 805B [03] 3F43       982       clr     Sw1DB          ; Switch #1 de-bounce timer counter variable
 805D [03] 3F44       983       clr     Sw1ARC         ; Switch #1 auto-repeat command timer counter var
 805F [03] 3F45       984       clr     Sw1AR          ; Switch #1 auto-repeat timer counter variable
 8061 [03] 3F46       985       clr     Sw2DB          ; Switch #2 de-bounce timer counter variable
 8063 [03] 3F47       986       clr     Sw2ARC         ; Switch #2 auto-repeat command timer counter var
 8065 [03] 3F48       987       clr     Sw2AR          ; Switch #2 auto-repeat timer counter variable
 8067 [03] 3F49       988       clr     Sw3DB          ; Switch #3 de-bounce timer counter variable
 8069 [03] 3F4A       989       clr     Sw3ARC         ; Switch #3 auto-repeat command timer counter var
 806B [03] 3F4B       990       clr     Sw3AR          ; Switch #3 auto-repeat timer counter variable
 806D [03] 3F4C       991       clr     LPflags        ; Switch last pass status bit field variable
 806F [03] 3F4D       992       clr     ARCflags       ; Switch auto-repeat command status bit field
 8071 [03] 3F4E       993       clr     ARflags        ; Switch auto-repeat status bit field variable
 8073 [03] 3F4F       994       clr     Swflags        ; Switch status bit field variable
 8075 [03] 3F50       995       clr     ModeCntr       ; Counter for determining "mode" bit status
 8077 [03] 3F51       996       clr     FrzCntr        ; Counter for determining "frz" bit status
 8079 [03] 3F52       997       clr     SelCntr        ; Counter for determining "sel" bit status
 807B [03] 3F53       998       clr     flags          ; Bit field for operating status flags (1 of 2)
 807D [03] 3F54       999       clr     ScrnCnt        ; Counter for display screen numbers
 807F [03] 3F55      1000       clr     ScrnCnt_prv    ; Screen count number previous
 8081 [03] 3F57      1001       clr     ConCnt         ; Counter for Constant numbers
 8083 [03] 3F58      1002       clr     ConCnt_prv     ; Constant number previous
 8085 [03] 3F82      1003       clr     ComVal         ; Value for VFD command data
 8087 [03] 3F83      1004       clr     TopVal         ; Value for VFD top line data
 8089 [03] 3F84      1005       clr     DisVal         ; Value for VFD bottom line variable data
 808B [03] 3F5B      1006       clr     ConVal         ; Value for VFD bottom line constant data
 808D [03] 3F5A      1007       clr     CurCon         ; Value of current selected constant
 808F [03] 3F80      1008       clr     ColNum         ; Value of  Column number for VFD
 8091 [03] 3F7E      1009       clr     value          ; Value for VFD data
 8093 [03] 3F81      1010       clr     DatVal         ; Data value for VFD
 8095 [03] 3F5C      1011       clr     ByteCnt        ; Count of bytes to receive via SCI
 8097 [03] 3F5D      1012       clr     ByteGoal       ; Desired number of bytes to receive via SCI
 8099 [03] 3F5E      1013       clr     readbuf        ; Buffer for temporary storage of received byte
 809B [03] 3F5F      1014       clr     mS             ; Milliseconds counter
 809D [03] 3F60      1015       clr     mSx5           ; 5 Milliseconds counter
 809F [03] 3F5C      1016       clr     ByteCnt        ; Count of bytes to receive via SCI
 80A1 [03] 3F5D      1017       clr     ByteGoal       ; Desired number of bytes to receive via SCI
 80A3 [03] 3F5E      1018       clr     readbuf        ; Buffer for temporary storage of received byte
 80A5 [03] 3F7E      1019       clr     value          ; Value sent to VFD(instruction or data)
 80A7 [03] 3F7F      1020       clr     LineNum        ; Line number for VFD(for instruction)
 80A9 [03] 3F80      1021       clr     ColNum         ; Column number for VFD(for instruction)
 80AB [03] 3F81      1022       clr     DatVal         ; Data value for VFD
 80AD [03] 3F82      1023       clr     ComVal         ; Value for VFD command data
 80AF [03] 3F83      1024       clr     TopVal         ; Value for VFD top line data
 80B1 [03] 3F84      1025       clr     DisVal         ; Value for VFD bottom line variable data
 80B3 [03] 3F85      1026       clr     BotLin0        ; Bottom Line Column 0
 80B5 [03] 3F86      1027       clr     BotLin1        ; Bottom Line Column 1
 80B7 [03] 3F87      1028       clr     BotLin2        ; Bottom Line Column 2
 80B9 [03] 3F88      1029       clr     BotLin3        ; Bottom Line Column 3
 80BB [03] 3F89      1030       clr     BotLin4        ; Bottom Line Column 4
 80BD [03] 3F8A      1031       clr     BotLin5        ; Bottom Line Column 5
 80BF [03] 3F8B      1032       clr     BotLin6        ; Bottom Line Column 6
 80C1 [03] 3F8C      1033       clr     BotLin7        ; Bottom Line Column 7
 80C3 [03] 3F8D      1034       clr     BotLin8        ; Bottom Line Column 8
 80C5 [03] 3F8E      1035       clr     BotLin9        ; Bottom Line Column 9
 80C7 [03] 3F8F      1036       clr     BotLin10       ; Bottom Line Column 10
 80C9 [03] 3F90      1037       clr     BotLin11       ; Bottom Line Column 11
 80CB [03] 3F91      1038       clr     BotLin12       ; Bottom Line Column 12
 80CD [03] 3F92      1039       clr     BotLin13       ; Bottom Line Column 13
 80CF [03] 3F93      1040       clr     BotLin14       ; Bottom Line Column 14
 80D1 [03] 3F94      1041       clr     BotLin15       ; Bottom Line Column 15
 80D3 [03] 3F95      1042       clr     BotLin16       ; Bottom Line Column 16
 80D5 [03] 3F96      1043       clr     BotLin17       ; Bottom Line Column 17
 80D7 [03] 3F97      1044       clr     BotLin18       ; Bottom Line Column 18
 80D9 [03] 3F98      1045       clr     BotLin19       ; Bottom Line Column 19
 80DB [03] 3F99      1046       clr     BotLin0L       ; Bottom Line Column 0 last pass
 80DD [03] 3F9A      1047       clr     BotLin1L       ; Bottom Line Column 1 last pass
 80DF [03] 3F9B      1048       clr     BotLin2L       ; Bottom Line Column 2 last pass
 80E1 [03] 3F9C      1049       clr     BotLin3L       ; Bottom Line Column 3 last pass
 80E3 [03] 3F9D      1050       clr     BotLin4L       ; Bottom Line Column 4 last pass
 80E5 [03] 3F9E      1051       clr     BotLin5L       ; Bottom Line Column 5 last pass
 80E7 [03] 3F9F      1052       clr     BotLin6L       ; Bottom Line Column 6 last pass
 80E9 [03] 3FA0      1053       clr     BotLin7L       ; Bottom Line Column 7 last pass
 80EB [03] 3FA1      1054       clr     BotLin8L       ; Bottom Line Column 8 last pass
 80ED [03] 3FA2      1055       clr     BotLin9L       ; Bottom Line Column 9 last pass
 80EF [03] 3FA3      1056       clr     BotLin10L      ; Bottom Line Column 10 last pass
 80F1 [03] 3FA4      1057       clr     BotLin11L      ; Bottom Line Column 11 last pass
 80F3 [03] 3FA5      1058       clr     BotLin12L      ; Bottom Line Column 12 last pass
 80F5 [03] 3FA6      1059       clr     BotLin13L      ; Bottom Line Column 13 last pass
 80F7 [03] 3FA7      1060       clr     BotLin14L      ; Bottom Line Column 14 last pass
 80F9 [03] 3FA8      1061       clr     BotLin15L      ; Bottom Line Column 15 last pass
 80FB [03] 3FA9      1062       clr     BotLin16L      ; Bottom Line Column 16 last pass
 80FD [03] 3FAA      1063       clr     BotLin17L      ; Bottom Line Column 17 last pass
 80FF [03] 3FAB      1064       clr     BotLin18L      ; Bottom Line Column 18 last pass
 8101 [03] 3FAC      1065       clr     BotLin19L      ; Bottom Line Column 19last pass
 8103 [03] 3FAD      1066       clr     AC_100         ; 8 bit ASCII conversion 100s column
 8105 [03] 3FAE      1067       clr     AC_10          ; 8 bit ASCII conversion 10s column
 8107 [03] 3FAF      1068       clr     AC_1           ; 8 bit ASCII conversion 1s column
 8109 [03] 3FDD      1069       clr     map            ; Manifold Absolute Pressure in KPA
 810B [03] 3FDE      1070       clr     mat            ; Manifold Temperature in degrees F + 40
 810D [03] 3FDF      1071       clr     clt            ; Engine Coolant Temperature in degrees F + 40
 810F [03] 3FE0      1072       clr     volts          ; Battery (system) voltage
 8111 [03] 3FE1      1073       clr     egoV           ; Exhaust Gas Oxygen sensor voltage
 8113 [03] 3FE2      1074       clr     lambda         ; Exhaust Gas Oxygen lambda
 8115 [03] 3FE3      1075       clr     afr            ; Exhaust Gas Oxygen Air/Fuel Ratio
 8117 [03] 3FE4      1076       clr     duty           ; Injector duty cycle
 8119 [03] 3FE5      1077       clr     trmAng         ; Ignition Trim Angle
 811B [03] 3FE6      1078       clr     dlyAng         ; Ignition Delay Angle
 811D [03] 3FE7      1079       clr     timAng         ; Calculated Ignition Timing Angle
 811F [03] 3FE8      1080       clr     monTimAng      ; Monitored Ignition Timing Angle
 8121 [03] 3FE9      1081       clr     ltrHrH         ; Fuel burn in Litres per Hour x 10 Hi byte
 8123 [03] 3FEA      1082       clr     ltrHrL         ; Fuel burn in Litres per Hour x 10 Lo byte
 8125 [03] 3FEB      1083       clr     kph            ; Vehicle speed in KPH(lo res fast update)
 8127 [03] 3FEC      1084       clr     kph1           ; Vehicle speed in KPH(hi res slow update)
 8129 [03] 3FED      1085       clr     kmLtrH         ; Fuel burn over 1 second time period in kM per litre x 10
 812B [03] 3FEE      1086       clr     kmLtrL         ; Fuel burn over 1 second time period in kM per litre x 10
 812D [03] 3FEF      1087       clr     mmH            ; Millimeters travelled over 1 second Hi byte
 812F [03] 3FF0      1088       clr     mmL            ; Millimeters travelled over 1 second Lo byte
 8131 [03] 3FF1      1089       clr     mccH           ; CC/1000 fuel used over 1 second Hi byte
 8133 [03] 3FF2      1090       clr     mccL           ; CC/1000 fuel used over 1 second Lo byte
 8135 [03] 3FF3      1091       clr     monDlyAngFac   ; Monitored Delay Angle Factor
 8137 [03] 3FF4      1092       clr     monDlyAng      ; Monitored Delay Angle
 8139 [03] 3FF5      1093       clr     monFrngAng     ; Monitored Firing Angle
 813B [03] 3FF6      1094       clr     rpmH           ; Engine RPM Lo Res Hi Byte


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 12
MV_ECU


 813D [03] 3FF7      1095       clr     rpmL           ; Engine RPM Lo Res Lo byte
 813F [03] 3FF8      1096       clr     rpmhrH         ; Engine RPM Hi Res Hi Byte
 8141 [03] 3FF9      1097       clr     rpmhrL         ; Engine RPM Hi Res Lo byte
 8143 [03] 3FFA      1098       clr     BnkFloH        ; Injector bank flow rate in cc/sec x 1,000,000 Hi byte
 8145 [03] 3FFB      1099       clr     BnkFloL        ; Injector bank flow rate in cc/sec x 1,000,000 Lo byte
                     1100  
                     1101  
                     1102  
                     1103  
 8147 [04] 6EFF56    1104       mov     #$FF,ScrnCnt_Lst     ; Move decimal 255 into "ScrnCnt_Lst"
 814A [04] 6EFF59    1105       mov     #$FF,ConCnt_Lst      ; Move decimal 255 into "ConCnt_Lst"
                     1106  
                     1107  ;***************************************************************************
                     1108  ; - Delay while power stabilizes, allow MS and VFD to come up.
                     1109  ;   One pass through the primary loop takes ~1.5uS, so this delay is ~300mS
                     1110  ;   (minimum delay is 260mS)
                     1111  ;***************************************************************************
                     1112  
 814D [05] CD8F9A    1113       jsr     DELAY300     ; Jump to subroutine at DELAY300:
                     1114  
                     1115  ;****************************************************************************
                     1116  ; Set up TIM2 as a free running ~1us counter. Set Channel 0 output compare
                     1117  ; to generate the ~1000us(1.0mS) clock tick interupt vector "TIM2CH0_ISR:"
                     1118  ;****************************************************************************
                     1119  
 8150 [04] 6E332B    1120       mov     #$33,T2SC       ; Move %00110011 into Timer2
                     1121                               ; Status and Control Register
                     1122                               ;(Disable interrupts, stop timer)
                     1123                               ;(Prescale and counter cleared))
                     1124                               ;(Prescale for bus frequency / 8)
 8153 [04] 6EFF2E    1125       mov     #$FF,T2MODH     ; Move decimal 255 into T2 modulo reg Hi
 8156 [04] 6EFF2F    1126       mov     #$FF,T2MODL     ; Move decimal 255 into T2 modulo reg Lo
                     1127                               ;(free running timer)
 8159 [04] 6E0331    1128       mov     #$03,T2CH0H     ; Move decimal 3 into T1CH0 O/C register Hi
 815C [04] 6EE832    1129       mov     #$E8,T2CH0L     ; Move decimal 232 into T1CH0 O/C register Lo
                     1130                               ;(~1000uS)=(~1.0mS)
 815F [04] 6E5430    1131       mov     #$54,T2SC0      ; Move %01010100 into Timer2
                     1132                               ; channel 0 status and control register
                     1133                               ; (Output compare, interrupt enabled)
 8162 [04] 6E032B    1134       mov     #$03,T2SC       ; Move %00000011 into Timer2
                     1135                               ; Status and Control Register
                     1136                               ; Disable interrupts, counter Active
                     1137                               ; Prescale for bus frequency / 8
                     1138                               ; 8,003584hz/8=1000448hz
                     1139                               ; = .0000009995sec
                     1140  
                     1141  ;****************************************************************************
                     1142  ; - Enable Interrupts
                     1143  ;****************************************************************************
                     1144  
 8165 [02] 9A        1145       cli              ; Clear interrupt mask ( Turn on all interrupts now )
                     1146  
                     1147  ;***************************************************************************
                     1148  ; ------------------------------ Initialize VFD ---------------------------
                     1149  ;
                     1150  ;  PTB4       - VFD Display Enable
                     1151  ;  PTB5       - VFD Display R/W
                     1152  ;  PTB6       - VFD Display RS
                     1153  ;  PTC0       - VFD Display data DB4
                     1154  ;  PTC1       - VFD Display data DB5
                     1155  ;  PTC2       - VFD Display data DB6
                     1156  ;  PTC3       - VFD Display data DB7
                     1157  ;
                     1158  ;***************************************************************************
                     1159  
                     1160  ;***************************************************************************
                     1161  ; - Clear EN, R/W, and RS
                     1162  ;***************************************************************************
                     1163  
 8166 [04] 6E0001    1164       mov     #$00,PORTB     ; Move 0 into PortB(Clear all Port B)
                     1165                              ;("En"=0,"R/W"=0,"RS"=0)
                     1166  
                     1167  ;***************************************************************************
                     1168  ; - Initialize for 8 bit mode (Function Set)(do this 3 times)
                     1169  ;***************************************************************************
                     1170  
 8169 [04] 6E0302    1171       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1172                                ;(Set bit 0=DB4, and bit1=DB5)
 816C [04] 1801      1173       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 816E [05] CD90FC    1174       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8171 [04] 1901      1175       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8173 [05] CD9108    1176       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1177  
 8176 [04] 6E0302    1178       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1179                                ;(Set bit 0=DB4, and bit1=DB5)
 8179 [04] 1801      1180       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 817B [05] CD90FC    1181       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 817E [04] 1901      1182       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8180 [05] CD9108    1183       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1184  
 8183 [04] 6E0302    1185       mov     #$03,PORTC       ; Move %00000011 into PortC
                     1186                                ;(Set bit 0=DB4, and bit1=DB5)
 8186 [04] 1801      1187       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8188 [05] CD90FC    1188       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 818B [04] 1901      1189       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 818D [05] CD9108    1190       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1191  
                     1192  ;***************************************************************************
                     1193  ; - Set 4 bit bus mode Hi nibble (Function Set)
                     1194  ;***************************************************************************
                     1195  
 8190 [04] 6E0202    1196       mov     #$02,PORTC       ; Move %00000010 into PortC
                     1197                                ;(Set bit1=DB5)
 8193 [04] 1801      1198       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8195 [05] CD90FC    1199       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8198 [04] 1901      1200       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 819A [05] CD9108    1201       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1202  
                     1203  ;***************************************************************************
                     1204  ; - Set 4 bit bus mode Hi nibble (Function Set)
                     1205  ;***************************************************************************
                     1206  
 819D [04] 6E0202    1207       mov     #$02,PORTC       ; Move %00000010 into PortC
                     1208                                ;(Set bit1=DB5)
 81A0 [04] 1801      1209       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81A2 [05] CD9108    1210       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81A5 [04] 1901      1211       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1212  
                     1213  
                     1214  ;***************************************************************************
                     1215  ; - Set 4 bit bus mode Lo nibble (Function Set)
                     1216  ;***************************************************************************
                     1217  
 81A7 [04] 6E0802    1218       mov     #$08,PORTC       ; Move %00001000 into PortC(Set bit7=DB3)
 81AA [04] 1801      1219       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81AC [05] CD90FC    1220       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81AF [04] 1901      1221       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81B1 [05] CD9108    1222       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1223  
                     1224  ;***************************************************************************
                     1225  ; - Set brightness to 100% Hi nibble (Brightness Set)
                     1226  ;***************************************************************************
                     1227  
 81B4 [04] 1C01      1228       bset    Reg_Sel,PORTB    ; Set "Reg_Sel" bit of PortB(RS=1)
 81B6 [05] CD9108    1229       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81B9 [04] 6E0002    1230       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 13
MV_ECU


 81BC [04] 1801      1231       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81BE [05] CD9108    1232       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81C1 [04] 1901      1233       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1234  
                     1235  ;***************************************************************************
                     1236  ; - Set brightness to 100% Lo nibble (Brightness Set)
                     1237  ;***************************************************************************
                     1238  
 81C3 [04] 6E0002    1239       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81C6 [04] 1801      1240       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81C8 [05] CD90FC    1241       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81CB [04] 1901      1242       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81CD [05] CD9108    1243       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81D0 [04] 1D01      1244       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of PortB(RS=0)
                     1245  
                     1246  ;***************************************************************************
                     1247  ; - Set display off, cursor off, blinking off Hi nibble
                     1248  ;   (Display On/Off control)
                     1249  ;***************************************************************************
                     1250  
 81D2 [04] 6E0002    1251       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81D5 [04] 1801      1252       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81D7 [05] CD9108    1253       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81DA [04] 1901      1254       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1255  
                     1256  ;***************************************************************************
                     1257  ; - Set display off, cursor off, blinking off Lo nibble
                     1258  ;   (Display On/Off control)
                     1259  ;***************************************************************************
                     1260  
 81DC [04] 6E0802    1261       mov     #$08,PORTC       ; Move %00001000 into PortC(Set bit7=DB3)
 81DF [04] 1801      1262       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81E1 [05] CD90FC    1263       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81E4 [04] 1901      1264       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 81E6 [05] CD9108    1265       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1266  
                     1267  ;***************************************************************************
                     1268  ; - Set display clear Hi nibble(Display Clear)
                     1269  ;***************************************************************************
                     1270  
 81E9 [04] 6E0002    1271       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 81EC [04] 1801      1272       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81EE [05] CD9108    1273       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 81F1 [04] 1901      1274       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1275  
                     1276  ;***************************************************************************
                     1277  ; - Set display clear Lo nibble(Display Clear)
                     1278  ;***************************************************************************
                     1279  
 81F3 [04] 6E0102    1280       mov     #$01,PORTC       ; Move %00000001 into PortC (Set bit0=DB0))
 81F6 [04] 1801      1281       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 81F8 [05] CD90FC    1282       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 81FB [04] 1901      1283       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1284  
                     1285  ;***************************************************************************
                     1286  ; - Delay for command to execute (min 2.3mS)
                     1287  ;   One pass through the primary loop takes ~1.5uS, bus frequency of ~8mHZ
                     1288  ;***************************************************************************
                     1289  
 81FD [03] 3F6A      1290       clr     tmp2       ; Clear tmp2 variable
                     1291  
                     1292  WAIT_6:
 81FF [03] 3F69      1293       clr     tmp1       ; Clear tmp1 variable
                     1294  
                     1295  WAIT_5:
 8201 [03] B669      1296       lda     tmp1       ; Load accumulator with value in tmp1 variable
 8203 [01] 4C        1297       inca               ; Increment value in accumulator
 8204 [03] B769      1298       sta     tmp1       ; Copy to tmp1 variable
 8206 [02] A1FF      1299       cmp     #$FF       ; Compare value in accumulator with decimal 255
 8208 [03] 25F7      1300       blo     WAIT_5     ; If C bit of CCR is set, (A<M), branch to WAIT_5:
 820A [03] B66A      1301       lda     tmp2       ; Load accumulator with value in tmp2 variable
 820C [01] 4C        1302       inca               ; Increment value in accumulator
 820D [03] B76A      1303       sta     tmp2       ; Copy to tmp2 variable
 820F [02] A107      1304       cmp     #$07       ; Compare value in accumulator with decimal 7
 8211 [03] 25EC      1305       blo     WAIT_6     ; If C bit of CCR is set, (A<M), branch to WAIT_6:
                     1306                          ;(~2.6mS delay)
                     1307  
                     1308  ;***************************************************************************
                     1309  ; - Set display on, cursor off, blinking off Hi nibble
                     1310  ;   (Display On/Off control)
                     1311  ;***************************************************************************
                     1312  
 8213 [04] 6E0002    1313       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 8216 [04] 1801      1314       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8218 [05] CD9108    1315       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 821B [04] 1901      1316       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1317  
                     1318  ;***************************************************************************
                     1319  ; - Set display on, cursor off, blinking off Lo nibble
                     1320  ;   (Display On/Off control)
                     1321  ;***************************************************************************
                     1322  
 821D [04] 6E0C02    1323       mov     #$0C,PORTC       ; Move %00001100 into PortC
                     1324                                ;(Set bit7=DB3 and bit6=DB2)
 8220 [04] 1801      1325       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8222 [05] CD90FC    1326       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 8225 [04] 1901      1327       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 8227 [05] CD9108    1328       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1329  
                     1330  ;***************************************************************************
                     1331  ; - Set cursor increment Hi nibble(Entry Mode Set)
                     1332  ;***************************************************************************
                     1333  
 822A [04] 6E0002    1334       mov     #$00,PORTC       ; Move %00000000 into PortC (Clear all Port C)
 822D [04] 1801      1335       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 822F [05] CD9108    1336       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 8232 [04] 1901      1337       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     1338  
                     1339  ;***************************************************************************
                     1340  ; - Set cursor increment Lo nibble(Entry Mode Set)
                     1341  ;***************************************************************************
                     1342  
 8234 [04] 6E0602    1343       mov     #$06,PORTC       ; Move %00000110 into PortC
                     1344                                ;(Set bit6=DB2 and bit5=DB1)
 8237 [04] 1801      1345       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 8239 [05] CD90FC    1346       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 823C [04] 1901      1347       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 823E [05] CD9108    1348       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     1349  
                     1350  ;****************************************************************************
                     1351  ;****************************************************************************
                     1352  ;*                        M A I N  E V E N T  L O O P                       *
                     1353  ;****************************************************************************
                     1354  ;****************************************************************************
                     1355  
                     1356  LOOPY:
                     1357  
                     1358  ;****************************************************************************
                     1359  ; - Check control button states
                     1360  ;****************************************************************************
                     1361  
 8241 [05] CD8F0C    1362       jsr     SW0_CHK     ; Jump to subroutine at SW0_CHK:
                     1363                           ;(Check he state of the Display Screen next
                     1364                           ; button on PTA0)
 8244 [05] CD8F53    1365       jsr     SW1_CHK     ; Jump to subroutine at SW1_CHK:
                     1366                           ;(Check he state of the Display Screen previous


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 14
MV_ECU


                     1367                           ; button on PTA1)
                     1368  
 8247 [05] 024F06    1369       brset   Sw1cls,Swflags,SCRL_D_RT   ; If "Sw1cls" bit of "Swflags"
                     1370                                          ; variable is set, branch to
                     1371                                          ; SCRL_D_RT
                     1372                                          ;(Scroll Right/Increment button is
                     1373                                          ; pressed)
 824A [05] 004F17    1374       brset   Sw0cls,Swflags,SCRL_D_LFT  ; If "Sw0cls" bit of "Swflags"
                     1375                                          ; variable is set, branch to
                     1376                                          ; SCRL_D_LFT
                     1377                                          ;(Scroll Left/Decrement button is
                     1378                                          ; pressed)
 824D [03] CC8274    1379       jmp     DSPLY_MODE                 ; Jump to DSPLY_MODE:
                     1380  
                     1381  SCRL_D_RT:
                     1382  
                     1383  ;****************************************************************************
                     1384  ; - Increment the Display Screen number.
                     1385  ;****************************************************************************
                     1386  
                     1387  INC_SCRNCNT:
 8250 [03] B655      1388       lda     ScrnCnt_prv     ; Load accumulator with value in "ScrnCnt_prv"
 8252 [02] A110      1389       cmp     #$10            ; Compare with decimal 16
 8254 [03] 2704      1390       beq     RTN_TO_0_D      ; If Z bit of CCR is set, branch to RTN_TO_0_D
                     1391                               ;("ScrnCnt_prv" = 16 so return to screen 0)
 8256 [04] 3C54      1392       inc     ScrnCnt         ; Increment "ScrnCnt" variable
 8258 [03] 2002      1393       bra     SCRL_D_RT_DONE  ; Branch to SCRL_D_RT_DONE:
                     1394  
                     1395  RTN_TO_0_D:
 825A [03] 3F54      1396      clr     ScrnCnt          ; Clear "ScrnCnt" variable(ScrnCnt = 0)
                     1397  
                     1398  SCRL_D_RT_DONE:
 825C [05] 4E5455    1399       mov     ScrnCnt,ScrnCnt_prv  ; Move value in "ScrnCnt" to ScrnCnt_prv"
 825F [04] 134F      1400       bclr    Sw1cls,Swflags       ; Clear "Sw1cls" bit of "Swflags" variable
 8261 [03] CC8274    1401       jmp     DSPLY_MODE           ; Jump to DSPLY_MODE:
                     1402  
                     1403  
                     1404  SCRL_D_LFT:
                     1405  
                     1406  ;****************************************************************************
                     1407  ; - Decrement the Display Screen number.
                     1408  ;****************************************************************************
                     1409  
                     1410  
                     1411  DEC_SCRNCNT:
 8264 [03] B655      1412       lda     ScrnCnt_prv      ; Load accumulator with value in "ScrnCnt_prv"
 8266 [03] 2704      1413       beq     RTN_TO_16        ; If Z bit of CCR is set, branch to RTN_TO_16
                     1414                                ;("ScrnCnt_prv" = 0 so return to screen 16)
 8268 [04] 3A54      1415       dec     ScrnCnt          ; Decrement "ScrnCnt" variable
 826A [03] 2003      1416       bra     SCRL_D_LFT_DONE  ; Branch to SCRL_D_LFT_DONE:
                     1417  
                     1418  RTN_TO_16:
 826C [04] 6E1054    1419      mov     #$10,ScrnCnt      ; Move decimal 16 into "ScrnCnt" variable
                     1420  
                     1421  SCRL_D_LFT_DONE:
 826F [05] 4E5455    1422       mov     ScrnCnt,ScrnCnt_prv  ; Move value in "ScrnCnt" to ScrnCnt_prv"
 8272 [04] 114F      1423       bclr    Sw0cls,Swflags       ; Clear "Sw0cls" bit of "Swflags" variable
                     1424  
                     1425  
                     1426  DSPLY_MODE:
                     1427  
                     1428  ;****************************************************************************
                     1429  ; - Using the screen count number, determine the appropriate array for the
                     1430  ;   top line of the display and print it.
                     1431  ;
                     1432  ; - First, compare the desired screen count number with the screen count
                     1433  ;   number on the last pass through the main loop. If it is the same, skip
                     1434  ;   over, otherwise update the top line of the display. This is to eliminate
                     1435  ;   "digit rattle" caused by rapid screen updates.
                     1436  ;****************************************************************************
                     1437  
                     1438  TOPLIN_SUB:
 8274 [03] B654      1439       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 8276 [03] B156      1440       cmp     ScrnCnt_Lst          ; Compare with "ScrnCnt_Lst"
 8278 [03] 2706      1441       beq     NO_CHNG_TOP          ; If Z bit of CCR is clear, branch to
                     1442                                    ; NO_CHNG_TOP:(ScrnCnt_Lst = ScrnCnt)
 827A [05] CD8FBC    1443       jsr     PRNT_TOPLN_DSP       ; Jump to subroutine at PRNT_TOPLN_DSP:
 827D [05] 4E5456    1444       mov     ScrnCnt,ScrnCnt_Lst  ; Copy value in "ScrnCnt" to ScrnCnt_Lst"
                     1445  
                     1446  NO_CHNG_TOP:
                     1447  
                     1448  DISP_BOT:
                     1449  
                     1450  ;****************************************************************************
                     1451  ; - We have 20 variables in RAM in ordered list(BotLin0 through BotLin19)
                     1452  ;   which have been initialized to ASCII $20(blank space). The variable
                     1453  ;   "DisVal" contains the offset value from the entry point of the ordered
                     1454  ;   list of variables, beginning at the variable "secl". "DisVal" matches
                     1455  ;   the variable's abbreviation on the top line on the display. Using
                     1456  ;   "DisVal", we do an ASCII conversion of each variable, and overwrite the
                     1457  ;   3 blank spaces on the bottom line beneath the matching variable
                     1458  ;   abreviation, with the appropriate numbers.
                     1459  ;****************************************************************************
                     1460  
                     1461  
                     1462  ;****************************************************************************
                     1463  ; - Load the over-write values for the bottom line string.
                     1464  ;****************************************************************************
                     1465  
 8280 [05] CD8FCB    1466       jsr     LOAD_SPACE             ; Jump to subroutine at LOAD_SPACE:
                     1467  
                     1468  ;****************************************************************************
                     1469  ; - Determine which screen we are in, and prepare the appropriate string for
                     1470  ;   the bottom line of the VFD
                     1471  ;****************************************************************************
                     1472  
 8283 [03] B654      1473       lda     ScrnCnt              ; Load accumulator with value in "ScrnCnt"
 8285 [04] 410033    1474       cbeqa   #$00,SCRN_0_JMP      ; Compare and branch to SCRN_0_JMP:,
                     1475                                    ; if equal to decimal 0
 8288 [04] 410133    1476       cbeqa   #$01,SCRN_1_JMP      ; Compare and branch to SCRN_1_JMP:,
                     1477                                    ; if equal to decimal 1
 828B [04] 410233    1478       cbeqa   #$02,SCRN_2_JMP      ; Compare and branch to SCRN_2_JMP:,
                     1479                                    ; if equal to decimal 2
 828E [04] 410333    1480       cbeqa   #$03,SCRN_3_JMP      ; Compare and branch to SCRN_3_JMP:,
                     1481                                    ; if equal to decimal 3
 8291 [04] 410433    1482       cbeqa   #$04,SCRN_4_JMP      ; Compare and branch to SCRN_4_JMP:,
                     1483                                    ; if equal to decimal 4
 8294 [04] 410533    1484       cbeqa   #$05,SCRN_5_JMP      ; Compare and branch to SCRN_5_JMP:,
                     1485                                    ; if equal to decimal 5
 8297 [04] 410633    1486       cbeqa   #$06,SCRN_6_JMP      ; Compare and branch to SCRN_6_JMP:,
                     1487                                    ; if equal to decimal 6
 829A [04] 410733    1488       cbeqa   #$07,SCRN_7_JMP      ; Compare and branch to SCRN_7_JMP:,
                     1489                                    ; if equal to decimal 7
 829D [04] 410833    1490       cbeqa   #$08,SCRN_8_JMP      ; Compare and branch to SCRN_8_JMP:,
                     1491                                    ; if equal to decimal 8
 82A0 [04] 410933    1492       cbeqa   #$09,SCRN_9_JMP      ; Compare and branch to SCRN_9_JMP:,
                     1493                                    ; if equal to decimal 9
 82A3 [04] 410A33    1494       cbeqa   #$0A,SCRN_10_JMP     ; Compare and branch to SCRN_10_JMP:,
                     1495                                    ; if equal to decimal 10
 82A6 [04] 410B33    1496       cbeqa   #$0B,SCRN_11_JMP     ; Compare and branch to SCRN_11_JMP:,
                     1497                                    ; if equal to decimal 11
 82A9 [04] 410C33    1498       cbeqa   #$0C,SCRN_12_JMP     ; Compare and branch to SCRN_12_JMP:,
                     1499                                    ; if equal to decimal 12
 82AC [04] 410D33    1500       cbeqa   #$0D,SCRN_13_JMP     ; Compare and branch to SCRN_13_JMP:,
                     1501                                    ; if equal to decimal 13
 82AF [04] 410E33    1502       cbeqa   #$0E,SCRN_14_JMP     ; Compare and branch to SCRN_14_JMP:,


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 15
MV_ECU


                     1503                                    ; if equal to decimal 14
 82B2 [04] 410F33    1504       cbeqa   #$0F,SCRN_15_JMP     ; Compare and branch to SCRN_15_JMP:,
                     1505                                    ; if equal to decimal 15
 82B5 [04] 411033    1506       cbeqa   #$10,SCRN_16_JMP     ; Compare and branch to SCRN_16_JMP:,
                     1507                                    ; if equal to decimal 16
 82B8 [03] CC8241    1508       jmp     LOOPY                ; Jump to LOOPY(sanity check)
                     1509  
                     1510  
                     1511  SCRN_0_JMP:
 82BB [03] CC82EE    1512       jmp     SCRN_0         ; Jump to SCRN_0:(Long branch)
                     1513  
                     1514  SCRN_1_JMP:
 82BE [03] CC837A    1515       jmp     SCRN_1         ; Jump to SCRN_1:(Long branch)
                     1516  
                     1517  SCRN_2_JMP:
 82C1 [03] CC8401    1518       jmp     SCRN_2         ; Jump to SCRN_2:(Long branch)
                     1519  
                     1520  SCRN_3_JMP:
 82C4 [03] CC8487    1521       jmp     SCRN_3         ; Jump to SCRN_3:(Long branch)
                     1522  
                     1523  SCRN_4_JMP:
 82C7 [03] CC8513    1524       jmp     SCRN_4         ; Jump to SCRN_4:(Long branch)
                     1525  
                     1526  SCRN_5_JMP:
 82CA [03] CC8589    1527       jmp     SCRN_5         ; Jump to SCRN_5:(Long branch)
                     1528  
                     1529  SCRN_6_JMP:
 82CD [03] CC8608    1530       jmp     SCRN_6         ; Jump to SCRN_6:(Long branch)
                     1531  
                     1532  SCRN_7_JMP:
 82D0 [03] CC8681    1533       jmp     SCRN_7         ; Jump to SCRN_7:(Long branch)
                     1534  
                     1535  SCRN_8_JMP:
 82D3 [03] CC86FD    1536       jmp     SCRN_8         ; Jump to SCRN_8:(Long branch)
                     1537  
                     1538  SCRN_9_JMP:
 82D6 [03] CC8779    1539       jmp     SCRN_9         ; Jump to SCRN_9:(Long branch)
                     1540  
                     1541  SCRN_10_JMP:
 82D9 [03] CC87EF    1542       jmp     SCRN_10        ; Jump to SCRN_10:(Long branch)
                     1543  
                     1544  SCRN_11_JMP:
 82DC [03] CC886F    1545       jmp     SCRN_11        ; Jump to SCRN_11:(Long branch)
                     1546  
                     1547  SCRN_12_JMP:
 82DF [03] CC88F7    1548       jmp     SCRN_12        ; Jump to SCRN_12:(Long branch)
                     1549  
                     1550  SCRN_13_JMP:
 82E2 [03] CC8977    1551       jmp     SCRN_13        ; Jump to SCRN_13:(Long branch)
                     1552  
                     1553  SCRN_14_JMP:
 82E5 [03] CC8A00    1554       jmp     SCRN_14        ; Jump to SCRN_14:(Long branch)
                     1555  
                     1556  SCRN_15_JMP:
 82E8 [03] CC8A83    1557       jmp     SCRN_15        ; Jump to SCRN_15:(Long branch)
                     1558  
                     1559  SCRN_16_JMP:
 82EB [03] CC8AF2    1560       jmp     SCRN_16        ; Jump to SCRN_16:(Long branch)
                     1561  
                     1562  
                     1563  SCRN_0:
 82EE [05] CD8CAB    1564       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 82F1 [03] B6F6      1565       lda     rpmH              ; Load accumulator with value in "rpmH"
 82F3 [03] B763      1566       sta     intacc1+2         ; Copy to "intacc1+2"
 82F5 [03] B6F7      1567       lda     rpmL              ; Load accumulator with value in "rpmL"
 82F7 [03] B764      1568       sta     intacc1+3         ; Copy to "intacc1+3"
 82F9 [05] CD8EBC    1569       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 82FC [03] B6B0      1570       lda     thousands         ; Load accumulator with value in "thousands"
 82FE [03] B785      1571       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8300 [03] B6B1      1572       lda     hundreds          ; Load accumulator with value in "hundreds"
 8302 [03] B786      1573       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8304 [03] B6B2      1574       lda     tens              ; Load accumulator with value in "tens"
 8306 [03] B787      1575       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 8308 [03] B6B3      1576       lda     ones              ; Load accumulator with value in "ones"
 830A [03] B788      1577       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 830C [02] A620      1578       lda     #$20              ; Load accumulator with ASCII ' '(space)
 830E [03] B789      1579       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8310 [05] CD8C0D    1580       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 8313 [03] B6DD      1581       lda     map               ; Load accumulator with value in "map"
 8315 [03] B784      1582       sta     DisVal            ; Copy to "DisVal" variable
 8317 [05] CD8EA8    1583       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 831A [03] B6AD      1584       lda     AC_100            ; Load accumulator with value in "AC_100"
 831C [03] B78A      1585       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 831E [03] B6AE      1586       lda     AC_10             ; Load accumulator with value in "AC_10"
 8320 [03] B78B      1587       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8322 [03] B6AF      1588       lda     AC_1              ; Load accumulator with value in "AC_1"
 8324 [03] B78C      1589       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8326 [02] A620      1590       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8328 [03] B78D      1591       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 832A [05] CD8C5C    1592       jsr     CALC_LAMBDA       ; Jump to subroutine at CALC_LAMBDA:
 832D [05] CD8C66    1593       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 8330 [03] B6E3      1594       lda     afr               ; Load accumulator with value in "afr"
 8332 [03] B784      1595       sta     DisVal            ; Copy to "DisVal" variable
 8334 [05] CD8EA8    1596       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8337 [03] B6AD      1597       lda     AC_100            ; Load accumulator with value in "AC_100"
 8339 [03] B78E      1598       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 833B [03] B6AE      1599       lda     AC_10             ; Load accumulator with value in "AC_10"
 833D [03] B78F      1600       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 833F [03] B6AF      1601       lda     AC_1              ; Load accumulator with value in "AC_1"
 8341 [03] B790      1602       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8343 [02] A620      1603       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8345 [03] B791      1604       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8347 [05] CD8C21    1605       jsr     CALC_CLT          ; Jump to subroutine at CALC_CLT:
 834A [03] B6DF      1606       lda     clt               ; Load accumulator with value in "clt"
 834C [03] B784      1607       sta     DisVal            ; Copy to "DisVal" variable
 834E [05] CD8EA8    1608       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8351 [03] B6AD      1609       lda     AC_100            ; Load accumulator with value in "AC_100"
 8353 [03] B792      1610       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8355 [03] B6AE      1611       lda     AC_10             ; Load accumulator with value in "AC_10"
 8357 [03] B793      1612       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8359 [03] B6AF      1613       lda     AC_1              ; Load accumulator with value in "AC_1"
 835B [03] B794      1614       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 835D [02] A620      1615       lda     #$20              ; Load accumulator with ASCII ' '(space)
 835F [03] B795      1616       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8361 [05] CD8C17    1617       jsr     CALC_MAT          ; Jump to subroutine at CALC_MAT:
 8364 [03] B6DE      1618       lda     mat               ; Load accumulator with value in "mat"
 8366 [03] B784      1619       sta     DisVal            ; Copy to "DisVal" variable
 8368 [05] CD8EA8    1620       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 836B [03] B6AD      1621       lda     AC_100            ; Load accumulator with value in "AC_100"
 836D [03] B796      1622       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 836F [03] B6AE      1623       lda     AC_10             ; Load accumulator with value in "AC_10"
 8371 [03] B797      1624       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8373 [03] B6AF      1625       lda     AC_1              ; Load accumulator with value in "AC_1"
 8375 [03] B798      1626       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8377 [03] CC8B5E    1627       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1628  
                     1629  SCRN_1:
 837A [02] A620      1630       lda     #$20              ; Load accumulator with ASCII ' '(space)
 837C [03] B785      1631       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 837E [05] CD8CAB    1632       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 8381 [03] B6F6      1633       lda     rpmH              ; Load accumulator with value in "rpmH"
 8383 [03] B763      1634       sta     intacc1+2         ; Copy to "intacc1+2"
 8385 [03] B6F7      1635       lda     rpmL              ; Load accumulator with value in "rpmL"
 8387 [03] B764      1636       sta     intacc1+3         ; Copy to "intacc1+3"
 8389 [05] CD8EBC    1637       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 838C [03] B6B0      1638       lda     thousands         ; Load accumulator with value in "thousands"


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 16
MV_ECU


 838E [03] B786      1639       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8390 [03] B6B1      1640       lda     hundreds          ; Load accumulator with value in "hundreds"
 8392 [03] B787      1641       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8394 [03] B6B2      1642       lda     tens              ; Load accumulator with value in "tens"
 8396 [03] B788      1643       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8398 [03] B6B3      1644       lda     ones              ; Load accumulator with value in "ones"
 839A [03] B789      1645       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 839C [02] A620      1646       lda     #$20              ; Load accumulator with ASCII ' '(space)
 839E [03] B78A      1647       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 83A0 [05] CD8DBB    1648       jsr     CALC_VS           ; Jump to subroutine at CALC_VS:
 83A3 [03] B6EB      1649       lda     kph               ; Load accumulator with value in "kph"
 83A5 [03] B784      1650       sta     DisVal            ; Copy to "DisVal" variable
 83A7 [05] CD8EA8    1651       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 83AA [03] B6AD      1652       lda     AC_100            ; Load accumulator with value in "AC_100"
 83AC [03] B78B      1653       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 83AE [03] B6AE      1654       lda     AC_10             ; Load accumulator with value in "AC_10"
 83B0 [03] B78C      1655       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 83B2 [03] B6AF      1656       lda     AC_1              ; Load accumulator with value in "AC_1"
 83B4 [03] B78D      1657       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 83B6 [02] A620      1658       lda     #$20              ; Load accumulator with ASCII ' '(space)
 83B8 [03] B78E      1659       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 83BA [05] CD8D4B    1660       jsr     CALC_L_HR         ; Jump to subroutine at CALC_L_HR:
 83BD [03] B6E9      1661       lda     ltrHrH            ; Load accumulator with value in "ltrHrH"
 83BF [03] B763      1662       sta     intacc1+2         ; Copy to "intacc1+2"
 83C1 [03] B6EA      1663       lda     ltrHrL            ; Load accumulator with value in "ltrHrL"
 83C3 [03] B764      1664       sta     intacc1+3         ; Copy to "intacc1+3"
 83C5 [05] CD8EBC    1665       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 83C8 [03] B6B0      1666       lda     thousands         ; Load accumulator with value in "thousands"
 83CA [03] B78F      1667       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 83CC [03] B6B1      1668       lda     hundreds          ; Load accumulator with value in "hundreds"
 83CE [03] B790      1669       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 83D0 [03] B6B2      1670       lda     tens              ; Load accumulator with value in "tens"
 83D2 [03] B791      1671       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 83D4 [03] B6B3      1672       lda     ones              ; Load accumulator with value in "ones"
 83D6 [03] B792      1673       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 83D8 [02] A620      1674       lda     #$20              ; Load accumulator with ASCII ' '(space)
 83DA [03] B793      1675       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 83DC [05] CD8DF8    1676       jsr     CALC_KM_L         ; Jump to subroutine at CALC_KM_L:
 83DF [03] B6ED      1677       lda     kmLtrH            ; Load accumulator with value in "kmLtrH"
 83E1 [03] B763      1678       sta     intacc1+2         ; Copy to "intacc1+2"
 83E3 [03] B6EE      1679       lda     kmLtrL            ; Load accumulator with value in "kmLtrL"
 83E5 [03] B764      1680       sta     intacc1+3         ; Copy to "intacc1+3"
 83E7 [05] CD8EBC    1681       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 83EA [03] B6B0      1682       lda     thousands         ; Load accumulator with value in "thousands"
 83EC [03] B794      1683       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 83EE [03] B6B1      1684       lda     hundreds          ; Load accumulator with value in "hundreds"
 83F0 [03] B795      1685       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 83F2 [03] B6B2      1686       lda     tens              ; Load accumulator with value in "tens"
 83F4 [03] B796      1687       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 83F6 [03] B6B3      1688       lda     ones              ; Load accumulator with value in "ones"
 83F8 [03] B797      1689       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 83FA [02] A620      1690       lda     #$20              ; Load accumulator with ASCII ' '(space)
 83FC [03] B798      1691       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 83FE [03] CC8B5E    1692       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1693  
                     1694  SCRN_2:
 8401 [05] CD8CB7    1695       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 8404 [03] B6F8      1696       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 8406 [03] B763      1697       sta     intacc1+2         ; Copy to "intacc1+2"
 8408 [03] B6F9      1698       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 840A [03] B764      1699       sta     intacc1+3         ; Copy to "intacc1+3"
 840C [05] CD8EBC    1700       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 840F [03] B6B0      1701       lda     thousands         ; Load accumulator with value in "thousands"
 8411 [03] B785      1702       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8413 [03] B6B1      1703       lda     hundreds          ; Load accumulator with value in "hundreds"
 8415 [03] B786      1704       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8417 [03] B6B2      1705       lda     tens              ; Load accumulator with value in "tens"
 8419 [03] B787      1706       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 841B [03] B6B3      1707       lda     ones              ; Load accumulator with value in "ones"
 841D [03] B788      1708       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 841F [02] A620      1709       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8421 [03] B789      1710       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8423 [05] CD8C0D    1711       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 8426 [03] B6DD      1712       lda     map               ; Load accumulator with value in "map"
 8428 [03] B784      1713       sta     DisVal            ; Copy to "DisVal" variable
 842A [05] CD8EA8    1714       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 842D [03] B6AD      1715       lda     AC_100            ; Load accumulator with value in "AC_100"
 842F [03] B78A      1716       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8431 [03] B6AE      1717       lda     AC_10             ; Load accumulator with value in "AC_10"
 8433 [03] B78B      1718       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8435 [03] B6AF      1719       lda     AC_1              ; Load accumulator with value in "AC_1"
 8437 [03] B78C      1720       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8439 [02] A620      1721       lda     #$20              ; Load accumulator with ASCII ' '(space)
 843B [03] B78D      1722       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 843D [05] CD8C5C    1723       jsr     CALC_LAMBDA       ; Jump to subroutine at CALC_LAMBDA:
 8440 [05] CD8C66    1724       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 8443 [03] B6E3      1725       lda     afr               ; Load accumulator with value in "afr"
 8445 [03] B784      1726       sta     DisVal            ; Copy to "DisVal" variable
 8447 [05] CD8EA8    1727       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 844A [03] B6AD      1728       lda     AC_100            ; Load accumulator with value in "AC_100"
 844C [03] B78E      1729       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 844E [03] B6AE      1730       lda     AC_10             ; Load accumulator with value in "AC_10"
 8450 [03] B78F      1731       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8452 [03] B6AF      1732       lda     AC_1              ; Load accumulator with value in "AC_1"
 8454 [03] B790      1733       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8456 [02] A620      1734       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8458 [03] B791      1735       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 845A [03] B6C1      1736       lda     Ftrimcor          ; Load accumulator with value in "Ftrimcor"
 845C [03] B784      1737       sta     DisVal            ; Copy to "DisVal" variable
 845E [05] CD8EA8    1738       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8461 [03] B6AD      1739       lda     AC_100            ; Load accumulator with value in "AC_100"
 8463 [03] B792      1740       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8465 [03] B6AE      1741       lda     AC_10             ; Load accumulator with value in "AC_10"
 8467 [03] B793      1742       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8469 [03] B6AF      1743       lda     AC_1              ; Load accumulator with value in "AC_1"
 846B [03] B794      1744       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 846D [02] A620      1745       lda     #$20              ; Load accumulator with ASCII ' '(space)
 846F [03] B795      1746       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8471 [03] B6C8      1747       lda     pw                ; Load accumulator with value in "pw"
 8473 [03] B784      1748       sta     DisVal            ; Copy to "DisVal" variable
 8475 [05] CD8EA8    1749       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8478 [03] B6AD      1750       lda     AC_100            ; Load accumulator with value in "AC_100"
 847A [03] B796      1751       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 847C [03] B6AE      1752       lda     AC_10             ; Load accumulator with value in "AC_10"
 847E [03] B797      1753       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8480 [03] B6AF      1754       lda     AC_1              ; Load accumulator with value in "AC_1"
 8482 [03] B798      1755       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8484 [03] CC8B5E    1756       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1757  
                     1758  SCRN_3:
 8487 [05] CD8CB7    1759       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 848A [03] B6F8      1760       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 848C [03] B763      1761       sta     intacc1+2         ; Copy to "intacc1+2"
 848E [03] B6F9      1762       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 8490 [03] B764      1763       sta     intacc1+3         ; Copy to "intacc1+3"
 8492 [05] CD8EBC    1764       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8495 [03] B6B0      1765       lda     thousands         ; Load accumulator with value in "thousands"
 8497 [03] B785      1766       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8499 [03] B6B1      1767       lda     hundreds          ; Load accumulator with value in "hundreds"
 849B [03] B786      1768       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 849D [03] B6B2      1769       lda     tens              ; Load accumulator with value in "tens"
 849F [03] B787      1770       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 84A1 [03] B6B3      1771       lda     ones              ; Load accumulator with value in "ones"
 84A3 [03] B788      1772       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 84A5 [02] A620      1773       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84A7 [03] B789      1774       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 17
MV_ECU


 84A9 [05] CD8C0D    1775       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 84AC [03] B6DD      1776       lda     map               ; Load accumulator with value in "map"
 84AE [03] B784      1777       sta     DisVal            ; Copy to "DisVal" variable
 84B0 [05] CD8EA8    1778       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84B3 [03] B6AD      1779       lda     AC_100            ; Load accumulator with value in "AC_100"
 84B5 [03] B78A      1780       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 84B7 [03] B6AE      1781       lda     AC_10             ; Load accumulator with value in "AC_10"
 84B9 [03] B78B      1782       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 84BB [03] B6AF      1783       lda     AC_1              ; Load accumulator with value in "AC_1"
 84BD [03] B78C      1784       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 84BF [02] A620      1785       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84C1 [03] B78D      1786       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 84C3 [05] CD8CE3    1787       jsr     CALC_TRIM_ANG     ; Jump to subroutine at CALC_TRIM_ANG:
 84C6 [03] B6E5      1788       lda     trmAng            ; Load accumulator with value in "trmAng"
 84C8 [03] B784      1789       sta     DisVal            ; Copy to "DisVal" variable
 84CA [05] CD8EA8    1790       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84CD [03] B6AD      1791       lda     AC_100            ; Load accumulator with value in "AC_100"
 84CF [03] B78E      1792       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 84D1 [03] B6AE      1793       lda     AC_10             ; Load accumulator with value in "AC_10"
 84D3 [03] B78F      1794       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 84D5 [03] B6AF      1795       lda     AC_1              ; Load accumulator with value in "AC_1"
 84D7 [03] B790      1796       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 84D9 [02] A620      1797       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84DB [03] B791      1798       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 84DD [05] CD8CF4    1799       jsr     CALC_DLY_ANG      ; Jump to subroutine at CALC_DELA_ANG:
 84E0 [05] CD8D07    1800       jsr     CALC_TIM_ANG      ; Jump to subroutine at CALC_TIM_ANG:
 84E3 [03] B6E7      1801       lda     timAng            ; Load accumulator with value in "timAng"
 84E5 [03] B784      1802       sta     DisVal            ; Copy to "DisVal" variable
 84E7 [05] CD8EA8    1803       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 84EA [03] B6AD      1804       lda     AC_100            ; Load accumulator with value in "AC_100"
 84EC [03] B792      1805       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 84EE [03] B6AE      1806       lda     AC_10             ; Load accumulator with value in "AC_10"
 84F0 [03] B793      1807       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 84F2 [03] B6AF      1808       lda     AC_1              ; Load accumulator with value in "AC_1"
 84F4 [03] B794      1809       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 84F6 [02] A620      1810       lda     #$20              ; Load accumulator with ASCII ' '(space)
 84F8 [03] B795      1811       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 84FA [05] CD8D10    1812       jsr     CALC_MON_TIM_ANG  ; Jump to subroutine at CALC_MON_TIM_ANG:
 84FD [03] B6E8      1813       lda     monTimAng         ; Load accumulator with value in "monTimAng"
 84FF [03] B784      1814       sta     DisVal            ; Copy to "DisVal" variable
 8501 [05] CD8EA8    1815       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8504 [03] B6AD      1816       lda     AC_100            ; Load accumulator with value in "AC_100"
 8506 [03] B796      1817       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8508 [03] B6AE      1818       lda     AC_10             ; Load accumulator with value in "AC_10"
 850A [03] B797      1819       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 850C [03] B6AF      1820       lda     AC_1              ; Load accumulator with value in "AC_1"
 850E [03] B798      1821       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8510 [03] CC8B5E    1822       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1823  
                     1824  SCRN_4:
 8513 [02] A620      1825       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8515 [03] B785      1826       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8517 [03] B6C2      1827       lda     gammae            ; Load accumulator with value in "gammae"
 8519 [03] B784      1828       sta     DisVal            ; Copy to "DisVal" variable
 851B [05] CD8EA8    1829       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 851E [03] B6AD      1830       lda     AC_100            ; Load accumulator with value in "AC_100"
 8520 [03] B786      1831       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8522 [03] B6AE      1832       lda     AC_10             ; Load accumulator with value in "AC_10"
 8524 [03] B787      1833       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8526 [03] B6AF      1834       lda     AC_1              ; Load accumulator with value in "AC_1"
 8528 [03] B788      1835       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 852A [02] A620      1836       lda     #$20              ; Load accumulator with ASCII ' '(space)
 852C [03] B789      1837       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 852E [03] B6BF      1838       lda     warmcor            ; Load accumulator with value in "warmcor"
 8530 [03] B784      1839       sta     DisVal            ; Copy to "DisVal" variable
 8532 [05] CD8EA8    1840       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8535 [03] B6AD      1841       lda     AC_100            ; Load accumulator with value in "AC_100"
 8537 [03] B78A      1842       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8539 [03] B6AE      1843       lda     AC_10             ; Load accumulator with value in "AC_10"
 853B [03] B78B      1844       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 853D [03] B6AF      1845       lda     AC_1              ; Load accumulator with value in "AC_1"
 853F [03] B78C      1846       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8541 [02] A620      1847       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8543 [03] B78D      1848       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8545 [03] B6C0      1849       lda     aircor            ; Load accumulator with value in "aircor"
 8547 [03] B784      1850       sta     DisVal            ; Copy to "DisVal" variable
 8549 [05] CD8EA8    1851       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 854C [03] B6AD      1852       lda     AC_100            ; Load accumulator with value in "AC_100"
 854E [03] B78E      1853       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8550 [03] B6AE      1854       lda     AC_10             ; Load accumulator with value in "AC_10"
 8552 [03] B78F      1855       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8554 [03] B6AF      1856       lda     AC_1              ; Load accumulator with value in "AC_1"
 8556 [03] B790      1857       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8558 [02] A620      1858       lda     #$20              ; Load accumulator with ASCII ' '(space)
 855A [03] B791      1859       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 855C [03] B6BE      1860       lda     barocor           ; Load accumulator with value in "barocor"
 855E [03] B784      1861       sta     DisVal            ; Copy to "DisVal" variable
 8560 [05] CD8EA8    1862       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8563 [03] B6AD      1863       lda     AC_100            ; Load accumulator with value in "AC_100"
 8565 [03] B792      1864       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8567 [03] B6AE      1865       lda     AC_10             ; Load accumulator with value in "AC_10"
 8569 [03] B793      1866       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 856B [03] B6AF      1867       lda     AC_1              ; Load accumulator with value in "AC_1"
 856D [03] B794      1868       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 856F [02] A620      1869       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8571 [03] B795      1870       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8573 [03] B6C3      1871       lda     tpsaccel          ; Load accumulator with value in "tpsaccel"
 8575 [03] B784      1872       sta     DisVal            ; Copy to "DisVal" variable
 8577 [05] CD8EA8    1873       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 857A [03] B6AD      1874       lda     AC_100            ; Load accumulator with value in "AC_100"
 857C [03] B796      1875       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 857E [03] B6AE      1876       lda     AC_10             ; Load accumulator with value in "AC_10"
 8580 [03] B797      1877       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8582 [03] B6AF      1878       lda     AC_1              ; Load accumulator with value in "AC_1"
 8584 [03] B798      1879       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8586 [03] CC8B5E    1880       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1881  
                     1882  SCRN_5:
 8589 [02] A620      1883       lda     #$20              ; Load accumulator with ASCII ' '(space)
 858B [03] B785      1884       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 858D [03] B6BA      1885       lda     egoADC            ; Load accumulator with value in "egoADC"
 858F [03] B784      1886       sta     DisVal            ; Copy to "DisVal" variable
 8591 [05] CD8EA8    1887       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8594 [03] B6AD      1888       lda     AC_100            ; Load accumulator with value in "AC_100"
 8596 [03] B786      1889       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8598 [03] B6AE      1890       lda     AC_10             ; Load accumulator with value in "AC_10"
 859A [03] B787      1891       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 859C [03] B6AF      1892       lda     AC_1              ; Load accumulator with value in "AC_1"
 859E [03] B788      1893       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 85A0 [02] A620      1894       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85A2 [03] B789      1895       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 85A4 [05] CD8C4B    1896       jsr     CALC_EGOV         ; Jump to subroutine at CALC_EGOV:
 85A7 [03] B6E1      1897       lda     egoV              ; Load accumulator with value in "egoV"
 85A9 [03] B784      1898       sta     DisVal            ; Copy to "DisVal" variable
 85AB [05] CD8EA8    1899       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85AE [03] B6AD      1900       lda     AC_100            ; Load accumulator with value in "AC_100"
 85B0 [03] B78A      1901       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 85B2 [03] B6AE      1902       lda     AC_10             ; Load accumulator with value in "AC_10"
 85B4 [03] B78B      1903       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 85B6 [03] B6AF      1904       lda     AC_1              ; Load accumulator with value in "AC_1"
 85B8 [03] B78C      1905       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 85BA [02] A620      1906       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85BC [03] B78D      1907       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 85BE [05] CD8C5C    1908       jsr     CALC_LAMBDA       ; Jump to subroutine at CALC_LAMBDA:
 85C1 [03] B6E2      1909       lda     lambda            ; Load accumulator with value in "lambda"
 85C3 [03] B784      1910       sta     DisVal            ; Copy to "DisVal" variable


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 18
MV_ECU


 85C5 [05] CD8EA8    1911       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85C8 [03] B6AD      1912       lda     AC_100            ; Load accumulator with value in "AC_100"
 85CA [03] B78E      1913       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 85CC [03] B6AE      1914       lda     AC_10             ; Load accumulator with value in "AC_10"
 85CE [03] B78F      1915       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 85D0 [03] B6AF      1916       lda     AC_1              ; Load accumulator with value in "AC_1"
 85D2 [03] B790      1917       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 85D4 [02] A620      1918       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85D6 [03] B791      1919       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 85D8 [05] CD8C66    1920       jsr     CALC_AFR          ; Jump to subroutine at CALC_AFR:
 85DB [03] B6E3      1921       lda     afr               ; Load accumulator with value in "afr"
 85DD [03] B784      1922       sta     DisVal            ; Copy to "DisVal" variable
 85DF [05] CD8EA8    1923       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85E2 [03] B6AD      1924       lda     AC_100            ; Load accumulator with value in "AC_100"
 85E4 [03] B792      1925       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 85E6 [03] B6AE      1926       lda     AC_10             ; Load accumulator with value in "AC_10"
 85E8 [03] B793      1927       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 85EA [03] B6AF      1928       lda     AC_1              ; Load accumulator with value in "AC_1"
 85EC [03] B794      1929       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 85EE [02] A620      1930       lda     #$20              ; Load accumulator with ASCII ' '(space)
 85F0 [03] B795      1931       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 85F2 [03] B6C1      1932       lda     Ftrimcor          ; Load accumulator with value in "Ftrimcor"
 85F4 [03] B784      1933       sta     DisVal            ; Copy to "DisVal" variable
 85F6 [05] CD8EA8    1934       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 85F9 [03] B6AD      1935       lda     AC_100            ; Load accumulator with value in "AC_100"
 85FB [03] B796      1936       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 85FD [03] B6AE      1937       lda     AC_10             ; Load accumulator with value in "AC_10"
 85FF [03] B797      1938       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8601 [03] B6AF      1939       lda     AC_1              ; Load accumulator with value in "AC_1"
 8603 [03] B798      1940       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8605 [03] CC8B5E    1941       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     1942  
                     1943  SCRN_6:
 8608 [02] A620      1944       lda     #$20              ; Load accumulator with ASCII ' '(space)
 860A [03] B785      1945       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 860C [03] B6B5      1946       lda     mapADC            ; Load accumulator with value in "mapADC"
 860E [03] B784      1947       sta     DisVal            ; Copy to "DisVal" variable
 8610 [05] CD8EA8    1948       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8613 [03] B6AD      1949       lda     AC_100            ; Load accumulator with value in "AC_100"
 8615 [03] B786      1950       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8617 [03] B6AE      1951       lda     AC_10             ; Load accumulator with value in "AC_10"
 8619 [03] B787      1952       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 861B [03] B6AF      1953       lda     AC_1              ; Load accumulator with value in "AC_1"
 861D [03] B788      1954       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 861F [02] A620      1955       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8621 [03] B789      1956       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8623 [05] CD8C0D    1957       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 8626 [03] B6DD      1958       lda     map               ; Load accumulator with value in "map"
 8628 [03] B784      1959       sta     DisVal            ; Copy to "DisVal" variable
 862A [05] CD8EA8    1960       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 862D [03] B6AD      1961       lda     AC_100            ; Load accumulator with value in "AC_100"
 862F [03] B78A      1962       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8631 [03] B6AE      1963       lda     AC_10             ; Load accumulator with value in "AC_10"
 8633 [03] B78B      1964       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8635 [03] B6AF      1965       lda     AC_1              ; Load accumulator with value in "AC_1"
 8637 [03] B78C      1966       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8639 [02] A620      1967       lda     #$20              ; Load accumulator with ASCII ' '(space)
 863B [03] B78D      1968       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 863D [03] B6BC      1969       lda     baroADC           ; Load accumulator with value in "baroADC"
 863F [03] B784      1970       sta     DisVal            ; Copy to "DisVal" variable
 8641 [05] CD8EA8    1971       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8644 [03] B6AD      1972       lda     AC_100            ; Load accumulator with value in "AC_100"
 8646 [03] B78E      1973       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8648 [03] B6AE      1974       lda     AC_10             ; Load accumulator with value in "AC_10"
 864A [03] B78F      1975       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 864C [03] B6AF      1976       lda     AC_1              ; Load accumulator with value in "AC_1"
 864E [03] B790      1977       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8650 [02] A620      1978       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8652 [03] B791      1979       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8654 [03] B6BD      1980       lda     barometer         ; Load accumulator with value in "barometer"
 8656 [03] B784      1981       sta     DisVal            ; Copy to "DisVal" variable
 8658 [05] CD8EA8    1982       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 865B [03] B6AD      1983       lda     AC_100            ; Load accumulator with value in "AC_100"
 865D [03] B792      1984       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 865F [03] B6AE      1985       lda     AC_10             ; Load accumulator with value in "AC_10"
 8661 [03] B793      1986       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8663 [03] B6AF      1987       lda     AC_1              ; Load accumulator with value in "AC_1"
 8665 [03] B794      1988       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8667 [02] A620      1989       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8669 [03] B795      1990       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 866B [03] B6BE      1991       lda     barocor           ; Load accumulator with value in "barocor"
 866D [03] B784      1992       sta     DisVal            ; Copy to "DisVal" variable
 866F [05] CD8EA8    1993       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8672 [03] B6AD      1994       lda     AC_100            ; Load accumulator with value in "AC_100"
 8674 [03] B796      1995       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8676 [03] B6AE      1996       lda     AC_10             ; Load accumulator with value in "AC_10"
 8678 [03] B797      1997       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 867A [03] B6AF      1998       lda     AC_1              ; Load accumulator with value in "AC_1"
 867C [03] B798      1999       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 867E [03] CC8B5E    2000       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2001  
                     2002  SCRN_7:
 8681 [02] A620      2003       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8683 [03] B785      2004       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8685 [03] B6B9      2005       lda     battADC           ; Load accumulator with value in "battADC"
 8687 [03] B784      2006       sta     DisVal            ; Copy to "DisVal" variable
 8689 [05] CD8EA8    2007       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 868C [03] B6AD      2008       lda     AC_100            ; Load accumulator with value in "AC_100"
 868E [03] B786      2009       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8690 [03] B6AE      2010       lda     AC_10             ; Load accumulator with value in "AC_10"
 8692 [03] B787      2011       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8694 [03] B6AF      2012       lda     AC_1              ; Load accumulator with value in "AC_1"
 8696 [03] B788      2013       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8698 [02] A620      2014       lda     #$20              ; Load accumulator with ASCII ' '(space)
 869A [03] B789      2015       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 869C [05] CD8C2B    2016       jsr     CALC_VOLTS        ; Jump to subroutine at CALC_VOLTS:
 869F [03] B6E0      2017       lda     volts             ; Load accumulator with value in "volts"
 86A1 [03] B784      2018       sta     DisVal            ; Copy to "DisVal" variable
 86A3 [05] CD8EA8    2019       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86A6 [03] B6AD      2020       lda     AC_100            ; Load accumulator with value in "AC_100"
 86A8 [03] B78A      2021       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 86AA [03] B6AE      2022       lda     AC_10             ; Load accumulator with value in "AC_10"
 86AC [03] B78B      2023       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 86AE [03] B6AF      2024       lda     AC_1              ; Load accumulator with value in "AC_1"
 86B0 [03] B78C      2025       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 86B2 [02] A620      2026       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86B4 [03] B78D      2027       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 86B6 [03] B6B7      2028       lda     cltADC            ; Load accumulator with value in "cltADC"
 86B8 [03] B784      2029       sta     DisVal            ; Copy to "DisVal" variable
 86BA [05] CD8EA8    2030       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86BD [03] B6AD      2031       lda     AC_100            ; Load accumulator with value in "AC_100"
 86BF [03] B78E      2032       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 86C1 [03] B6AE      2033       lda     AC_10             ; Load accumulator with value in "AC_10"
 86C3 [03] B78F      2034       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 86C5 [03] B6AF      2035       lda     AC_1              ; Load accumulator with value in "AC_1"
 86C7 [03] B790      2036       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 86C9 [02] A620      2037       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86CB [03] B791      2038       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 86CD [05] CD8C21    2039       jsr     CALC_CLT          ; Jump to subroutine at CALC_CLT:
 86D0 [03] B6DF      2040       lda     clt               ; Load accumulator with value in "clt"
 86D2 [03] B784      2041       sta     DisVal            ; Copy to "DisVal" variable
 86D4 [05] CD8EA8    2042       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86D7 [03] B6AD      2043       lda     AC_100            ; Load accumulator with value in "AC_100"
 86D9 [03] B792      2044       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 86DB [03] B6AE      2045       lda     AC_10             ; Load accumulator with value in "AC_10"
 86DD [03] B793      2046       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 19
MV_ECU


 86DF [03] B6AF      2047       lda     AC_1              ; Load accumulator with value in "AC_1"
 86E1 [03] B794      2048       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 86E3 [02] A620      2049       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86E5 [03] B795      2050       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 86E7 [03] B6BF      2051       lda     warmcor           ; Load accumulator with value in "warmcor"
 86E9 [03] B784      2052       sta     DisVal            ; Copy to "DisVal" variable
 86EB [05] CD8EA8    2053       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 86EE [03] B6AD      2054       lda     AC_100            ; Load accumulator with value in "AC_100"
 86F0 [03] B796      2055       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 86F2 [03] B6AE      2056       lda     AC_10             ; Load accumulator with value in "AC_10"
 86F4 [03] B797      2057       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 86F6 [03] B6AF      2058       lda     AC_1              ; Load accumulator with value in "AC_1"
 86F8 [03] B798      2059       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 86FA [03] CC8B5E    2060       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2061  
                     2062  SCRN_8:
 86FD [02] A620      2063       lda     #$20              ; Load accumulator with ASCII ' '(space)
 86FF [03] B785      2064       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8701 [03] B6B9      2065       lda     battADC           ; Load accumulator with value in "battADC"
 8703 [03] B784      2066       sta     DisVal            ; Copy to "DisVal" variable
 8705 [05] CD8EA8    2067       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8708 [03] B6AD      2068       lda     AC_100            ; Load accumulator with value in "AC_100"
 870A [03] B786      2069       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 870C [03] B6AE      2070       lda     AC_10             ; Load accumulator with value in "AC_10"
 870E [03] B787      2071       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8710 [03] B6AF      2072       lda     AC_1              ; Load accumulator with value in "AC_1"
 8712 [03] B788      2073       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8714 [02] A620      2074       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8716 [03] B789      2075       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8718 [05] CD8C2B    2076       jsr     CALC_VOLTS        ; Jump to subroutine at CALC_VOLTS:
 871B [03] B6E0      2077       lda     volts             ; Load accumulator with value in "volts"
 871D [03] B784      2078       sta     DisVal            ; Copy to "DisVal" variable
 871F [05] CD8EA8    2079       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8722 [03] B6AD      2080       lda     AC_100            ; Load accumulator with value in "AC_100"
 8724 [03] B78A      2081       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8726 [03] B6AE      2082       lda     AC_10             ; Load accumulator with value in "AC_10"
 8728 [03] B78B      2083       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 872A [03] B6AF      2084       lda     AC_1              ; Load accumulator with value in "AC_1"
 872C [03] B78C      2085       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 872E [02] A620      2086       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8730 [03] B78D      2087       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8732 [03] B6B6      2088       lda     matADC            ; Load accumulator with value in "matADC"
 8734 [03] B784      2089       sta     DisVal            ; Copy to "DisVal" variable
 8736 [05] CD8EA8    2090       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8739 [03] B6AD      2091       lda     AC_100            ; Load accumulator with value in "AC_100"
 873B [03] B78E      2092       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 873D [03] B6AE      2093       lda     AC_10             ; Load accumulator with value in "AC_10"
 873F [03] B78F      2094       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8741 [03] B6AF      2095       lda     AC_1              ; Load accumulator with value in "AC_1"
 8743 [03] B790      2096       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8745 [02] A620      2097       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8747 [03] B791      2098       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8749 [05] CD8C17    2099       jsr     CALC_MAT          ; Jump to subroutine at CALC_MAT:
 874C [03] B6DE      2100       lda     mat               ; Load accumulator with value in "mat"
 874E [03] B784      2101       sta     DisVal            ; Copy to "DisVal" variable
 8750 [05] CD8EA8    2102       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8753 [03] B6AD      2103       lda     AC_100            ; Load accumulator with value in "AC_100"
 8755 [03] B792      2104       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8757 [03] B6AE      2105       lda     AC_10             ; Load accumulator with value in "AC_10"
 8759 [03] B793      2106       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 875B [03] B6AF      2107       lda     AC_1              ; Load accumulator with value in "AC_1"
 875D [03] B794      2108       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 875F [02] A620      2109       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8761 [03] B795      2110       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8763 [03] B6C0      2111       lda     aircor            ; Load accumulator with value in "aircor"
 8765 [03] B784      2112       sta     DisVal            ; Copy to "DisVal" variable
 8767 [05] CD8EA8    2113       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 876A [03] B6AD      2114       lda     AC_100            ; Load accumulator with value in "AC_100"
 876C [03] B796      2115       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 876E [03] B6AE      2116       lda     AC_10             ; Load accumulator with value in "AC_10"
 8770 [03] B797      2117       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8772 [03] B6AF      2118       lda     AC_1              ; Load accumulator with value in "AC_1"
 8774 [03] B798      2119       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8776 [03] CC8B5E    2120       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2121  
                     2122  SCRN_9:
 8779 [02] A620      2123       lda     #$20              ; Load accumulator with ASCII ' '(space)
 877B [03] B785      2124       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 877D [03] B6B8      2125       lda     tpsADC            ; Load accumulator with value in "tpsADC"
 877F [03] B784      2126       sta     DisVal            ; Copy to "DisVal" variable
 8781 [05] CD8EA8    2127       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8784 [03] B6AD      2128       lda     AC_100            ; Load accumulator with value in "AC_100"
 8786 [03] B786      2129       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8788 [03] B6AE      2130       lda     AC_10             ; Load accumulator with value in "AC_10"
 878A [03] B787      2131       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 878C [03] B6AF      2132       lda     AC_1              ; Load accumulator with value in "AC_1"
 878E [03] B788      2133       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8790 [02] A620      2134       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8792 [03] B789      2135       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8794 [03] B6D6      2136       lda     tpsp             ; Load accumulator with value in "tpsp"
 8796 [03] B784      2137       sta     DisVal            ; Copy to "DisVal" variable
 8798 [05] CD8EA8    2138       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 879B [03] B6AD      2139       lda     AC_100            ; Load accumulator with value in "AC_100"
 879D [03] B78A      2140       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 879F [03] B6AE      2141       lda     AC_10             ; Load accumulator with value in "AC_10"
 87A1 [03] B78B      2142       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 87A3 [03] B6AF      2143       lda     AC_1              ; Load accumulator with value in "AC_1"
 87A5 [03] B78C      2144       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 87A7 [02] A620      2145       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87A9 [03] B78D      2146       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 87AB [03] B6BB      2147       lda     trimADC           ; Load accumulator with value in "trimADC"
 87AD [03] B784      2148       sta     DisVal            ; Copy to "DisVal" variable
 87AF [05] CD8EA8    2149       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 87B2 [03] B6AD      2150       lda     AC_100            ; Load accumulator with value in "AC_100"
 87B4 [03] B78E      2151       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 87B6 [03] B6AE      2152       lda     AC_10             ; Load accumulator with value in "AC_10"
 87B8 [03] B78F      2153       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 87BA [03] B6AF      2154       lda     AC_1              ; Load accumulator with value in "AC_1"
 87BC [03] B790      2155       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 87BE [02] A620      2156       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87C0 [03] B791      2157       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 87C2 [03] B6C1      2158       lda     Ftrimcor          ; Load accumulator with value in "Ftrimcor"
 87C4 [03] B784      2159       sta     DisVal            ; Copy to "DisVal" variable
 87C6 [05] CD8EA8    2160       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 87C9 [03] B6AD      2161       lda     AC_100            ; Load accumulator with value in "AC_100"
 87CB [03] B792      2162       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 87CD [03] B6AE      2163       lda     AC_10             ; Load accumulator with value in "AC_10"
 87CF [03] B793      2164       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 87D1 [03] B6AF      2165       lda     AC_1              ; Load accumulator with value in "AC_1"
 87D3 [03] B794      2166       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 87D5 [02] A620      2167       lda     #$20              ; Load accumulator with ASCII ' '(space)
 87D7 [03] B795      2168       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 87D9 [03] B6CF      2169       lda     trmAngFac         ; Load accumulator with value in "trmAngFac"
 87DB [03] B784      2170       sta     DisVal            ; Copy to "DisVal" variable
 87DD [05] CD8EA8    2171       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 87E0 [03] B6AD      2172       lda     AC_100            ; Load accumulator with value in "AC_100"
 87E2 [03] B796      2173       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 87E4 [03] B6AE      2174       lda     AC_10             ; Load accumulator with value in "AC_10"
 87E6 [03] B797      2175       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 87E8 [03] B6AF      2176       lda     AC_1              ; Load accumulator with value in "AC_1"
 87EA [03] B798      2177       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 87EC [03] CC8B5E    2178       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2179  
                     2180  SCRN_10:
 87EF [03] B6C6      2181       lda     pwcalcH           ; Load accumulator with value in "pwcalcH"
 87F1 [03] B763      2182       sta     intacc1+2         ; Copy to "intacc1+2"


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 20
MV_ECU


 87F3 [03] B6C7      2183       lda     pwcalcL           ; Load accumulator with value in "pwcalcL"
 87F5 [03] B764      2184       sta     intacc1+3         ; Copy to "intacc1+3"
 87F7 [05] CD8E9A    2185       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 87FA [05] CD8EBC    2186       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 87FD [03] B6B0      2187       lda     thousands         ; Load accumulator with value in "thousands"
 87FF [03] B785      2188       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8801 [03] B6B1      2189       lda     hundreds          ; Load accumulator with value in "hundreds"
 8803 [03] B786      2190       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8805 [03] B6B2      2191       lda     tens              ; Load accumulator with value in "tens"
 8807 [03] B787      2192       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 8809 [03] B6B3      2193       lda     ones              ; Load accumulator with value in "ones"
 880B [03] B788      2194       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 880D [02] A620      2195       lda     #$20              ; Load accumulator with ASCII ' '(space)
 880F [03] B789      2196       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8811 [03] B6C8      2197       lda     pw               ; Load accumulator with value in "pw"
 8813 [03] B784      2198       sta     DisVal            ; Copy to "DisVal" variable
 8815 [05] CD8EA8    2199       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8818 [03] B6AD      2200       lda     AC_100            ; Load accumulator with value in "AC_100"
 881A [03] B78A      2201       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 881C [03] B6AE      2202       lda     AC_10             ; Load accumulator with value in "AC_10"
 881E [03] B78B      2203       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8820 [03] B6AF      2204       lda     AC_1              ; Load accumulator with value in "AC_1"
 8822 [03] B78C      2205       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8824 [02] A620      2206       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8826 [03] B78D      2207       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8828 [03] B6C9      2208       lda     fd                ; Load accumulator with value in "fd"
 882A [03] B784      2209       sta     DisVal            ; Copy to "DisVal" variable
 882C [05] CD8EA8    2210       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 882F [03] B6AD      2211       lda     AC_100            ; Load accumulator with value in "AC_100"
 8831 [03] B78E      2212       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8833 [03] B6AE      2213       lda     AC_10             ; Load accumulator with value in "AC_10"
 8835 [03] B78F      2214       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8837 [03] B6AF      2215       lda     AC_1              ; Load accumulator with value in "AC_1"
 8839 [03] B790      2216       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 883B [02] A620      2217       lda     #$20              ; Load accumulator with ASCII ' '(space)
 883D [03] B791      2218       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 883F [03] B6C5      2219       lda     vecurr            ; Load accumulator with value in "vecurr"
 8841 [03] B784      2220       sta     DisVal            ; Copy to "DisVal" variable
 8843 [05] CD8EA8    2221       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8846 [03] B6AD      2222       lda     AC_100            ; Load accumulator with value in "AC_100"
 8848 [03] B792      2223       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 884A [03] B6AE      2224       lda     AC_10             ; Load accumulator with value in "AC_10"
 884C [03] B793      2225       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 884E [03] B6AF      2226       lda     AC_1              ; Load accumulator with value in "AC_1"
 8850 [03] B794      2227       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8852 [02] A620      2228       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8854 [03] B795      2229       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8856 [05] CD8C77    2230       jsr     CALC_DUTY         ; Jump to subroutine at CALC_DUTY:
 8859 [03] B6E4      2231       lda     duty              ; Load accumulator with value in "duty"
 885B [03] B784      2232       sta     DisVal            ; Copy to "DisVal" variable
 885D [05] CD8EA8    2233       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8860 [03] B6AD      2234       lda     AC_100            ; Load accumulator with value in "AC_100"
 8862 [03] B796      2235       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8864 [03] B6AE      2236       lda     AC_10             ; Load accumulator with value in "AC_10"
 8866 [03] B797      2237       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8868 [03] B6AF      2238       lda     AC_1              ; Load accumulator with value in "AC_1"
 886A [03] B798      2239       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 886C [03] CC8B5E    2240       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2241  
                     2242  SCRN_11:
 886F [02] A620      2243       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8871 [03] B785      2244       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8873 [05] CD8CB7    2245       jsr     CALC_RPM_HR       ; Jump to subroutine at CALC_RPM_HR:
 8876 [03] B6F8      2246       lda     rpmhrH            ; Load accumulator with value in "rpmhrH"
 8878 [03] B763      2247       sta     intacc1+2         ; Copy to "intacc1+2"
 887A [03] B6F9      2248       lda     rpmhrL            ; Load accumulator with value in "rpmhrL"
 887C [03] B764      2249       sta     intacc1+3         ; Copy to "intacc1+3"
 887E [05] CD8EBC    2250       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8881 [03] B6B0      2251       lda     thousands         ; Load accumulator with value in "thousands"
 8883 [03] B786      2252       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8885 [03] B6B1      2253       lda     hundreds          ; Load accumulator with value in "hundreds"
 8887 [03] B787      2254       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8889 [03] B6B2      2255       lda     tens              ; Load accumulator with value in "tens"
 888B [03] B788      2256       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 888D [03] B6B3      2257       lda     ones              ; Load accumulator with value in "ones"
 888F [03] B789      2258       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8891 [02] A620      2259       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8893 [03] B78A      2260       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
                     2261  ;*     lda     pippprdH          ; Load accumulator with value in "pippprdH"
 8895 [03] B6CC      2262       lda     tachH             ; Load accumulator with value in "tachH"
 8897 [03] B763      2263       sta     intacc1+2         ; Copy to "intacc1+2"
                     2264  ;*     lda     pippprdL          ; Load accumulator with value in "pippprdL"
 8899 [03] B6CD      2265       lda     tachL             ; Load accumulator with value in "tachL"
 889B [03] B764      2266       sta     intacc1+3         ; Copy to "intacc1+3"
 889D [05] CD8E9A    2267       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 88A0 [05] CD8EBC    2268       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 88A3 [03] B6B0      2269       lda     thousands         ; Load accumulator with value in "thousands"
 88A5 [03] B78B      2270       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 88A7 [03] B6B1      2271       lda     hundreds          ; Load accumulator with value in "hundreds"
 88A9 [03] B78C      2272       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 88AB [03] B6B2      2273       lda     tens              ; Load accumulator with value in "tens"
 88AD [03] B78D      2274       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 88AF [03] B6B3      2275       lda     ones              ; Load accumulator with value in "ones"
 88B1 [03] B78E      2276       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 88B3 [02] A620      2277       lda     #$20              ; Load accumulator with ASCII ' '(space)
 88B5 [03] B78F      2278       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 88B7 [03] B6D4      2279       lda     monpH             ; Load accumulator with value in "monpH"
 88B9 [03] B763      2280       sta     intacc1+2         ; Copy to "intacc1+2"
 88BB [03] B6D5      2281       lda     monpL             ; Load accumulator with value in "monpL"
 88BD [03] B764      2282       sta     intacc1+3         ; Copy to "intacc1+3"
 88BF [05] CD8E9A    2283       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 88C2 [05] CD8EBC    2284       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 88C5 [03] B6B0      2285       lda     thousands         ; Load accumulator with value in "thousands"
 88C7 [03] B790      2286       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 88C9 [03] B6B1      2287       lda     hundreds          ; Load accumulator with value in "hundreds"
 88CB [03] B791      2288       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 88CD [03] B6B2      2289       lda     tens              ; Load accumulator with value in "tens"
 88CF [03] B792      2290       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 88D1 [03] B6B3      2291       lda     ones              ; Load accumulator with value in "ones"
 88D3 [03] B793      2292       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 88D5 [02] A620      2293       lda     #$20              ; Load accumulator with ASCII ' '(space)
 88D7 [03] B794      2294       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 88D9 [03] B6D2      2295       lda     vspH              ; Load accumulator with value in "vspH"
 88DB [03] B763      2296       sta     intacc1+2         ; Copy to "intacc1+2"
 88DD [03] B6D3      2297       lda     vspL              ; Load accumulator with value in "vspL"
 88DF [03] B764      2298       sta     intacc1+3         ; Copy to "intacc1+3"
 88E1 [05] CD8EBC    2299       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 88E4 [03] B6B0      2300       lda     thousands         ; Load accumulator with value in "thousands"
 88E6 [03] B795      2301       sta     Botlin16          ; Copy to "BotLin11"(12th column on left, bottom line)
 88E8 [03] B6B1      2302       lda     hundreds          ; Load accumulator with value in "hundreds"
 88EA [03] B796      2303       sta     Botlin17          ; Copy to "BotLin12"(13th column on left, bottom line)
 88EC [03] B6B2      2304       lda     tens              ; Load accumulator with value in "tens"
 88EE [03] B797      2305       sta     Botlin18          ; Copy to "BotLin13"(14th column on left, bottom line)
 88F0 [03] B6B3      2306       lda     ones              ; Load accumulator with value in "ones"
 88F2 [03] B798      2307       sta     Botlin19          ; Copy to "BotLin14"(15th column on left, bottom line)
 88F4 [03] CC8B5E    2308       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2309  
                     2310  SCRN_12:
 88F7 [05] CD8CAB    2311       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 88FA [03] B6F6      2312       lda     rpmH              ; Load accumulator with value in "rpmH"
 88FC [03] B763      2313       sta     intacc1+2         ; Copy to "intacc1+2"
 88FE [03] B6F7      2314       lda     rpmL              ; Load accumulator with value in "rpmL"
 8900 [03] B764      2315       sta     intacc1+3         ; Copy to "intacc1+3"
 8902 [05] CD8EBC    2316       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8905 [03] B6B0      2317       lda     thousands         ; Load accumulator with value in "thousands"
 8907 [03] B785      2318       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 21
MV_ECU


 8909 [03] B6B1      2319       lda     hundreds          ; Load accumulator with value in "hundreds"
 890B [03] B786      2320       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 890D [03] B6B2      2321       lda     tens              ; Load accumulator with value in "tens"
 890F [03] B787      2322       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 8911 [03] B6B3      2323       lda     ones              ; Load accumulator with value in "ones"
 8913 [03] B788      2324       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8915 [02] A620      2325       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8917 [03] B789      2326       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8919 [05] CD8C0D    2327       jsr     CALC_MAP          ; Jump to subroutine at CALC_MAP:
 891C [03] B6DD      2328       lda     map               ; Load accumulator with value in "map"
 891E [03] B784      2329       sta     DisVal            ; Copy to "DisVal" variable
 8920 [05] CD8EA8    2330       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8923 [03] B6AD      2331       lda     AC_100            ; Load accumulator with value in "AC_100"
 8925 [03] B78A      2332       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8927 [03] B6AE      2333       lda     AC_10             ; Load accumulator with value in "AC_10"
 8929 [03] B78B      2334       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 892B [03] B6AF      2335       lda     AC_1              ; Load accumulator with value in "AC_1"
 892D [03] B78C      2336       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 892F [02] A620      2337       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8931 [03] B78D      2338       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8933 [03] B6CE      2339       lda     spkAngFac         ; Load accumulator with value in "spkAngFac"
 8935 [03] B784      2340       sta     DisVal            ; Copy to "DisVal" variable
 8937 [05] CD8EA8    2341       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 893A [03] B6AD      2342       lda     AC_100            ; Load accumulator with value in "AC_100"
 893C [03] B78E      2343       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 893E [03] B6AE      2344       lda     AC_10             ; Load accumulator with value in "AC_10"
 8940 [03] B78F      2345       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8942 [03] B6AF      2346       lda     AC_1              ; Load accumulator with value in "AC_1"
 8944 [03] B790      2347       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8946 [02] A620      2348       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8948 [03] B791      2349       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 894A [03] B6D0      2350       lda     dlyAngFac         ; Load accumulator with value in "dlyAngFac"
 894C [03] B784      2351       sta     DisVal            ; Copy to "DisVal" variable
 894E [05] CD8EA8    2352       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8951 [03] B6AD      2353       lda     AC_100            ; Load accumulator with value in "AC_100"
 8953 [03] B792      2354       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8955 [03] B6AE      2355       lda     AC_10             ; Load accumulator with value in "AC_10"
 8957 [03] B793      2356       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8959 [03] B6AF      2357       lda     AC_1              ; Load accumulator with value in "AC_1"
 895B [03] B794      2358       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 895D [02] A620      2359       lda     #$20              ; Load accumulator with ASCII ' '(space)
 895F [03] B795      2360       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8961 [03] B6CF      2361       lda     trmAngFac         ; Load accumulator with value in "trmAngFac"
 8963 [03] B784      2362       sta     DisVal            ; Copy to "DisVal" variable
 8965 [05] CD8EA8    2363       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8968 [03] B6AD      2364       lda     AC_100            ; Load accumulator with value in "AC_100"
 896A [03] B796      2365       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 896C [03] B6AE      2366       lda     AC_10             ; Load accumulator with value in "AC_10"
 896E [03] B797      2367       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8970 [03] B6AF      2368       lda     AC_1              ; Load accumulator with value in "AC_1"
 8972 [03] B798      2369       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8974 [03] CC8B5E    2370       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2371  
                     2372  SCRN_13:
 8977 [05] CD8CAB    2373       jsr     CALC_RPM          ; Jump to subroutine at CALC_RPM:
 897A [03] B6F6      2374       lda     rpmH              ; Load accumulator with value in "rpmH"
 897C [03] B763      2375       sta     intacc1+2         ; Copy to "intacc1+2"
 897E [03] B6F7      2376       lda     rpmL              ; Load accumulator with value in "rpmL"
 8980 [03] B764      2377       sta     intacc1+3         ; Copy to "intacc1+3"
 8982 [05] CD8EBC    2378       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8985 [03] B6B0      2379       lda     thousands         ; Load accumulator with value in "thousands"
 8987 [03] B785      2380       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8989 [03] B6B1      2381       lda     hundreds          ; Load accumulator with value in "hundreds"
 898B [03] B786      2382       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 898D [03] B6B2      2383       lda     tens              ; Load accumulator with value in "tens"
 898F [03] B787      2384       sta     Botlin2           ; Copy to "BotLin4"(3d column on left, bottom line)
 8991 [03] B6B3      2385       lda     ones              ; Load accumulator with value in "ones"
 8993 [03] B788      2386       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8995 [02] A620      2387       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8997 [03] B789      2388       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8999 [05] CD8CE3    2389       jsr     CALC_TRIM_ANG     ; Jump to subroutine at CALC_TRIM_ANG:
 899C [03] B6E5      2390       lda     trmAng            ; Load accumulator with value in "trmAng"
 899E [03] B784      2391       sta     DisVal            ; Copy to "DisVal" variable
 89A0 [05] CD8EA8    2392       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 89A3 [03] B6AD      2393       lda     AC_100            ; Load accumulator with value in "AC_100"
 89A5 [03] B78A      2394       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 89A7 [03] B6AE      2395       lda     AC_10             ; Load accumulator with value in "AC_10"
 89A9 [03] B78B      2396       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 89AB [03] B6AF      2397       lda     AC_1              ; Load accumulator with value in "AC_1"
 89AD [03] B78C      2398       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 89AF [02] A620      2399       lda     #$20              ; Load accumulator with ASCII ' '(space)
 89B1 [03] B78D      2400       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 89B3 [05] CD8CF4    2401       jsr     CALC_DLY_ANG      ; Jump to subroutine at CALC_DLY_ANG:
 89B6 [03] B6E6      2402       lda     dlyAng            ; Load accumulator with value in "dlyAng"
 89B8 [03] B784      2403       sta     DisVal            ; Copy to "DisVal" variable
 89BA [05] CD8EA8    2404       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 89BD [03] B6AD      2405       lda     AC_100            ; Load accumulator with value in "AC_100"
 89BF [03] B78E      2406       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 89C1 [03] B6AE      2407       lda     AC_10             ; Load accumulator with value in "AC_10"
 89C3 [03] B78F      2408       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 89C5 [03] B6AF      2409       lda     AC_1              ; Load accumulator with value in "AC_1"
 89C7 [03] B790      2410       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 89C9 [02] A620      2411       lda     #$20              ; Load accumulator with ASCII ' '(space)
 89CB [03] B791      2412       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 89CD [05] CD8D07    2413       jsr     CALC_TIM_ANG      ; Jump to subroutine at CALC_TIM_ANG:
 89D0 [03] B6E7      2414       lda     timAng            ; Load accumulator with value in "timAng"
 89D2 [03] B784      2415       sta     DisVal            ; Copy to "DisVal" variable
 89D4 [05] CD8EA8    2416       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 89D7 [03] B6AD      2417       lda     AC_100            ; Load accumulator with value in "AC_100"
 89D9 [03] B792      2418       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 89DB [03] B6AE      2419       lda     AC_10             ; Load accumulator with value in "AC_10"
 89DD [03] B793      2420       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 89DF [03] B6AF      2421       lda     AC_1              ; Load accumulator with value in "AC_1"
 89E1 [03] B794      2422       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 89E3 [02] A620      2423       lda     #$20              ; Load accumulator with ASCII ' '(space)
 89E5 [03] B795      2424       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 89E7 [05] CD8D10    2425       jsr     CALC_MON_TIM_ANG  ; Jump to subroutine at CALC_MON_TIM_ANG:
 89EA [03] B6E8      2426       lda     monTimAng         ; Load accumulator with value in "monTimAng"
 89EC [03] B784      2427       sta     DisVal            ; Copy to "DisVal" variable
 89EE [05] CD8EA8    2428       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 89F1 [03] B6AD      2429       lda     AC_100            ; Load accumulator with value in "AC_100"
 89F3 [03] B796      2430       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 89F5 [03] B6AE      2431       lda     AC_10             ; Load accumulator with value in "AC_10"
 89F7 [03] B797      2432       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 89F9 [03] B6AF      2433       lda     AC_1              ; Load accumulator with value in "AC_1"
 89FB [03] B798      2434       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 89FD [03] CC8B5E    2435       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2436  
                     2437  SCRN_14:
 8A00 [05] CD8DBB    2438       jsr     CALC_VS           ; Jump to subroutine at CALC_VS:
 8A03 [03] B6EB      2439       lda     kph               ; Load accumulator with value in "kph"
 8A05 [03] B784      2440       sta     DisVal            ; Copy to "DisVal" variable
 8A07 [05] CD8EA8    2441       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A0A [03] B6AD      2442       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A0C [03] B785      2443       sta     Botlin0           ; Copy to "BotLin0"(1st column on left, bottom line)
 8A0E [03] B6AE      2444       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A10 [03] B786      2445       sta     Botlin1           ; Copy to "BotLin1"(2nd column on left, bottom line)
 8A12 [03] B6AF      2446       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A14 [03] B787      2447       sta     Botlin2           ; Copy to "BotLin2"(3d column on left, bottom line)
 8A16 [02] A620      2448       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A18 [03] B788      2449       sta     Botlin3           ; Copy to "BotLin3"(4th column on left, bottom line)
 8A1A [05] CD8D82    2450       jsr     CALC_KPH1         ; Jump to subroutine at CALC_KPH1:
 8A1D [03] B6EC      2451       lda     kph1              ; Load accumulator with value in "kph1"
 8A1F [03] B784      2452       sta     DisVal            ; Copy to "DisVal" variable
 8A21 [05] CD8EA8    2453       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A24 [03] B6AD      2454       lda     AC_100            ; Load accumulator with value in "AC_100"


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 22
MV_ECU


 8A26 [03] B789      2455       sta     Botlin4           ; Copy to "BotLin4"(5th column on left, bottom line)
 8A28 [03] B6AE      2456       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A2A [03] B78A      2457       sta     Botlin5           ; Copy to "BotLin5"(6th column on left, bottom line)
 8A2C [03] B6AF      2458       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A2E [03] B78B      2459       sta     Botlin6           ; Copy to "BotLin6"(7th column on left, bottom line)
 8A30 [02] A620      2460       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A32 [03] B78C      2461       sta     Botlin7           ; Copy to "BotLin7"(8th column on left, bottom line)
 8A34 [03] B6D1      2462       lda     odoSec            ; Load accumulator with value in "odoSec"
 8A36 [03] B784      2463       sta     DisVal            ; Copy to "DisVal" variable
 8A38 [05] CD8EA8    2464       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A3B [03] B6AD      2465       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A3D [03] B78D      2466       sta     Botlin8           ; Copy to "BotLin8"(9th column on left, bottom line)
 8A3F [03] B6AE      2467       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A41 [03] B78E      2468       sta     Botlin9           ; Copy to "BotLin9"(10th column on left, bottom line)
 8A43 [03] B6AF      2469       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A45 [03] B78F      2470       sta     Botlin10          ; Copy to "BotLin10"(11th column on left, bottom line)
 8A47 [02] A620      2471       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A49 [03] B790      2472       sta     Botlin11          ; Copy to "BotLin11"(12th column on left, bottom line)
 8A4B [03] B6CA      2473       lda     fdSecH            ; Load accumulator with value in "fdSecH"
 8A4D [03] B763      2474       sta     intacc1+2         ; Copy to "intacc1+2"
 8A4F [03] B6CB      2475       lda     fdSecL            ; Load accumulator with value in "fdSecLL"
 8A51 [03] B764      2476       sta     intacc1+3         ; Copy to "intacc1+3"
 8A53 [05] CD8E9A    2477       jsr     DIV_BY_TEN        ; Jump to subroutine at DIV_BY_TEN:
 8A56 [05] CD8EBC    2478       jsr     CONV_16BIT_ASCII  ; Jump to subroutine at CONV_16BIT_ASCII:
 8A59 [03] B6B0      2479       lda     thousands         ; Load accumulator with value in "thousands"
 8A5B [03] B791      2480       sta     Botlin12          ; Copy to "BotLin12"(13th column on left, bottom line)
 8A5D [03] B6B1      2481       lda     hundreds          ; Load accumulator with value in "hundreds"
 8A5F [03] B792      2482       sta     Botlin13          ; Copy to "BotLin13"(14th column on left, bottom line)
 8A61 [03] B6B2      2483       lda     tens              ; Load accumulator with value in "tens"
 8A63 [03] B793      2484       sta     Botlin14          ; Copy to "BotLin14"(15th column on left, bottom line)
 8A65 [03] B6B3      2485       lda     ones              ; Load accumulator with value in "ones"
 8A67 [03] B794      2486       sta     Botlin15          ; Copy to "BotLin15"(16th column on left, bottom line)
 8A69 [02] A620      2487       lda     #$20              ; Load accumulator with ASCII ' '(space)
 8A6B [03] B795      2488       sta     Botlin16          ; Copy to "BotLin16"(17th column on left, bottom line)
 8A6D [03] B6B4      2489       lda     secl              ; Load accumulator with value in "secl"
 8A6F [03] B784      2490       sta     DisVal            ; Copy to "DisVal" variable
 8A71 [05] CD8EA8    2491       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8A74 [03] B6AD      2492       lda     AC_100            ; Load accumulator with value in "AC_100"
 8A76 [03] B796      2493       sta     Botlin17          ; Copy to "BotLin17"(18th column on left, bottom line)
 8A78 [03] B6AE      2494       lda     AC_10             ; Load accumulator with value in "AC_10"
 8A7A [03] B797      2495       sta     Botlin18          ; Copy to "BotLin18"(19th column on left, bottom line)
 8A7C [03] B6AF      2496       lda     AC_1              ; Load accumulator with value in "AC_1"
 8A7E [03] B798      2497       sta     Botlin19          ; Copy to "BotLin19"(20th column on left, bottom line)
 8A80 [03] CC8B5E    2498       jmp     CHK_FRZ_DISP      ; Jump to CHK_FRZ_DISP:
                     2499  
                     2500  SCRN_15:
 8A83 [02] A620      2501       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8A85 [03] B785      2502       sta     Botlin0                 ; Copy to "BotLin0"(1st column on left, bottom line)
                     2503  
                     2504  ;CHK_RL:
 8A87 [05] 0AD805    2505       brset   REVL,alarmbits,SET_RL   ; If "REVL" bit of "alarmbits" is set, branch to SET_RL:
 8A8A [04] 6E4E86    2506       mov     #'N',Botlin1            ; Move "N" into "Botlin1"(2nd column on left, bottom line)
 8A8D [03] 2003      2507       bra     SET_RL_DONE             ; Branch to SET_RL_DONE:
                     2508  
                     2509  SET_RL:
 8A8F [04] 6E5986    2510       mov     #'Y',Botlin1            ; Move "Y" into "Botlin1""(2nd column on left, bottom line)
                     2511  
                     2512  SET_RL_DONE:
 8A92 [02] A620      2513       lda     #$20                    ; Load accumulator with ASCII ' '(space)
 8A94 [03] B787      2514       sta     Botlin2                 ; Copy to "BotLin2"(3d column on left, bottom line)
 8A96 [03] B788      2515       sta     Botlin3                 ; Copy to "BotLin3"(4th column on left, bottom line)
                     2516  
                     2517  ;CHK_FC:
 8A98 [05] 0CD805    2518       brset   fldClr,alarmbits,SET_FC ; If "fldClr" bit of "alarmbits" is set, branch to SET_FC:
 8A9B [04] 6E4E89    2519       mov     #'N',Botlin4            ; Move "N" into "Botlin4"(5th column on left, bottom line)
 8A9E [03] 2003      2520       bra     SET_FC_DONE             ; Branch to SET_FC_DONE:
                     2521  
                     2522  SET_FC:
 8AA0 [04] 6E5989    2523       mov     #'Y',Botlin4           ; Move "Y" into "Botlin4"(5th column on left, bottom line)
                     2524  
                     2525  SET_FC_DONE:
 8AA3 [02] A620      2526       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AA5 [03] B78A      2527       sta     Botlin5                ; Copy to "BotLin5"(6th column on left, bottom line)
 8AA7 [03] B78B      2528       sta     Botlin6                ; Copy to "BotLin6"(7th column on left, bottom line)
 8AA9 [03] B78C      2529       sta     Botlin7                ; Copy to "BotLin7"(8th column on left, bottom line)
                     2530  
                     2531  ;CHK_FP:
 8AAB [05] 00D905    2532       brset   FPon,portAbits,SET_FP   ; If "FPon" bit of "portAbits" is set, branch to SET_FP:
 8AAE [04] 6E4E8D    2533       mov     #'N',Botlin8           ; Move "N" into "Botlin8"(9th column on left, bottom line)
 8AB1 [03] 2003      2534       bra     SET_FP_DONE            ; Branch to SET_FP_DONE:
                     2535  
                     2536  SET_FP:
 8AB3 [04] 6E598D    2537       mov     #'Y',Botlin8           ; Move "Y" into "Botlin8"(9th column on left, bottom line)
                     2538  
                     2539  SET_FP_DONE:
 8AB6 [02] A620      2540       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AB8 [03] B78E      2541       sta     Botlin9                ; Copy to "BotLin9"(10th column on left, bottom line)
 8ABA [03] B78F      2542       sta     Botlin10               ; Copy to "BotLin10"(11th column on left, bottom line)
                     2543  
                     2544  ;CHK_FT:
 8ABC [05] 0AD905    2545       brset   FTen,portAbits,SET_FT   ; If "FTen" bit of "portAbits" is set, branch to SET_FT:
 8ABF [04] 6E4E90    2546       mov     #'N',Botlin11          ; Move "N" into "Botlin11"(12th column on left, bottom line)
 8AC2 [03] 2003      2547       bra     SET_FT_DONE            ; Branch to SET_FT_DONE:
                     2548  
                     2549  SET_FT:
 8AC4 [04] 6E5990    2550       mov     #'Y',Botlin11           ; Move "Y" into "Botlin11"(12th column on left, bottom line)
                     2551  
                     2552  SET_FT_DONE:
 8AC7 [02] A620      2553       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AC9 [03] B791      2554       sta     Botlin12               ; Copy to "BotLin12"(13th column on left, bottom line)
 8ACB [03] B792      2555       sta     Botlin13               ; Copy to "BotLin13"(14th column on left, bottom line)
 8ACD [03] B793      2556       sta     Botlin14               ; Copy to "BotLin14"(15th column on left, bottom line)
                     2557  
                     2558  ;CHK_AL:
 8ACF [05] 02DA05    2559       brset   acclLED,portCbits,SET_AL   ; If "acclLED" bit of "portCbits" is set, branch to SET_AL:
 8AD2 [04] 6E4E94    2560       mov     #'N',Botlin15          ; Move "N" into "Botlin15"(16th column on left, bottom line)
 8AD5 [03] 2003      2561       bra     SET_AL_DONE            ; Branch to SET_AL_DONE:
                     2562  
                     2563  SET_AL:
 8AD7 [04] 6E5994    2564       mov     #'Y',Botlin15           ; Move "Y" into "Botlin15"(16th column on left, bottom line)
                     2565  
                     2566  SET_AL_DONE:
 8ADA [02] A620      2567       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8ADC [03] B795      2568       sta     Botlin16               ; Copy to "BotLin16"(17th column on left, bottom line)
 8ADE [03] B796      2569       sta     Botlin17               ; Copy to "BotLin17"(18th column on left, bottom line)
                     2570  
                     2571  ;CHK_WL:
 8AE0 [05] 04DA05    2572       brset   wmLED,portCbits,SET_WL   ; If "wmLED" bit of "portCbits" is set, branch to SET_WL:
 8AE3 [04] 6E4E97    2573       mov     #'N',Botlin18           ; Move "N" into "Botlin18"(19th column on left, bottom line)
 8AE6 [03] 2003      2574       bra     SET_WL_DONE            ; Branch to SET_WL_DONE:
                     2575  
                     2576  SET_WL:
 8AE8 [04] 6E5997    2577       mov     #'Y',Botlin18           ; Move "Y" into "Botlin18"(19th column on left, bottom line)
                     2578  
                     2579  SET_WL_DONE:
 8AEB [02] A620      2580       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AED [03] B798      2581       sta     Botlin19               ; Copy to "BotLin19"(20th column on left, bottom line)
 8AEF [03] CC8B5E    2582       jmp     CHK_FRZ_DISP           ; Jump to CHK_FRZ_DISP:
                     2583  
                     2584  
                     2585  SCRN_16:
 8AF2 [02] A620      2586       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8AF4 [03] B785      2587       sta     Botlin0                ; Copy to "BotLin0"(1st column on left, bottom line)
                     2588  
                     2589  ;CHK_RN:
 8AF6 [05] 00D705    2590       brset   running,engine,SET_RN  ; If "running" bit of "engine" is set, branch to SET_RN:


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 23
MV_ECU


 8AF9 [04] 6E4E86    2591       mov     #'N',Botlin1           ; Move "N" into "Botlin1"(2nd column on left, bottom line)
 8AFC [03] 2003      2592       bra     SET_RN_DONE            ; Branch to SET_RN_DONE:
                     2593  
                     2594  SET_RN:
 8AFE [04] 6E5986    2595       mov     #'Y',Botlin1           ; Move "Y" into "Botlin1""(2nd column on left, bottom line)
                     2596  
                     2597  SET_RN_DONE:
 8B01 [02] A620      2598       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B03 [03] B787      2599       sta     Botlin2                ; Copy to "BotLin2"(3d column on left, bottom line)
 8B05 [03] B788      2600       sta     Botlin3                ; Copy to "BotLin3"(4th column on left, bottom line)
                     2601  
                     2602  ;CHK_CR:
 8B07 [05] 02D705    2603       brset   crank,engine,SET_CR    ; If "crank" bit of "engine" is set, branch to SET_CR:
 8B0A [04] 6E4E89    2604       mov     #'N',Botlin4           ; Move "N" into "Botlin4"(5th column on left, bottom line)
 8B0D [03] 2003      2605       bra     SET_CR_DONE            ; Branch to SET_CR_DONE:
                     2606  
                     2607  SET_CR:
 8B0F [04] 6E5989    2608       mov     #'Y',Botlin4           ; Move "Y" into "Botlin4"(5th column on left, bottom line)
                     2609  
                     2610  SET_CR_DONE:
 8B12 [02] A620      2611       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B14 [03] B78A      2612       sta     Botlin5                ; Copy to "BotLin5"(6th column on left, bottom line)
 8B16 [03] B78B      2613       sta     Botlin6                ; Copy to "BotLin6"(7th column on left, bottom line)
                     2614  
                     2615  ;CHK_SW:
 8B18 [05] 04D705    2616       brset   startw,engine,SET_SW   ; If "startw" bit of "engine" is set, branch to SET_SW:
 8B1B [04] 6E4E8C    2617       mov     #'N',Botlin7           ; Move "N" into "Botlin7"(8th column on left, bottom line)
 8B1E [03] 2003      2618       bra     SET_SW_DONE            ; Branch to SET_SW_DONE:
                     2619  
                     2620  SET_SW:
 8B20 [04] 6E598C    2621       mov     #'Y',Botlin7           ; Move "Y" into "Botlin7"(8th column on left, bottom line)
                     2622  
                     2623  SET_SW_DONE:
 8B23 [02] A620      2624       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B25 [03] B78D      2625       sta     Botlin8                ; Copy to "BotLin8"(9th column on left, bottom line)
 8B27 [03] B78E      2626       sta     Botlin9                ; Copy to "BotLin9"(10th column on left, bottom line)
 8B29 [03] B78F      2627       sta     Botlin10               ; Copy to "BotLin10"(11th column on left, bottom line)
                     2628  
                     2629  ;CHK_RW:
 8B2B [05] 06D705    2630       brset   warmup,engine,SET_RW   ; If "warmup" bit of "engine" is set, branch to SET_RW:
 8B2E [04] 6E4E90    2631       mov     #'N',Botlin11          ; Move "N" into "Botlin11"(12th column on left, bottom line)
 8B31 [03] 2003      2632       bra     SET_RW_DONE            ; Branch to SET_RW_DONE:
                     2633  
                     2634  SET_RW:
 8B33 [04] 6E5990    2635       mov     #'Y',Botlin11           ; Move "Y" into "Botlin11"(12th column on left, bottom line)
                     2636  
                     2637  SET_RW_DONE:
 8B36 [02] A620      2638       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B38 [03] B791      2639       sta     Botlin12               ; Copy to "BotLin12"(13th column on left, bottom line)
 8B3A [03] B792      2640       sta     Botlin13               ; Copy to "BotLin13"(14th column on left, bottom line)
                     2641  
                     2642  ;CHK_AC:
 8B3C [05] 08D705    2643       brset   tpsaen,engine,SET_AC   ; If "tpsaen" bit of "engine" is set, branch to SET_AC:
 8B3F [04] 6E4E93    2644       mov     #'N',Botlin14          ; Move "N" into "Botlin14"(15th column on left, bottom line)
 8B42 [03] 2003      2645       bra     SET_AC_DONE            ; Branch to SET_AC_DONE:
                     2646  
                     2647  SET_AC:
 8B44 [04] 6E5993    2648       mov     #'Y',Botlin14          ; Move "Y" into "Botlin14"(15th column on left, bottom line)
                     2649  
                     2650  SET_AC_DONE:
 8B47 [02] A620      2651       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B49 [03] B794      2652       sta     Botlin15               ; Copy to "BotLin15"(16th column on left, bottom line)
 8B4B [03] B795      2653       sta     Botlin16               ; Copy to "BotLin16"(17th column on left, bottom line)
                     2654  
                     2655  ;CHK_DC:
 8B4D [05] 0AD705    2656       brset   tpsden,engine,SET_DC   ; If "tpsden" bit of "engine" is set, branch to SET_DC:
 8B50 [04] 6E4E96    2657       mov     #'N',Botlin17          ; Move "N" into "Botlin17"(18th column on left, bottom line)
 8B53 [03] 2003      2658       bra     SET_DC_DONE            ; Branch to SET_DC_DONE:
                     2659  
                     2660  SET_DC:
 8B55 [04] 6E5996    2661       mov     #'Y',Botlin17           ; Move "Y" into "Botlin17"(18th column on left, bottom line)
                     2662  
                     2663  SET_DC_DONE:
 8B58 [02] A620      2664       lda     #$20                   ; Load accumulator with ASCII ' '(space)
 8B5A [03] B797      2665       sta     Botlin18               ; Copy to "BotLin18"(19th column on left, bottom line)
 8B5C [03] B798      2666       sta     Botlin19               ; Copy to "BotLin19"(20th column on left, bottom line)
                     2667  
                     2668  
                     2669  ;***************************************************************************
                     2670  ; - Check to see if we have had a "display freeze" command and branch
                     2671  ;   accordingly. (This feature was from a previous version but left in
                     2672  ;   for ease of programming)
                     2673  ;***************************************************************************
                     2674  
                     2675  CHK_FRZ_DISP:
 8B5E [05] 02530F    2676       brset    frz,flags,NO_CHNG_DB     ; If "frz" bit of "flags" variable
                     2677                                         ; is set, branch to NO_CHNG_DB:
                     2678  
                     2679  
                     2680  ;****************************************************************************
                     2681  ; - Compare all the characters on the bottom line commanded, to those of the
                     2682  ;   previous bottom line. If they are different, update the bottom line,
                     2683  ;   otherwise, skip over. This is to eliminate display  "digit rattle"
                     2684  ;   caused by rapid screen updates.
                     2685  ;****************************************************************************
                     2686  
                     2687  BOTLIN_CHK_D:
 8B61 [05] CD910A    2688       jsr     CMP_BOTLIN                   ; Jump to subroutine at CMP_BOTLIN:
 8B64 [05] 0B5309    2689       brclr   LinChng,flags,NO_CHNG_DB     ; If "LinChng" bit of "flags"
                     2690                                            ; variable is clear, branch to
                     2691                                            ; NO_CHNG_DB:
                     2692  
                     2693  ;****************************************************************************
                     2694  ; - Set up the VFD to place the first character in the bottom line, extreme
                     2695  ;   left hand position
                     2696  ;****************************************************************************
                     2697  
 8B67 [05] CD9062    2698       jsr     VFD_START_BOT      ; Jump to subroutine at VFD_START_BOT:
                     2699  
                     2700  ;***************************************************************************
                     2701  ; - Print the bottom line of the VFD display
                     2702  ;***************************************************************************
                     2703  
                     2704  PRINT_BOT_D:
 8B6A [03] 450085    2705       ldhx    #BotLin0       ; Load index register with address of
                     2706                              ; entry point for bottom line of VFD
 8B6D [05] CD8FF6    2707       jsr     PRINT_LINE     ; Jump to subroutine at PRINT_LINE:
                     2708  
                     2709  NO_CHNG_DB:
 8B70 [03] CC8241    2710       jmp     LOOPY          ; Jump to LOOPY:(End of program loop while in
                     2711                              ; "Display" mode)
                     2712  
                     2713  
                     2714  ;****************************************************************************
                     2715  ;
                     2716  ; * * * * * * * * * * * * * * Interrupt Section * * * * * * * * * * * * * *
                     2717  ;
                     2718  ; NOTE!!! If the interrupt service routine modifies the H register, or uses
                     2719  ; the indexed addressing mode, save the H register (pshh) and then restore
                     2720  ; it (pulh) prior to exiting the routine
                     2721  ;
                     2722  ;****************************************************************************
                     2723  
                     2724  ;****************************************************************************
                     2725  ;
                     2726  ; -------- Following interrupt service routines in priority order ----------


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 24
MV_ECU


                     2727  ;
                     2728  ; TIM2CH0_ISR: - TIM2 CH0 Interrupt (1000uS clock tick)(1.0mS)
                     2729  ;
                     2730  ; SCIRCV_ISR:  - SCI receive
                     2731  ;
                     2732  ; SCITX_ISR:   - SCI transmit (Not used)
                     2733  ;
                     2734  ;
                     2735  ;***************************************************************************
                     2736  
                     2737  ;****************************************************************************
                     2738  ;============================================================================
                     2739  ; - TIM2 CH0 Interrupt (1000uS clock tick)(1.0mS)
                     2740  ; - Generate time rates:
                     2741  ;   Milliseconds,(for contact de-bounce counters)
                     2742  ;   5 Milleseconds,(for auto-repeat and auto-repeat command counters)
                     2743  ;   250 Milliseconds,(for real time variable display updates)
                     2744  ;============================================================================
                     2745  ;****************************************************************************
                     2746  
                     2747  TIM2CH0_ISR:
 8B73 [02] 8B        2748       pshh                  ; Push value in index register Hi byte to stack
 8B74 [03] B630      2749       lda     T2SC0         ; Load accumulator with value in TIM2 CH0 Status
                     2750                             ; and Control Register (Arm CHxF flag clear)
 8B76 [04] 1F30      2751       bclr    CHxF,T2SC0    ; Clear CHxF bit of TIM2 CH0 Status and
                     2752                             ; Control Register
 8B78 [03] B632      2753       lda     T2CH0L        ; Load accumulator with value in TIM2 CH0 OC
                     2754                             ; register Lo byte
 8B7A [02] ABE8      2755       add     #$E8          ; Add (A)<-(A)+(#) decimal 232
 8B7C [01] 97        2756       tax                   ; Transfer value in accumulator to index
                     2757                             ; register Lo byte
 8B7D [03] B631      2758       lda     T2CH0H        ; Load accumulator with value in TIM2 CH0 OC
                     2759                             ; register Hi byte
 8B7F [02] A903      2760       adc     #$03          ; Add with carry decimal 768 (A)<-(A)+(#)+(C)
                     2761                             ;(total = ~1000uS)
 8B81 [03] B731      2762       sta     T2CH0H        ; Copy result to TIM2 CH0 OC register Hi byte
 8B83 [03] BF32      2763       stx     T2CH0L        ; Copy value in index register Lo byte
                     2764                             ; to TIM2 CH0 OC register Lo byte
                     2765                             ;(new output compare value)
                     2766  
                     2767  ;============================================================================
                     2768  ;*********************** 1.0 millisecond section ****************************
                     2769  ;============================================================================
                     2770  
                     2771  
                     2772  ;****************************************************************************
                     2773  ; - Check the value of the contact de-bounce counter variables, if other
                     2774  ;   than zero, decrement them.
                     2775  ;****************************************************************************
                     2776  
 8B85 [03] B640      2777       lda     Sw0DB              ; Load accumulator with value in "Sw0DB"
                     2778                                  ; variable
 8B87 [03] 2702      2779       beq     Sw0DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2780                                  ; Sw0DB_CHK_DONE:
 8B89 [04] 3A40      2781       dec     Sw0DB              ; Decrement "Sw0DB" variable
                     2782  
                     2783  Sw0DB_CHK_DONE:
                     2784  
 8B8B [03] B643      2785       lda     Sw1DB              ; Load accumulator with value in "Sw1DB"
                     2786                                  ; variable
 8B8D [03] 2702      2787       beq     Sw1DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2788                                  ; Sw1DB_CHK_DONE:
 8B8F [04] 3A43      2789       dec     Sw1DB              ; Decrement "Sw1DB" variable
                     2790  
                     2791  Sw1DB_CHK_DONE:
                     2792  
 8B91 [03] B646      2793       lda     Sw2DB              ; Load accumulator with value in "Sw2DB"
                     2794                                  ; variable
 8B93 [03] 2702      2795       beq     Sw2DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2796                                  ; Sw2DB_CHK_DONE:
 8B95 [04] 3A46      2797       dec     Sw2DB              ; Decrement "Sw2DB" variable
                     2798  
                     2799  Sw2DB_CHK_DONE:
                     2800  
 8B97 [03] B649      2801       lda     Sw3DB              ; Load accumulator with value in "Sw3DB"
                     2802                                  ; variable
 8B99 [03] 2702      2803       beq     Sw3DB_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2804                                  ; Sw3DB_CHK_DONE:
 8B9B [04] 3A49      2805       dec     Sw3DB              ; Decrement "Sw3DB" variable
                     2806  
                     2807  Sw3DB_CHK_DONE:
                     2808  
                     2809  
                     2810  ;****************************************************************************
                     2811  ; - Increment millisecond counter
                     2812  ;****************************************************************************
                     2813  
                     2814  INC_mS:
 8B9D [04] 3C5F      2815       inc     mS                  ; Increment Millisecond counter
 8B9F [03] B65F      2816       lda     mS                  ; Load accumulator with value in
                     2817                                   ; Millisecond counter
 8BA1 [02] A105      2818       cmp     #$05                ; Compare it with decimal 5
 8BA3 [03] 2648      2819       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     2820                                   ; branch to TIM2CH0_ISR_DONE:
                     2821  
                     2822  ;============================================================================
                     2823  ;************************** 5 Millisecond section ***************************
                     2824  ;============================================================================
                     2825  
                     2826  ;****************************************************************************
                     2827  ; - Check the value of the contact auto-repeat command counter variables,
                     2828  ;   if other than zero, decrement them.
                     2829  ;****************************************************************************
                     2830  
 8BA5 [03] B641      2831       lda     Sw0ARC             ; Load accumulator with value in "Sw0ARC"
                     2832                                  ; variable
 8BA7 [03] 2702      2833       beq     SW0ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     2834                                  ; SW0ARC_CHK_DONE:
 8BA9 [04] 3A41      2835       dec     Sw0ARC             ; Decrement "Sw0ARC" variable
                     2836  
                     2837  SW0ARC_CHK_DONE:
                     2838  
 8BAB [03] B644      2839       lda     Sw1ARC             ; Load accumulator with value in "Sw1ARC"
                     2840                                  ; variable
 8BAD [03] 2702      2841       beq     SW1ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     2842                                  ; SW1ARC_CHK_DONE:
 8BAF [04] 3A44      2843       dec     Sw1ARC             ; Decrement "Sw1ARC" variable
                     2844  
                     2845  SW1ARC_CHK_DONE:
                     2846  
 8BB1 [03] B647      2847       lda     Sw2ARC             ; Load accumulator with value in "Sw2ARC"
                     2848                                  ; variable
 8BB3 [03] 2702      2849       beq     SW2ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     2850                                  ; SW2ARC_CHK_DONE:
 8BB5 [04] 3A47      2851       dec     Sw2ARC             ; Decrement "Sw2ARC" variable
                     2852  
                     2853  SW2ARC_CHK_DONE:
                     2854  
 8BB7 [03] B64A      2855       lda     Sw3ARC             ; Load accumulator with value in "Sw3ARC"
                     2856                                  ; variable
 8BB9 [03] 2702      2857       beq     SW3ARC_CHK_DONE    ; If "Z" bit of "CCR is set, branch to
                     2858                                  ; SW3ARC_CHK_DONE:
 8BBB [04] 3A4A      2859       dec     Sw3ARC             ; Decrement "Sw3ARC" variable
                     2860  
                     2861  SW3ARC_CHK_DONE:
                     2862  


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 25
MV_ECU


                     2863  
                     2864  ;****************************************************************************
                     2865  ; - Check the value of the contact auto-repeat counter variables, if other
                     2866  ;   than zero, decrement them.
                     2867  ;****************************************************************************
                     2868  
 8BBD [03] B642      2869       lda     Sw0AR              ; Load accumulator with value in "Sw0AR"
                     2870                                  ; variable
 8BBF [03] 2702      2871       beq     SW0AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2872                                  ; SW0AR_CHK_DONE:
 8BC1 [04] 3A42      2873       dec     Sw0AR              ; Decrement "Sw0AR" variable
                     2874  
                     2875  SW0AR_CHK_DONE:
                     2876  
 8BC3 [03] B645      2877       lda     Sw1AR              ; Load accumulator with value in "Sw1AR"
                     2878                                  ; variable
 8BC5 [03] 2702      2879       beq     SW1AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2880                                  ; SW1AR_CHK_DONE:
 8BC7 [04] 3A45      2881       dec     Sw1AR              ; Decrement "Sw1AR" variable
                     2882  
                     2883  SW1AR_CHK_DONE:
                     2884  
 8BC9 [03] B648      2885       lda     Sw2AR              ; Load accumulator with value in "Sw2AR"
                     2886                                  ; variable
 8BCB [03] 2702      2887       beq     SW2AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2888                                  ; SW2AR_CHK_DONE:
 8BCD [04] 3A48      2889       dec     Sw2AR              ; Decrement "Sw2AR" variable
                     2890  
                     2891  SW2AR_CHK_DONE:
                     2892  
 8BCF [03] B64B      2893       lda     Sw3AR              ; Load accumulator with value in "Sw3AR"
                     2894                                  ; variable
 8BD1 [03] 2702      2895       beq     SW3AR_CHK_DONE     ; If "Z" bit of "CCR is set, branch to
                     2896                                  ; SW3AR_CHK_DONE:
 8BD3 [04] 3A4B      2897       dec     Sw3AR              ; Decrement "Sw3AR" variable
                     2898  
                     2899  SW3AR_CHK_DONE:
                     2900  
                     2901  
                     2902  ;****************************************************************************
                     2903  ; - Increment 5 millisecond counter
                     2904  ;****************************************************************************
                     2905  
                     2906  INC_mSx5:
 8BD5 [03] 3F5F      2907       clr     mS                  ; Clear Millisecond counter
 8BD7 [04] 3C60      2908       inc     mSx5                ; Increment 5 Millisecond counter
 8BD9 [03] B660      2909       lda     mSx5                ; Load accumulator with value in
                     2910                                   ; 5 Millesecond counter
 8BDB [02] A132      2911       cmp     #$32                ; Compare it with decimal 50
 8BDD [03] 260E      2912       bne     TIM2CH0_ISR_DONE    ; If the Z bit of CCR is clear,
                     2913                                   ; branch to TIM2CH0_ISR_DONE:
                     2914  
                     2915  ;============================================================================
                     2916  ;************************* 250 Millisecond section **************************
                     2917  ;============================================================================
                     2918  
                     2919  ;***************************************************************************
                     2920  ; - Send the letter 'A' command to update the real time variables.
                     2921  ;***************************************************************************
                     2922  
 8BDF [03] B616      2923       lda     SCS1                    ; Load accumulator with value in SCI
                     2924                                       ; Control Register 1
                     2925                                       ;(Clear transmitter empty bit)
                     2926                                       ;(Clears all by read)
 8BE1 [04] 6E4118    2927       mov     #'A',SCDR               ; Move ASCII'A' to SCI Data Register
                     2928                                       ;(Transmitter is running, so data
                     2929                                       ; shift starts now!)
 8BE4 [03] 3F5C      2930       clr     ByteCnt                 ; Clear "ByteCnt" variable
 8BE6 [04] 6E2A5D    2931       mov     #$2A,ByteGoal           ; Move decimal 42 into "ByteGoal"
                     2932                                       ;(one more than the number of real
                     2933                                       ; time variables for display,41)
                     2934  
                     2935  ;**************************************************************************
                     2936  ; - Enable receiver full interrupt.
                     2937  ;**************************************************************************
                     2938  
 8BE9 [04] 1A14      2939       bset    SCRIE,SCC2     ; Set "SCRIE" bit of SCI Control Register 2
                     2940                              ;(SCRF enabled to generate CPU Interrupt)
                     2941  
                     2942  UPDATE_DONE:
 8BEB [03] 3F60      2943       clr     mSx5           ; Clear 5 Millisecond counter
                     2944  
                     2945  TIM2CH0_ISR_DONE:
 8BED [02] 8A        2946       pulh                  ; Pull value from stack to index register Hi byte
 8BEE [07] 80        2947       rti                   ; Return from interrupt
                     2948  
                     2949  
                     2950  ;***************************************************************************
                     2951  ;
                     2952  ; ---------------- MS_ECU Serial Communications Interface -----------------
                     2953  ;
                     2954  ; Communications are established when a command character is sent, the
                     2955  ; particular character sets the mode:
                     2956  ;
                     2957  ; "A" = Receive realtime variables via txport.(53 bytes)(MS->MV)
                     2958  ;
                     2959  ;***************************************************************************
                     2960  
                     2961  ;***************************************************************************
                     2962  ;===========================================================================
                     2963  ; - SCI Receive Interrupt
                     2964  ;===========================================================================
                     2965  ;***************************************************************************
                     2966  
                     2967  ;***************************************************************************
                     2968  ; - Enter here when have received RS 232 byte
                     2969  ;   (SCRF bit of SCS1 set)
                     2970  ;***************************************************************************
                     2971  
                     2972  SCIRCV_ISR:
 8BEF [02] 8B        2973       pshh                 ; Push value in index register Hi byte to Stack
                     2974  
                     2975  ;***************************************************************************
                     2976  ; - Clear status register to allow next interrupt
                     2977  ;***************************************************************************
                     2978  
 8BF0 [03] B616      2979       lda     SCS1     ; Load accumulator with value in SCI Register 1
                     2980  
                     2981  ;***************************************************************************
                     2982  ; - Transfer received byte from register to buffer
                     2983  ;***************************************************************************
                     2984  
 8BF2 [03] B618      2985       lda     SCDR        ; Load accumulator with value in SCI Data Register
 8BF4 [03] B75E      2986       sta     readbuf     ; Copy to "readbuf" variable
                     2987  
                     2988  ;***************************************************************************
                     2989  ; - We are in "Display" mode, transfer received byte from buffer to real
                     2990  ;   time variable.
                     2991  ;***************************************************************************
                     2992  
                     2993  RCVNG_VAR:
 8BF6 [03] BE5C      2994       ldx     ByteCnt           ; Load index register Lo byte with value in
                     2995                                 ; "ByteCnt" variable
 8BF8 [01] 8C        2996       clrh                      ; Clear index register hi byte
 8BF9 [03] B65E      2997       lda     readbuf           ; Load accumulator with value in "readbuf"
 8BFB [03] E7B4      2998       sta     secl,x            ; Copy to address at "secl", offset in index


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 26
MV_ECU


                     2999                                 ; register Lo byte
                     3000  
                     3001  NEXT_RCV_BYTE:
 8BFD [04] 3C5C      3002       inc     ByteCnt          ; Increment value in "ByteCnt"(ByteCnt=ByteCnt+1)
 8BFF [03] B65C      3003       lda     ByteCnt          ; Load accumulator w3ith value in "ByteCnt"
 8C01 [03] B15D      3004       cmp     ByteGoal         ; Compare value in accumulator (ByteCnt")to
                     3005                                ; value in "ByteGoal" variable
 8C03 [03] 2304      3006       bls     SCIRCV_ISR_DONE  ; If C or Z bits of CCR are set,(A<=M),
                     3007                                ; branch to SCIRCV_ISR_DONE:
                     3008  
                     3009  ;***************************************************************************
                     3010  ; - Done receiving - kill receive interrupt enable
                     3011  ;***************************************************************************
                     3012  
 8C05 [03] 3F5C      3013       clr     ByteCnt           ; Clear "ByteCnt" variable
 8C07 [04] 1B14      3014       bclr    SCRIE,SCC2        ; Clear "SCRIE" bit of SCI Control Register 2
                     3015                                 ;(SCRF not enabled to generate CPU interrupt)
                     3016  
                     3017  SCIRCV_ISR_DONE:
 8C09 [02] 8A        3018       pulh                ; Pull value from stack to index register Hi byte
 8C0A [07] 80        3019       rti                 ; Return from interrupt
                     3020  
                     3021  
                     3022  ;**************************************************************************
                     3023  ;==========================================================================
                     3024  ; - SCI Transmit Interrupt
                     3025  ;==========================================================================
                     3026  ;**************************************************************************
                     3027  
                     3028  ;**************************************************************************
                     3029  ; - Enter here when the RS232 transmit buffer is empty
                     3030  ;   (SCTE bit of SCS1 is set)(Not used)
                     3031  ;**************************************************************************
                     3032  
                     3033  SCITX_ISR:
 8C0B [07] 80        3034       rti                ; Return from interrupt
                     3035  
                     3036  
                     3037  ;**************************************************************************
                     3038  ;==========================================================================
                     3039  ;- Dummy ISR vector ( This should never be called, but, just in case.)
                     3040  ;==========================================================================
                     3041  ;**************************************************************************
                     3042  
                     3043  Dummy:
 8C0C [07] 80        3044       rti     ; Return from interrupt
                     3045  
                     3046  
                     3047  ;***************************************************************************
                     3048  ;
                     3049  ; ---------------------------- SUBROUTINES --------------------------------
                     3050  ;
                     3051  ; - CALC_MAP
                     3052  ; - CALC_MAT
                     3053  ; - CALC_CLT
                     3054  ; - CALC_VOLTS
                     3055  ; - CALC_EGOV
                     3056  ; - CALC_LAMBDA
                     3057  ; - CALC_AFR
                     3058  ; - CALC_DUTY
                     3059  ; - CALC_RPM
                     3060  ; - CALC_RPM_HR
                     3061  ; - CALC_TRIM_ANG
                     3062  ; - CALC_DLY_ANG
                     3063  ; - CALC_TIM_ANG
                     3064  ; - CALC_MON_TIM_ANG
                     3065  ; - CALC_L_HR
                     3066  ; - CALC_KPH1
                     3067  ; - CALC_VS
                     3068  ; - CALC_KM_L
                     3069  ; - DIV_BY_TEN
                     3070  ;
                     3071  ;-------------------------------------------------------------------------
                     3072  ;
                     3073  ; - CONV_8BIT_ASCII
                     3074  ; - CONV_16BIT_ASCII
                     3075  ; - SW0_CHK
                     3076  ; - SW1_CHK
                     3077  ; - DELAY300
                     3078  ; - PRNT_TOPLN_DSP
                     3079  ; - LOAD_SPACE
                     3080  ; - PRINT_LINE
                     3081  ; - GET_VECT_ADDR
                     3082  ; - ADD_A_TO_HX
                     3083  ; - LDA_W_HX_PL_A
                     3084  ; - VFD_START_TOP
                     3085  ; - VFD_START_BOT
                     3086  ; - VFD_SEND
                     3087  ; - Long Delay      (for VFD instruction/data transfer)
                     3088  ; - Short Delay     (for VFD instruction/data transfer)
                     3089  ; - VFD Display
                     3090  ; - CMP_BOTLIN
                     3091  ; - ORD_TABLE_FIND (Ordered Table Search)
                     3092  ; - LININTERP      (Linear Interpolation)
                     3093  ; - UDVD32         (32 x 16 divide)
                     3094  ; - DIVROUND       (Round after 16 x 8 division)
                     3095  ; - UMUL32         (16 x 16 multiply)
                     3096  ;
                     3097  ;***************************************************************************
                     3098  
                     3099  ;***********************************************************************************************
                     3100  ; - This subroutine uses "mapADC" and the "KPAFACTOR4250rjh" table to look up the value of "kpa"
                     3101  ;***********************************************************************************************
                     3102  
                     3103  CALC_MAP:
 8C0D [01] 8C        3104       clrh                         ; Clear index register Hi byte
 8C0E [03] B6B5      3105       lda     mapADC               ; Load accumulator with value in MAP ADC
 8C10 [01] 97        3106       tax                          ; Copy to index register Lo byte
 8C11 [04] D6F400    3107       lda     KPAFACTOR4250rjh,x   ; Load accumulator with value in KPAFACTOR4250rjh table
                     3108                                    ; (offset in index register Lo byte)
 8C14 [03] B7DD      3109       sta     map                  ; Copy to Manifold Air Pressure in Kilopascals
 8C16 [04] 81        3110       rts                          ; Return from subroutine
                     3111  
                     3112  ;***********************************************************************************************
                     3113  ; - This subroutine uses "matADC" and the "thermfactor" table to look up the value of "mat"
                     3114  ;***********************************************************************************************
                     3115  
                     3116  CALC_MAT:
 8C17 [01] 8C        3117       clrh                      ; Clear index register Hi byte
 8C18 [03] B6B6      3118       lda     matADC            ; Load accumulator with value in Manifold Air Temperature ADC
 8C1A [01] 97        3119       tax                       ; Copy to index register Lo byte
 8C1B [04] D6F500    3120       lda     thermfactor,x     ; Load accumulator with value in thermfactor table,
                     3121                                 ; (offset in index register Lo byte(modified for Ford sensor)
 8C1E [03] B7DE      3122       sta     mat               ; Copy to Manifold Air Temp in degreesF+40
 8C20 [04] 81        3123       rts                       ; Return from subroutine
                     3124  
                     3125  ;***********************************************************************************************
                     3126  ; - This subroutine uses "cltADC" and the "thermfactor" table to look up the value of "clt"
                     3127  ;***********************************************************************************************
                     3128  
                     3129  CALC_CLT:
 8C21 [01] 8C        3130       clrh                      ; Clear index register Hi byte
 8C22 [03] B6B7      3131       lda     cltADC            ; Load accumulator with value in EngineTemperature ADC
 8C24 [01] 97        3132       tax                       ; Copy to index register Lo byte
 8C25 [04] D6F500    3133       lda     thermfactor,x     ; Load accumulator with value in thermfactor table,
                     3134                                 ; (offset in index register Lo byte(modified for Ford sensor))


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 27
MV_ECU


 8C28 [03] B7DF      3135       sta     clt               ; Copy to Engine Temp in degreesF+40
 8C2A [04] 81        3136       rts                       ; Return from subroutine
                     3137  
                     3138  ;***********************************************************************************************
                     3139  ; - This subroutine calculates battery voltage * 10 from battery
                     3140  ;   voltage ADC
                     3141  ;   Batt ADC/255 * 30 = battery voltage
                     3142  ;   (battADC * 300)/255  = volts(battery voltage * 10)(for integer math)
                     3143  ;**********************************************************************************************
                     3144  
                     3145  CALC_VOLTS:
                     3146  
                     3147  ;***************************************************************************
                     3148  ; - Load variables and multiply to obtain the dividend
                     3149  ;***************************************************************************
                     3150  
 8C2B [03] 3F6C      3151       clr     tmp4       ; Clear tmp4
 8C2D [03] B6B9      3152       lda     battADC    ; Load accumulator with value in Battery voltage ADC
 8C2F [03] B76B      3153       sta     tmp3       ; Copy to tmp3
 8C31 [02] A601      3154       lda     #$1        ; Load accumulator with decimal 300 Hi byte(1 x 256 = 256)
 8C33 [03] B76A      3155       sta     tmp2       ; Copy to tmp4
 8C35 [02] A62C      3156       lda     #$2C       ; Load accumulator with decimal 300 Lo byte (44)
 8C37 [03] B769      3157       sta     tmp1       ; Copy to tmp1
 8C39 [05] CD92FD    3158       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3159  
                     3160  ;****************************************************************************
                     3161  ; - Load 16 bit dividend ("battADC" x 300) and divide by 255
                     3162  ;****************************************************************************
                     3163  
 8C3C [03] B66E      3164       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8C3E [02] 87        3165       psha               ; Push value in accumulator to stack
 8C3F [02] 8A        3166       pulh               ; Pull value from stack to index register Hi byte((A)to(H))
 8C40 [03] B66D      3167       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8C42 [02] AEFF      3168       ldx     #$FF       ; Load index register Lo byte with decimal 255
 8C44 [07] 52        3169       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8C45 [05] CD92EA    3170       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8C48 [03] B7E0      3171       sta     volts      ; Copy to "volts"(battery voltage x 10)
 8C4A [04] 81        3172       rts                ; Return from subroutine
                     3173  
                     3174  ;***********************************************************************************************
                     3175  ; - This subroutine calculates Exhaust Gas Oxygen sensor voltage * 10 from Exhaust Gas Oxygen
                     3176  ;   sensor ADC
                     3177  ;   egoADC/255 * 5 = ego voltage
                     3178  ;   (egoADC * 50)/255  = egoV(ego voltage * 10)(for integer math)
                     3179  ;**********************************************************************************************
                     3180  
                     3181  CALC_EGOV:
 8C4B [02] A632      3182       lda     #$32       ; Load accumulator with decimal 50(5 x 10 for integer math)
 8C4D [01] 97        3183       tax                ; Transfer value in accumulator to index register Lo byte
 8C4E [03] B6BA      3184       lda     egoADC     ; Load accumulator with value in "egoADC"
 8C50 [05] 42        3185       mul                ; Multiply X:A<-(X)x(A)
 8C51 [02] 89        3186       pshx               ; Push value in index register Lo byte to stack
 8C52 [02] 8A        3187       pulh               ; Pull value from stack to index register Hi byte((X)to(H))
 8C53 [02] AEFF      3188       ldx     #$FF       ; Load index register Lo byte with decimal 255
 8C55 [07] 52        3189       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8C56 [05] CD92EA    3190       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8C59 [03] B7E1      3191       sta     egoV       ; Copy to "egoV"(ego voltage  x 10)
 8C5B [04] 81        3192       rts                ; Return from subroutine
                     3193  
                     3194  
                     3195  ;***********************************************************************************************
                     3196  ; - This subroutine uses "egoADC" and the DIYWBLAMBDA.inc table to look up the value of
                     3197  ;   "lambda"(LAMBDA x 10)
                     3198  ;***********************************************************************************************
                     3199  
                     3200  CALC_LAMBDA:
 8C5C [01] 8C        3201       clrh                       ; Clear index register Hi byte
 8C5D [03] B6BA      3202       lda     egoADC             ; Load accumulator with value in ego ADC
 8C5F [01] 97        3203       tax                        ; Copy to index register Lo byte
 8C60 [04] D6F300    3204       lda     DIYWBLAMBDA,x      ; Load accumulator with value in DIYWBLAMBDA.inc table
                     3205                                  ; (offset in index register Lo byte)
 8C63 [03] B7E2      3206       sta     lambda             ; Copy to "lambda"
 8C65 [04] 81        3207       rts                        ; Return from subroutine
                     3208  
                     3209  ;***********************************************************************************************
                     3210  ; - This subroutine uses "lambda" to calculate the value of "afr"(AFR x 10)
                     3211  ;   AFR = LAMBDA x 14.7
                     3212  ;   afr = (lambda x 147) / 100(for integer math)
                     3213  ;***********************************************************************************************
                     3214  
                     3215  CALC_AFR:
 8C66 [02] A693      3216       lda     #$93       ; Load accumulator with decimal 147(14.7 x 10 for integer math)
 8C68 [01] 97        3217       tax                ; Transfer value in accumulator to index register Lo byte
 8C69 [03] B6E2      3218       lda     lambda     ; Load accumulator with value in "lambda"
 8C6B [05] 42        3219       mul                ; Multiply X:A<-(X)x(A)
 8C6C [02] 89        3220       pshx               ; Push value in index register Lo byte to stack
 8C6D [02] 8A        3221       pulh               ; Pull value from stack to index register Hi byte((X)to(H))
 8C6E [02] AE64      3222       ldx     #$64       ; Load index register Lo byte with decimal 100
 8C70 [07] 52        3223       div                ; Divide A<-(H:A)/(X);H<-Remainder
 8C71 [05] CD92EA    3224       jsr     DIVROUND   ; Jump to subroutine at DIVROUND:(round result)
 8C74 [03] B7E3      3225       sta     afr        ; Copy to "afr"(AFR x 10)
 8C76 [04] 81        3226       rts                ; Return from subroutine
                     3227  
                     3228  ;***********************************************************************************************
                     3229  ; - Duty cycle % rounded, "Duty", is calculated by multiplying the pulse width divided by
                     3230  ;   the number of squirts per cycle x 100, and dividing the product by the cycle time between
                     3231  ;   ignition events (tachH:tachL ).
                     3232  ;   ((pw x 10000) / 2) / tachH:tachL = duty
                     3233  ;   or
                     3234  ;   (pw x 5000) / tachH:tachL = duty
                     3235  ;
                     3236  ;***********************************************************************************************
                     3237  
                     3238  CALC_DUTY:
                     3239  
                     3240  ;***************************************************************************
                     3241  ; - Load variables and multiply to obtain the dividend
                     3242  ;***************************************************************************
                     3243  
 8C77 [03] 3F6C      3244       clr     tmp4       ; Clear tmp4
 8C79 [03] B6C8      3245       lda     pw         ; Load accumulator with value in "pw"
 8C7B [03] B76B      3246       sta     tmp3       ; Copy to tmp3
 8C7D [02] A613      3247       lda     #$13        ; Load accumulator with decimal 19 (19 x 256 = 4864)
 8C7F [03] B76A      3248       sta     tmp2       ; Copy to tmp4
 8C81 [02] A688      3249       lda     #$88       ; Load accumulator with decimal 136 (136 + 4864 = 5000)
 8C83 [03] B769      3250       sta     tmp1       ; Copy to tmp1
 8C85 [05] CD92FD    3251       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3252  
                     3253  ;****************************************************************************
                     3254  ; - Load 24 bit dividend (5000 x "pw")
                     3255  ;****************************************************************************
                     3256  
 8C88 [03] 3F61      3257       clr     intacc1    ; Clear intacc1
 8C8A [03] B66F      3258       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8C8C [03] B762      3259       sta     intacc1+1  ; Copy to intacc1+1
 8C8E [03] B66E      3260       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8C90 [03] B763      3261       sta     intacc1+2  ; Copy to intacc1+2
 8C92 [03] B66D      3262       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8C94 [03] B764      3263       sta     intacc1+3  ; Copy to intacc1+3
                     3264  
                     3265  ;****************************************************************************
                     3266  ; - Load 16 bit divisor (tachH:tachL) and divide
                     3267  ;****************************************************************************
                     3268  
 8C96 [03] B6CC      3269       lda     tachH      ; Load accumulator with "tachH"(Pip period) Hi byte
 8C98 [03] B765      3270       sta     intacc2    ; Copy to intacc2


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 28
MV_ECU


 8C9A [03] B6CD      3271       lda     tachL      ; Load accumulator with "tachL"(Pip period) Lo byte
 8C9C [03] B766      3272       sta     intacc2+1  ; Copy to intacc2+1 variable
 8C9E [05] CD925E    3273       jsr     udvd32     ; jump to udvd32 subroutine
                     3274                          ; (intacc1:32 = intacc1:32 / intacc2:16)
 8CA1 [03] B664      3275       lda     intacc1+3  ; Load accumulator with value in intacc1+3 variable
                     3276                          ; (8-bit result)
 8CA3 [03] BE66      3277       ldx     intacc2+1  ; Load index retgister Lo byte with value in intacc2+1
                     3278                          ; (8 bit remainder)
 8CA5 [05] CD92EA    3279       jsr     DIVROUND   ; Jump to "DIVROUND" subroutine (round result)
                     3280  
                     3281  
                     3282  ;****************************************************************************
                     3283  ; - Save the result as "duty"
                     3284  ;****************************************************************************
                     3285  
 8CA8 [03] B7E4      3286       sta     duty       ; Copy to "duty"(DUTY CYCLE x 10)
 8CAA [04] 81        3287       rts                ; Return from subroutine
                     3288  
                     3289  ;***********************************************************************************************
                     3290  ; - This subroutine uses "rpm20" to calculate engine RPM to 4 digits for display
                     3291  ;***********************************************************************************************
                     3292  
                     3293  CALC_RPM:
 8CAB [03] BEC4      3294       ldx     rpm20        ; Load index register Lo byte with value in engine RPM/20
 8CAD [02] A614      3295       lda     #$14         ; Load accumulator with decimal 20
 8CAF [05] 42        3296       mul                  ; Multiply (X:A)<-(X)x(A)
 8CB0 [03] B7F7      3297       sta     rpmL         ; Copy value in accumulator to engine RPM Hi Byte
 8CB2 [02] 89        3298       pshx                 ; Push value in index register Lo byte to stack
 8CB3 [02] 86        3299       pula                 ; Pull value in stack to accumulator(X to A)
 8CB4 [03] B7F6      3300       sta     rpmH         ; Copy to engine RPM Hi byte
 8CB6 [04] 81        3301       rts                  ; Return from subroutine
                     3302  
                     3303  ;***********************************************************************************************
                     3304  ; - This subroutine uses "pippprdH:pippprdL" to calculate engine RPM to 4 digits for display
                     3305  ;   "pippprdH:pippprdL" is the 1uS time period between PIP(IRQ) signals. Rollover occurs at
                     3306  ;   305.18 RPM 6 cyl, and 228.885 RPM 8 cyl so we ignore any engine speeds less than 320 RPM
                     3307  ;   for 6 cyl($140) and 240 RPM for 8 cyl($F0)
                     3308  ;***********************************************************************************************
                     3309  
                     3310  CALC_RPM_HR:
                     3311  
                     3312  ;***********************************************************************************************
                     3313  ;
                     3314  ; -------------------------------------- RPM CALCULATION ---------------------------------------
                     3315  ;
                     3316  ; RPM = CONSTANT/PERIOD
                     3317  ; Where:
                     3318  ; RPM     = Engine RPM
                     3319  ; RPM_K   = 16 bit constant using 1uS clock tick (1mhz)
                     3320  ;           ((1,000,000 tick per second * 60 seconds per minute)/number of cylinders
                     3321  ; RPM_P   = 16 bit period count between IRQ pulsed lines in 1uS resolution
                     3322  ;
                     3323  ;   RPM_K
                     3324  ;   ----- = RPM
                     3325  ;   RPM_P
                     3326  ;
                     3327  
                     3328  ; Where:
                     3329  ; rpmhrH:rpmhrL             = Engine RPM
                     3330  ; rpmK:rpmK+1:rpmK+2:rpmK+3 = 32 bit constant using 1uS clock tick
                     3331  ;*; pippprdH:pippprdL         = 16 bit predicted period count between IRQ pulsed lines in 1uS res
                     3332  ; tachH:tachL               = 16 bit period count between IRQ pulsed lines in 1uS resolution
                     3333  ;
                     3334  ;   rpmk:rpmk+1:rpmk+2:rpmk+3
                     3335  ;   ------------------------- = rpmhrH:rpmhrL
                     3336  ;*;       pippprdH:pippprdL
                     3337  ;       tachH:tachL
                     3338  ;
                     3339  ; 6cyl 4stroke RPMK = ((1,000,000*60)/3) = 20,000,000($01312D00)
                     3340  ; 8cyl 4stroke RPMK = ((1,000,000*60)/4) = 15,000,000($00E4E1C0)
                     3341  ; 6cyl RPM resolution is ~.05@~1000, ~.20@~2000, ~.76@~3000, and ~1.28@~5000
                     3342  ; 8cyl RPM resolution is ~.06@~1000, ~.27@~2000, ~.61@~3000, and ~1.72@~5000
                     3343  ;***********************************************************************************************
                     3344  
 8CB7 [03] B6C4      3345       lda     rpm20             ; Load accumulator with value in "rpm20"
 8CB9 [02] A110      3346       cmp     #$10              ; Compare with decimal 16(320 RPM)
 8CBB [03] 2406      3347       bhs     RPM_COMP          ; If (A)=>(M) branch to RPM_COMP
 8CBD [03] 3FF9      3348       clr     rpmhrL            ; Clear "rpmhrL"
 8CBF [03] 3FF8      3349       clr     rpmhrH            ; Clear "rpmhrH"
 8CC1 [03] 201F      3350       bra     RPM_CALC_DONE     ; Branch to RPM_CALC_DONE:
                     3351  
                     3352  RPM_COMP:
                     3353  
 8CC3 [02] A601      3354       lda     #$01          ; Load accumulator with $01 ("rpmK" 6 cyl)
 8CC5 [03] B761      3355       sta     intacc1       ; Copy to intacc1 variable
 8CC7 [02] A631      3356       lda     #$31          ; Load accumulator with $31 ("rpmK+1" 6 cyl)
 8CC9 [03] B762      3357       sta     intacc1+1     ; Copy to intacc1+1 variable
 8CCB [02] A62D      3358       lda     #$2D          ; Load accumulator with $2D ("rpmK+2" 6 cyl)
 8CCD [03] B763      3359       sta     intacc1+2     ; Copy to "intacc1+2
 8CCF [02] A600      3360       lda     #$00          ; Load accumulator with $00 ("rpmK+3" 6 cyl)
 8CD1 [03] B764      3361       sta     intacc1+3     ; Copy to "intacc1+3"
                     3362  ;*     ldhx    pippprdH      ; Load index register with value in PIP Period Predicted
 8CD3 [04] 55CC      3363       ldhx    tachH         ; Load index register with value in "tachH:tachL"(PIP Period)
 8CD5 [04] 3565      3364       sthx    intacc2       ; Copy value in index register to intacc2 variable
 8CD7 [05] CD925E    3365       jsr     udvd32        ; Jump to subroutine udvd32 (32x16 divide)
 8CDA [03] B664      3366       lda     intacc1+3     ; Load accumulator with value in intacc1+3(result Lo byte)
 8CDC [03] B7F9      3367       sta     rpmhrL        ; Copy to "rpmhrL"
 8CDE [03] B663      3368       lda     intacc1+2     ; Load accumulator with value in intacc1+2(result Mid Lo byte)
 8CE0 [03] B7F8      3369       sta     rpmhrH        ; Copy to "rpmhrH"
                     3370  
                     3371  RPM_CALC_DONE:
 8CE2 [04] 81        3372       rts                   ; Return from subroutine
                     3373  
                     3374  
                     3375  ;***********************************************************************************************
                     3376  ; - This subroutine calculates "trmAng"(Ignition Trim Angle)
                     3377  ;   trmAng = trmAngFac / 255 x 120
                     3378  ;   trmAng = trmAngFac * 120 /255 (for integer math)
                     3379  ;***********************************************************************************************
                     3380  
                     3381  CALC_TRIM_ANG:
 8CE3 [02] A678      3382       lda     #$78           ; Load accumulator with decimal 120
 8CE5 [01] 97        3383       tax                    ; Transfer value in accumulator to index register Lo byte
 8CE6 [03] B6CF      3384       lda     trmAngFac      ; Load accumulator with value in "trmAngFac"
 8CE8 [05] 42        3385       mul                    ; Multiply X:A<-(X)x(A)
 8CE9 [02] 89        3386       pshx                   ; Push value in index register Lo byte to stack
 8CEA [02] 8A        3387       pulh                   ; Pull value from stack to index register Hi byte((X)to(H))
 8CEB [02] AEFF      3388       ldx     #$FF           ; Load index register Lo byte with decimal 255
 8CED [07] 52        3389       div                    ; Divide A<-(H:A)/(X);H<-Remainder
 8CEE [05] CD92EA    3390       jsr     DIVROUND       ; Jump to subroutine at DIVROUND:(round result)
 8CF1 [03] B7E5      3391       sta     trmAng         ; Copy to "trmAng"(Ignition Trim Angle)
 8CF3 [04] 81        3392       rts                    ; Return from subroutine
                     3393  
                     3394  
                     3395  ;***********************************************************************************************
                     3396  ; - This subroutine calculates "dlyAng"(Ignition Delay Angle)
                     3397  ;   dlyAng = spkAngFac / 255 x 120 + trmAng
                     3398  ;   dlyAng = spkAngFac * 120 /255 + trmAng(for integer math)
                     3399  ;***********************************************************************************************
                     3400  
                     3401  CALC_DLY_ANG:
 8CF4 [02] A678      3402       lda     #$78           ; Load accumulator with decimal 120
 8CF6 [01] 97        3403       tax                    ; Transfer value in accumulator to index register Lo byte
 8CF7 [03] B6CE      3404       lda     spkAngFac      ; Load accumulator with value in "spkAngFac"
 8CF9 [05] 42        3405       mul                    ; Multiply X:A<-(X)x(A)
 8CFA [02] 89        3406       pshx                   ; Push value in index register Lo byte to stack


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 29
MV_ECU


 8CFB [02] 8A        3407       pulh                   ; Pull value from stack to index register Hi byte((X)to(H))
 8CFC [02] AEFF      3408       ldx     #$FF           ; Load index register Lo byte with decimal 255
 8CFE [07] 52        3409       div                    ; Divide A<-(H:A)/(X);H<-Remainder
 8CFF [05] CD92EA    3410       jsr     DIVROUND       ; Jump to subroutine at DIVROUND:(round result)
 8D02 [03] BBE5      3411       add     trmAng         ; Add A<-(A)+(M)
 8D04 [03] B7E6      3412       sta     dlyAng         ; Copy to "dlyAng"(Ignition Delay Angle)
 8D06 [04] 81        3413       rts                    ; Return from subroutine
                     3414  
                     3415  
                     3416  ;***********************************************************************************************
                     3417  ; - This subroutine calculates "timAng"(Ignition Timing Angle)
                     3418  ;   timAng = 120 - dlyAng + 10
                     3419  ;***********************************************************************************************
                     3420  
                     3421  CALC_TIM_ANG:
 8D07 [02] A678      3422       lda     #$78       ; Load accumulator with decimal 120
 8D09 [03] B0E6      3423       sub     dlyAng     ; Subtract A<(A)-(M)
 8D0B [02] AB0A      3424       add     #$0A       ; Add A<-(A)+(M) decimal 10
 8D0D [03] B7E7      3425       sta     timAng     ; Copy result to "timAng"(Ignition Timing Angle)
 8D0F [04] 81        3426       rts                ; Return from subroutine
                     3427  
                     3428  ;*;***********************************************************************************************
                     3429  ;*;
                     3430  ;*; --------------- Computation of Monitored Ignition Timing -----------------
                     3431  ;*;
                     3432  ;*; In the Keyboard interrupt section, we grabbed a timestamp when the coil
                     3433  ;*; actually fired. From this, we subtracted the timestamp of the PIP signal
                     3434  ;*; to determine the Monitor Delay Period. (this should be the same as the
                     3435  ;*; Delay Period.) We can do the spark calculations in reverse to determine
                     3436  ;*; the Monitor Delay Angle Factor. The formula for determining the Delay
                     3437  ;*; Period is:
                     3438  ;*; PIP Period Predicted * Delay Angle Factor / PIP Angle Factor = Delay
                     3439  ;*; Period.
                     3440  ;*; So, the Monitor Period * PIP Angle Factor / PIP Period predicted =
                     3441  ;*; Monitor Delay Angle Factor.
                     3442  ;*; The Monitor Delay Angle Factor * PIP Angle  / PIP Angle Factor =
                     3443  ;*; Monitor Delay Angle.
                     3444  ;*; The PIP Angle - Monitor Delay Angle = Monitor Firing Angle
                     3445  ;*; The Monitor Firing Angle + Static Timing Angle(10 degrees) =
                     3446  ;*; Monitored Ignition Timing in degrees BTDC.
                     3447  ;*;
                     3448  ;*; monpH:monpL * $01:00 / pippprdH:pippprdL = monDlyAngFac
                     3449  ;*; monDlyAngFac * PIP_ANGLE / $01:00 = monDlyAng
                     3450  ;*; PIP_ANGLE - monDlyAng = monFrngAng
                     3451  ;*; monFrngAng + STATIC_TIMING_ANGLE = monTimAng
                     3452  ;*;
                     3453  ;*;***********************************************************************************************
                     3454  ;***********************************************************************************************
                     3455  ;
                     3456  ; --------------- Computation of Monitored Ignition Timing -----------------
                     3457  ;
                     3458  ; In the Keyboard interrupt section, we grabbed a timestamp when the coil
                     3459  ; actually fired. From this, we subtracted the timestamp of the PIP signal
                     3460  ; to determine the Monitor Delay Period. (this should be the same as the
                     3461  ; Delay Period.) We can do the spark calculations in reverse to determine
                     3462  ; the Monitor Delay Angle Factor. The formula for determining the Delay
                     3463  ; Period is:
                     3464  ; PIP Period(tachH:tachL) * Delay Angle Factor / PIP Angle Factor = Delay
                     3465  ; Period.
                     3466  ; So, the Monitor Period * PIP Angle Factor / PIP Period =
                     3467  ; Monitor Delay Angle Factor.
                     3468  ; The Monitor Delay Angle Factor * PIP Angle  / PIP Angle Factor =
                     3469  ; Monitor Delay Angle.
                     3470  ; The PIP Angle - Monitor Delay Angle = Monitor Firing Angle
                     3471  ; The Monitor Firing Angle + Static Timing Angle(10 degrees) =
                     3472  ; Monitored Ignition Timing in degrees BTDC.
                     3473  ;
                     3474  ; monpH:monpL * $01:00 / tachH:tachL = monDlyAngFac
                     3475  ; monDlyAngFac * PIP_ANGLE / $01:00 = monDlyAng
                     3476  ; PIP_ANGLE - monDlyAng = monFrngAng
                     3477  ; monFrngAng + STATIC_TIMING_ANGLE = monTimAng
                     3478  ;
                     3479  ;***********************************************************************************************
                     3480  
                     3481  ;***********************************************************************************************
                     3482  ; - Calculate Monitored ignition timing in degrees BTDC.
                     3483  ;***********************************************************************************************
                     3484  
                     3485  CALC_MON_TIM_ANG:
                     3486  
                     3487  ;***********************************************************************************************
                     3488  ; - Check for minimum RPM for ignition periods to be meaningfull for ignition calculations
                     3489  ;***********************************************************************************************
                     3490  
 8D10 [03] B6C4      3491       lda     rpm20             ; Load accumulator with value in "rpm20"
 8D12 [02] A110      3492       cmp     #$10              ; Compare with decimal 16(320 RPM)
 8D14 [03] 2404      3493       bhs     LOAD_PIP_PRD      ; If (A)=>(M) branch to LOAD_PIP_PRD
 8D16 [03] 3FE8      3494       clr     monTimAng         ; Clear "monTimAng"
 8D18 [03] 2030      3495       bra     CALC_MTA_DONE     ; Branch to CALC_MTA_DONE:
                     3496  
                     3497  
                     3498  ;***********************************************************************************************
                     3499  ;*; - Load 16 bit divisor(PIP Period predicted)
                     3500  ; - Load 16 bit divisor"tachH:tachL"(PIP Period)
                     3501  ;***********************************************************************************************
                     3502  
                     3503  LOAD_PIP_PRD:
                     3504  ;*     lda     pippprdH     ; Load accumulator with value in PIP period Hi byte predicted
 8D1A [03] B6CC      3505       lda     tachH        ; Load accumulator with value in "tachH"(PIP period) Hi byte
 8D1C [03] B765      3506       sta     intacc2      ; Copy to intacc2 variable
                     3507  ;*     lda     pippprdL     ; Load accumulator with value in PIP period  Lo byte predicted
 8D1E [03] B6CD      3508       lda     tachL        ; Load accumulator with value in "tachL"(PIP period) Lo byte
 8D20 [03] B766      3509       sta     intacc2+1    ; Copy to intacc2+1 variable
 8D22 [03] 3F67      3510       clr     intacc2+2    ; Clear intacc2+2 variable
 8D24 [03] 3F68      3511       clr     intacc2+3    ; Clear intacc2+3 variable
                     3512  
                     3513  ;***********************************************************************************************
                     3514  ; - Load 24 bit dividend(Monitor Period * 256) and divide
                     3515  ;***********************************************************************************************
                     3516  
 8D26 [03] 3F61      3517       clr     intacc1         ; Clear intacc1 variable
 8D28 [03] B6D4      3518       lda     monpH           ; Load accumulator with value in "monpH"
 8D2A [03] B762      3519       sta     intacc1+1       ; Copy  to intacc1+1 variable
 8D2C [03] B6D5      3520       lda     monpL           ; Load accumulator with value in "monpL"
 8D2E [03] B763      3521       sta     intacc1+2       ; Copy to intacc1+2 variable
 8D30 [03] 3F64      3522       clr     intacc1+3       ; Clear intacc1+3 variable(multiply by 256)
 8D32 [05] CD925E    3523       jsr     udvd32          ; jump to udvd32 subroutine (intacc1:32 = intacc1:32 / intacc2:16)
 8D35 [03] B664      3524       lda     intacc1+3       ; Load accumulator with value in intacc1+3 variable
                     3525                               ; (8-bit result)
 8D37 [03] BE66      3526       ldx     intacc2+1       ; Load index retgister Lo byte with value in intacc2+1
                     3527                               ; (8 bit remainder)
                     3528  ;*     jsr     DIVROUND        ; Jump to "DIVROUND" subroutine (round result)
 8D39 [03] B7F3      3529       sta     monDlyAngFac    ; Copy result to Monitor Delay Angle Factor variable
                     3530  
                     3531  ;***********************************************************************************************
                     3532  ; - Multiply by PIP Angle and divide by 256(6cyl PIP Angle = 120)
                     3533  ;***********************************************************************************************
                     3534  
 8D3B [02] AE78      3535       ldx     #$78            ; Load index register Lo byte with "PIP Angle"(decimal 120)
 8D3D [05] 42        3536       mul                     ; Multiply (X:A)<-(X)*(A)
 8D3E [03] BFF4      3537       stx     monDlyAng       ; Copy to Monitor Delay Angle variable
                     3538  
                     3539  ;***********************************************************************************************
                     3540  ; - Calculate "monTimAng"
                     3541  ;***********************************************************************************************
                     3542  


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 30
MV_ECU


 8D40 [02] A678      3543       lda     #$78            ; Load index register Lo byte with "PIP Angle"(decimal 120)
 8D42 [03] B0F4      3544       sub     monDlyAng       ; Subtract (A<-(A)-(M))
 8D44 [03] B7F5      3545       sta     monFrngAng      ; Copy to Monitor Firing Angle variable
 8D46 [02] AB0A      3546       add     #$0A            ; Add (A)<-(A)+(M) Static Timing Angle (always 10 degrees)
 8D48 [03] B7E8      3547       sta     monTimAng       ; Copy to Measured ignition timing in degrees BTDC variable
                     3548  
                     3549  CALC_MTA_DONE:
 8D4A [04] 81        3550       rts                     ; Return from subroutine
                     3551  
                     3552  ;***********************************************************************************************
                     3553  ; - This subroutine calculates "ltrHrH:ltrHrL"(Fuel burn in Litres/Hour over a 1 second period
                     3554  ;   x 10) using the variables "fdSecH:fdSecL" which is the accumulated fuel delivery injector
                     3555  ;   pulse width over a 1 second period, and time.
                     3556  ;   Fuel Burn Rate = inj on time per sec * inj bank flow litres per sec * 3600
                     3557  ;   Fuel Burn Rate = (fdSecH:fdSecL) * .0000009985 * 3600
                     3558  ;   Fuel Burn Rate = (fdSecH:fdSecL) * .0035946
                     3559  ;   ltrHr = (fdSecH:fdSecL) * .035946
                     3560  ;   ltrHr = (fdSecH:fdSecL) * 359 / 1000(for integer math)
                     3561  ;
                     3562  ; - REVISED 4/13/12: Configurable constants from Megasquirt, BnkflowHmv:BnkflowLmv, are now
                     3563  ;   used instead of hard coded flow rate of 359 to fine tune calculations.
                     3564  ;
                     3565  ;***********************************************************************************************
                     3566  
                     3567  CALC_L_HR:
                     3568  
                     3569  ;***************************************************************************
                     3570  ; - Load variables and multiply to obtain the dividend
                     3571  ;***************************************************************************
                     3572  
 8D4B [03] B6CA      3573       lda     fdSecH     ; Load accumulator with value in "fdSecH"
 8D4D [03] B76C      3574       sta     tmp4       ; Copy to tmp4
 8D4F [03] B6CB      3575       lda     fdSecL     ; Load accumulator with value in "fdSecL"
 8D51 [03] B76B      3576       sta     tmp3       ; Copy to tmp3
                     3577  ;*     lda     #$01       ; Load accumulator with decimal 359 Hi byte
                     3578  ;*                        ; (1 x 256 = 256)
 8D53 [03] B6DB      3579       lda     BnkflowHmv ; Load accumulator with bank flow rate Hi byte
 8D55 [03] B76A      3580       sta     tmp2       ; Copy to tmp4
                     3581  ;*     lda     #$67       ; Load accumulator with decimal 359 Lo byte
                     3582  ;*                        ; (113)
 8D57 [03] B6DC      3583       lda     BnkflowLmv ; Load accumulator with bank flow rate Lo byte
 8D59 [03] B769      3584       sta     tmp1       ; Copy to tmp1
 8D5B [05] CD92FD    3585       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3586  
                     3587  ;****************************************************************************
                     3588  ; - Load 32 bit dividend (fdSecH:fdSecL x 355)
                     3589  ;****************************************************************************
                     3590  
 8D5E [03] B670      3591       lda     tmp8       ; Load accumulator with value in tmp8 (result Hi byte)
 8D60 [03] B761      3592       sta     intacc1    ; Copy to intacc1
 8D62 [03] B66F      3593       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8D64 [03] B762      3594       sta     intacc1+1  ; Copy to intacc1+1
 8D66 [03] B66E      3595       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8D68 [03] B763      3596       sta     intacc1+2  ; Copy to intacc1+2
 8D6A [03] B66D      3597       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8D6C [03] B764      3598       sta     intacc1+3  ; Copy to intacc1+3
                     3599  
                     3600  ;****************************************************************************
                     3601  ; - Load 16 bit divisor (1000) and divide
                     3602  ;****************************************************************************
                     3603  
 8D6E [02] A603      3604       lda     #$03       ; Load accumulator with decimal 1000 Hi byte
                     3605                          ; (3 x 256 = 768)
 8D70 [03] B765      3606       sta     intacc2    ; Copy to intacc2
 8D72 [02] A6E8      3607       lda     #$E8       ; Load accumulator with decimal 1000 Lo byte
                     3608                          ; (232)
 8D74 [03] B766      3609       sta     intacc2+1  ; Copy to intacc2+1 variable
 8D76 [05] CD925E    3610       jsr     udvd32     ; jump to udvd32 subroutine
                     3611                          ; (intacc1:32 = intacc1:32 / intacc2:16)
                     3612  
                     3613  ;****************************************************************************
                     3614  ; - Save the result as "ltrHrH:ltrHrL"
                     3615  ;****************************************************************************
                     3616  
 8D79 [03] B664      3617       lda     intacc1+3  ; Load accumulator with value in intacc1+3
                     3618                          ; (quotient Lo byte)
 8D7B [03] B7EA      3619       sta     ltrHrL     ; Copy to "ltrHrH"(Litre/Hr x10 Hi byte)
 8D7D [03] B663      3620       lda     intacc1+2  ; Load accumulator with value in intacc1+2
                     3621                          ; (quotient Mid Lo byte)
 8D7F [03] B7E9      3622       sta     ltrHrH     ; Copy to "ltrHrH"(Litre/Hr x10 Lo byte)
 8D81 [04] 81        3623       rts                ; Return from subroutine
                     3624  
                     3625  
                     3626  ;***************************************************************************
                     3627  ; - This subroutine calculates vehicle speed in KpH to high resolution,
                     3628  ; but it is only updated every second and rollover occurs at 184.61 kph
                     3629  ;
                     3630  ; Vehicle speed in KM/Hr is the 8 bit variable kph1. It is calculated
                     3631  ; by using odoSec. Each count on odoSec represents .000201167km per
                     3632  ; Second, or 0.7242km per hour
                     3633  ; odoSec x .7242 = kph1, or, for integer math:
                     3634  ; (odoSec x 7242) / 1000 = kph1
                     3635  ;***************************************************************************
                     3636  
                     3637  CALC_KPH1:
                     3638  
                     3639  ;***************************************************************************
                     3640  ; - Load variables and multiply to obtain the dividend
                     3641  ;***************************************************************************
                     3642  
 8D82 [03] 3F6C      3643       clr     tmp4       ; Clear tmp4
 8D84 [03] B6D1      3644       lda     odoSec     ; Load accumulator with value in
                     3645                          ; Odometer counts over last i second
 8D86 [03] B76B      3646       sta     tmp3       ; Copy to tmp3
 8D88 [02] A61C      3647       lda     #$1C       ; Load accumulator with decimal 7242 Hi byte
                     3648                          ; (28 x 256 = 7168)
 8D8A [03] B76A      3649       sta     tmp2       ; Copy to tmp4
 8D8C [02] A64A      3650       lda     #$4A       ; Load accumulator with decimal 7242 Lo byte
                     3651                          ; (74)
 8D8E [03] B769      3652       sta     tmp1       ; Copy to tmp1
 8D90 [05] CD92FD    3653       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3654  
                     3655  ;****************************************************************************
                     3656  ; - Load 24 bit dividend (odoSec x 7242)
                     3657  ;****************************************************************************
                     3658  
 8D93 [03] 3F61      3659       clr     intacc1    ; Clear intacc1
 8D95 [03] B66F      3660       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8D97 [03] B762      3661       sta     intacc1+1  ; Copy to intacc1+1
 8D99 [03] B66E      3662       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8D9B [03] B763      3663       sta     intacc1+2  ; Copy to intacc1+2
 8D9D [03] B66D      3664       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8D9F [03] B764      3665       sta     intacc1+3  ; Copy to intacc1+3
                     3666  
                     3667  ;****************************************************************************
                     3668  ; - Load 16 bit divisor (decimal 1000) and divide
                     3669  ;****************************************************************************
                     3670  
 8DA1 [02] A603      3671       lda     #$3        ; Load accumulator with decimal 1000 Hi byte
                     3672                          ; (3 x 256 = 768)
 8DA3 [03] B765      3673       sta     intacc2    ; Copy to intacc2
 8DA5 [02] A6E8      3674       lda     #$E8       ; Load accumulator with decimal 1000 Lo byte
                     3675                          ; (232)
 8DA7 [03] B766      3676       sta     intacc2+1  ; Copy to intacc2+1 variable
 8DA9 [05] CD925E    3677       jsr     udvd32     ; jump to udvd32 subroutine
                     3678                          ; (intacc1:32 = intacc1:32 / intacc2:16)


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 31
MV_ECU


                     3679  
                     3680  ;***************************************************************************
                     3681  ; - Load the 16 bit dividend (result from above)
                     3682  ;***************************************************************************
                     3683  
 8DAC [03] B663      3684       lda     intacc1+2      ; Load accumulator with value in "intacc1+2(result mid Lo byte)
 8DAE [02] 87        3685       psha                   ; Push value in accumulator to stack
 8DAF [02] 8A        3686       pulh                   ; Pull value in stack to index register Hi byte(A to H)
 8DB0 [03] B664      3687       lda     intacc1+3      ; Load accumulator with value in "intacc1+3(result Lo byte
                     3688  
                     3689  ;****************************************************************************
                     3690  ; - Load the 8 bit dividend and divide by 10
                     3691  ;****************************************************************************
                     3692  
 8DB2 [02] AE0A      3693       ldx     #$0A           ; Load index register Lo byt with decimal 10
 8DB4 [07] 52        3694       div                    ; Divide A<-(H:A)/(X);H<-Remainder
 8DB5 [05] CD92EA    3695       jsr     DIVROUND       ; Jump to subroutine at DIVROUND:(round result)
                     3696  
                     3697  ;****************************************************************************
                     3698  ; - Save the result as kph1
                     3699  ;****************************************************************************
                     3700  
 8DB8 [03] B7EC      3701       sta     kph1       ; Copy to Vehicle speed in Km per Hour
 8DBA [04] 81        3702       rts                ; Return from subroutine
                     3703  
                     3704  
                     3705  ;***********************************************************************************************
                     3706  ; Vehicle speed can be calculated using the "odoSec" variable, but it only updates once every
                     3707  ; second. It can also be calculated using the period between odometer counts(vspH:vspL)
                     3708  ; which updates every 0.1mS. With this method, as speed increases, resolution decreases,
                     3709  ; but in our case resolution is still ~1 kph @ 100 kph, so it is acceptable.
                     3710  ;
                     3711  ; The method is:
                     3712  ; kph = constant/period counts
                     3713  ; Where:
                     3714  ; kph           = vehicle speed in kilmeters per hour
                     3715  ; kph_kH:kph_kL = 16 bit constant using the 0.1mS clock tick(10khz)
                     3716  ;                 (10,000 tick psec*60secpmin*60minphr)/4971pulsepkm)
                     3717  ;                 kphk = 7242 = $1C4A
                     3718  ; vspH:vspL   = 16 bit period count between PTA3 pulsed lines in 0.1mS resolution
                     3719  ;
                     3720  ;  kph_kH:kph_kL
                     3721  ;  ------------- = kph
                     3722  ;  vspH:vspL
                     3723  ;
                     3724  ; Resolution is ~8kph@~249kph, ~2kph@~120kph, ~1kph@~100kph, <1kph@~84kph
                     3725  ;
                     3726  ; kph = 7242 / (vspH:vspL)
                     3727  ;
                     3728  ;***********************************************************************************************
                     3729  ;***********************************************************************************************
                     3730  ; - Calculate vehicle speed in kph.
                     3731  ;***********************************************************************************************
                     3732  
                     3733  CALC_VS:
                     3734  
                     3735  ;CHK_MIN_VS:
 8DBB [03] B6D2      3736       lda      vspH             ; Load accumulator with value in vehicle speed period Hi byte
 8DBD [02] A11B      3737       cmp      #$1B             ; Compare with decimal 27 (27*256=6912)(~1.05kph)
 8DBF [03] 2504      3738       blo      VS_COMP          ; If (A)<(M), branch to VS_COMP:
 8DC1 [03] 3FEB      3739       clr      kph              ; Clear kph variable
 8DC3 [03] 2032      3740       bra      VS_CALC_DONE     ; Branch to VS_CALC_DONE:(speed is less than 1kph so skip over)
                     3741  
                     3742  VS_COMP:
 8DC5 [01] 4D        3743       tsta                      ; Test accumulator for Z or N (MPH_pH)
 8DC6 [03] 2720      3744       beq     FAST_VS_CALC      ; If the Z bit of CCR is set, branch to FAST_VS_CALC:
                     3745  
                     3746  SLOW_VS_CALC:
 8DC8 [03] 3F61      3747       clr     intacc1            ; Clear intacc1 variable
 8DCA [03] 3F62      3748       clr     intacc1+1          ; Clear intacc1+1 variable
 8DCC [03] B765      3749       sta     intacc2            ; Copy "vspH" to intacc2 variable
 8DCE [03] B6D3      3750       lda     vspL               ; Load accumulator with value in "vspL"
 8DD0 [03] B766      3751       sta     intacc2+1          ; Copy to intacc2+1 variable
 8DD2 [02] A61C      3752       lda     #$1C               ; Load accumulator with value in "kph_kH"
 8DD4 [03] B763      3753       sta     intacc1+2          ; Copy to "intacc1+2"
 8DD6 [02] A64A      3754       lda     #$4A               ; Load accumulator with value in "kph_kL"
 8DD8 [03] B764      3755       sta     intacc1+3          ; Copy to "intacc1+3"
 8DDA [05] CD925E    3756       jsr     udvd32             ; Jump to subroutine udvd32 (32x16 divide)
 8DDD [03] B664      3757       lda     intacc1+3          ; Load accumulator with value in intacc1+3 variable
                     3758                                  ; (8-bit result)
 8DDF [03] BE66      3759       ldx     intacc2+1          ; Load index retgister Lo byte with value in intacc2+1
                     3760                                  ; (8 bit remainder)
 8DE1 [05] CD92EA    3761       jsr     DIVROUND           ; Jump to "DIVROUND" subroutine (round result)
 8DE4 [03] B7EB      3762       sta     kph                ; Copy result to "kph" variable
 8DE6 [03] 200F      3763       bra     VS_CALC_DONE       ; Branch to VS_CALC_DONE:
                     3764  
                     3765  FAST_VS_CALC:
 8DE8 [03] B6D3      3766       lda     vspL               ; Load accumulator with value in VS period Lo
 8DEA [01] 97        3767       tax                        ; Transfer value in accumulator to index register Lo byte
 8DEB [02] A61C      3768       lda     #$1C               ; Load accumulator with value in "kph_kH"
 8DED [02] 87        3769       psha                       ; Push value in accumulator to stack
 8DEE [02] 8A        3770       pulh                       ; Pull value from stack to index register Hi byte
 8DEF [02] A64A      3771       lda     #$4A               ; Load accumulator with value in "kph_kL"
 8DF1 [07] 52        3772       div                        ; Divide (A = (H:A) / X)
 8DF2 [05] CD92EA    3773       jsr     DIVROUND           ; Jump to "DIVROUND" subroutine (round result)
 8DF5 [03] B7EB      3774       sta     kph                ; Copy result to "kph" variable
                     3775  
                     3776  VS_CALC_DONE:
 8DF7 [04] 81        3777       rts                        ; Return from subroutine
                     3778  
                     3779  
                     3780  ;***************************************************************************
                     3781  ; Fuel Burn variables are all calculated, as opposed to displaying
                     3782  ; existing variables. This is the logic used to develop the formulae:
                     3783  ;
                     3784  ; Fuel burn rate = distance traveled / fuel burned) per unit time
                     3785  ; Fuel burn rate = distance traveled / (injector bank open time
                     3786  ; x injector bank flow rate) per unit time
                     3787  ; Fuel burn rate = km / L = m / mL(cc) = mm / (cc / 1000) per unit time
                     3788  ;
                     3789  ; Megasquirt fires one bank of injectors on every PIP signal
                     3790  ; except during prime pulse and crank, when both are fired simultaneously
                     3791  ;
                     3792  ; 300 bank flow rate is 9.985 cc/sec (.009985 cc/msec) (.0009985 cc/.1ms)
                     3793  ; Fires 3 times per revolution, 6 below ~300 RPM
                     3794  ; Flow rate per .1ms in cc/1000 for 300 is .9985
                     3795  ;
                     3796  ; Fuel delivery pulse width is an 8 bit variable (fd). Resolution is .1msec
                     3797  ; Fuel delivery pulse width over 1 second is a 16 bit variable (fdSecH:fdSecL)
                     3798  ; At every PIP signal the fuel delivery over 1 second variables is updated
                     3799  ; Once every second fdtH:fdtL is read and stored as fdSecH:fdSecL
                     3800  ;
                     3801  ; Vehicle speed signal is 4971 pulse/km or 8000 pulse/mile
                     3802  ; 1 pulse = .000201167 Km, or:
                     3803  ;            201.167mm, or:
                     3804  ;           .000125 mile (7.92")
                     3805  ;
                     3806  ; Odometer counter is an 8 bit variable (odo) incremented at each pulse
                     3807  ; Once every second odo is read, stored as odoSec and cleared
                     3808  ; Maximum distance for odoSec is 51.298m(51298mm)(.031875 mi)(168.3')
                     3809  ; Roll over is at 184.67km/hr (114.75MpH)
                     3810  ;
                     3811  ; HC908 is restricted to integer math in assembly programming,
                     3812  ; max 16x16=32 multiply
                     3813  ;
                     3814  ; tmp4:tmp3 * tmp2:tmp1 = tmp8:tmp7:tmp6:tmp5


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 32
MV_ECU


                     3815  ;
                     3816  ; max 32/16=16Quo,16Rem divide
                     3817  ;
                     3818  ; INTACC1:INTAAC1+1:INTAAC1+2:INTAAC1+3 / INTAAC2:INTAAC2+1
                     3819  ; = INTACC1:INTAAC1+1:INTAAC1+2:INTAAC1+3 rem INTAAC2:INTAAC2+1
                     3820  ;
                     3821  ; Vehicle speed in KM/Hr is the 8 bit variable kph1. It is calculated
                     3822  ; by using odoSec. Each count on odoSec represents .000201167km per
                     3823  ; second, or 0.7242km per hour
                     3824  ; odoSec x 0.7242 = kph1, or, for integer math:
                     3825  ; (odoSec x 7242) / 1000 = kph1
                     3826  ;
                     3827  ; Distance traveled over 1 secondin mm is a 16 bit variable mmH:mmL
                     3828  ; {odoSec x 201 = mmH:mmL}
                     3829  ;
                     3830  ; Fuel burned over 1 second in cc/1000 is a 16 bit variable mccH:mccL
                     3831  ; fdSecH:fdSecL x .9985
                     3832  ; For integer math:
                     3833  ; {(fdSecH:fdSecL x 999) / 1000 = mccH:mccL}
                     3834  ;
                     3835  ; REVISION:
                     3836  ; - In order to fine tune the fuel burn calculations, the new variables BnkFloH:BnkFloL
                     3837  ;   are now used instead of the hard coded flow rate of 999
                     3838  ;***************************************************************************
                     3839  
                     3840  ;***************************************************************************
                     3841  ; - This subroutine calculates Fuel Burn Rate over 1 second
                     3842  ;***************************************************************************
                     3843  
                     3844  CALC_KM_L:
                     3845  
                     3846  ;***************************************************************************
                     3847  ; - Calculate distance travelled in mm over 1 second
                     3848  ;   odoSec x 201 = mmH:mmL
                     3849  ;***************************************************************************
                     3850  
 8DF8 [03] B6D1      3851       lda     odoSec     ; Load accumulator with value in
                     3852                          ; Odometer counts over last Second
 8DFA [02] AEC9      3853       ldx     #$C9       ; Load index register Lo byte with decimal 201
 8DFC [05] 42        3854       mul                ; Multiply (X:A)<-(X)*(A)
 8DFD [03] BFEF      3855       stx     mmH        ; Copy value in index register Lo byte to
                     3856                          ; Millimeters travelled over 1 second Hi byte
                     3857                          ; (result Hi byte)
 8DFF [03] B7F0      3858       sta     mmL        ; Copy value in accumulator to Millimeters
                     3859                          ; travelled over 1 second Lo byte
                     3860                          ; (result Lo byte)
                     3861  
                     3862  ;**********************************************************************************************
                     3863  ; - Configurable constants from Megasquirt, BnkflowHmv:BnkflowLmv is the injector bank flow
                     3864  ;   rate in L/hr x 10 We can use this constant to obtain the flow rate per second by dividing
                     3865  ;   by 3600. For integer math, multiply by 100 then divide by 36
                     3866  ;**********************************************************************************************
                     3867  ;**********************************************************************************************
                     3868  ; - Calculate the injector bank flow rate in cc/sec x 100
                     3869  ;   (BnkflowHmv:BnkflowLmv x 100) / 36 = BnkFloH:BnkFloL
                     3870  ; - Load variables and multiply to obtain the dividend
                     3871  ;**********************************************************************************************
                     3872  
 8E01 [03] 3F6C      3873       clr     tmp4       ; Clear tmp4
 8E03 [02] A664      3874       lda     #$64       ; Load accumulator with decimal 100
 8E05 [03] B76B      3875       sta     tmp3       ; Copy to tmp3
 8E07 [03] B6DB      3876       lda     BnkflowHmv ; Load accumulator with bank flow rate in L/hr x 10 Hi byte
 8E09 [03] B76A      3877       sta     tmp2       ; Copy to tmp4
 8E0B [03] B6DC      3878       lda     BnkflowLmv ; Load accumulator with bank flow rate in L/hr x 10 Lo byte
 8E0D [03] B769      3879       sta     tmp1       ; Copy to tmp1
 8E0F [03] 3F6D      3880       clr     tmp5       ; Clear tmp5
 8E11 [03] 3F6E      3881       clr     tmp6       ; Clear tmp6
 8E13 [03] 3F6F      3882       clr     tmp7       ; Clear tmp7
 8E15 [03] 3F70      3883       clr     tmp8       ; Clear tmp8
 8E17 [05] CD92FD    3884       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3885  
                     3886  ;**********************************************************************************************
                     3887  ; - Load the dividend (BnkflowHmv:BnkflowLmv x 100)
                     3888  ;**********************************************************************************************
                     3889  
 8E1A [03] B670      3890       lda     tmp8       ; Load accumulator with value in tmp8 (result Hi byte)
 8E1C [03] B761      3891       sta     intacc1    ; Copy to intacc1
 8E1E [03] B66F      3892       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8E20 [03] B762      3893       sta     intacc1+1  ; Copy to intacc1+1
 8E22 [03] B66E      3894       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8E24 [03] B763      3895       sta     intacc1+2  ; Copy to intacc1+2
 8E26 [03] B66D      3896       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8E28 [03] B764      3897       sta     intacc1+3  ; Copy to intacc1+3
                     3898  
                     3899  ;**********************************************************************************************
                     3900  ; - Load 8 bit divisor (decimal 36) and divide
                     3901  ;**********************************************************************************************
                     3902  
 8E2A [03] 3F65      3903       clr     intacc2    ; Clear intacc2
 8E2C [02] A624      3904       lda     #$24       ; Load accumulator with decimal 36
 8E2E [03] B766      3905       sta     intacc2+1  ; Copy to intacc2+1 variable
 8E30 [05] CD925E    3906       jsr     udvd32     ; jump to udvd32 subroutine
                     3907                          ; (intacc1:32 = intacc1:32 / intacc2:16)
                     3908  
                     3909  ;**********************************************************************************************
                     3910  ; - Copy the 16 bit quotient to BnkFloH:BnkFloL
                     3911  ;**********************************************************************************************
                     3912  
 8E33 [03] B663      3913       lda     intacc1+2  ; Load accumulator with value in intacc1
                     3914                          ; (quotient Mid Lo byte)
 8E35 [03] B7FA      3915       sta     BnkFloH    ; Copy to injector bank flow rate in cc/sec x 100 Hi byte
 8E37 [03] B664      3916       lda     intacc1+3  ; Load accumulator with value in intacc1+3
                     3917                          ; (quotient Lo byte)
 8E39 [03] B7FB      3918       sta     BnkFloL    ; Copy to injector bank flow rate in cc/sec x 100 Lo byte
                     3919  
                     3920  ;***************************************************************************
                     3921  ; - Calculate fuel burn in cc/1000 over 1 second
                     3922  ;  (fdSecH:fdSecL x BnkFloH:BnkFloL) / 1000 = mccH:mccL
                     3923  ; - Load variables and multiply to obtain the dividend
                     3924  ;***************************************************************************
                     3925  
 8E3B [03] B6CB      3926       lda     fdSecL     ; Load accumulator with value in
                     3927                          ; Fuel Delivery PW Lo Res over 1 second Lo byte
 8E3D [03] B76B      3928       sta     tmp3       ; Copy to tmp3
 8E3F [03] B6CA      3929       lda     fdSecH     ; Load accumulator with value in
                     3930                          ; Fuel Delivery PW Lo Res over 1 second Hi byte
 8E41 [03] B76C      3931       sta     tmp4       ; Copy to tmp4
 8E43 [03] B6FA      3932       lda     BnkFloH    ; Load accumulator with value in Bank Flow Hy byte
 8E45 [03] B76A      3933       sta     tmp2       ; Copy to tmp4
 8E47 [03] B6FB      3934       lda     BnkFloL    ; Load accumulator with value in Bank Flow Lo byte
 8E49 [03] B769      3935       sta     tmp1       ; Copy to tmp1
 8E4B [05] CD92FD    3936       jsr     UMUL32     ; Jump to subroutine at UMUL32: (16x16 multiply)
                     3937  
                     3938  ;****************************************************************************
                     3939  ; - Load 32 bit dividend (fdSecH:fdSecLL x BnkFloH:BnkFloL)
                     3940  ;****************************************************************************
                     3941  
 8E4E [03] B670      3942       lda     tmp8       ; Load accumulator with value in tmp8 (result Hi byte)
 8E50 [03] B761      3943       sta     intacc1    ; Copy to intacc1
 8E52 [03] B66F      3944       lda     tmp7       ; Load accumulator with value in tmp7 (result Mid Hi byte)
 8E54 [03] B762      3945       sta     intacc1+1  ; Copy to intacc1+1
 8E56 [03] B66E      3946       lda     tmp6       ; Load accumulator with value in tmp6 (result Mid Lo byte)
 8E58 [03] B763      3947       sta     intacc1+2  ; Copy to intacc1+2
 8E5A [03] B66D      3948       lda     tmp5       ; Load accumulator with value in tmp5 (result Lo byte)
 8E5C [03] B764      3949       sta     intacc1+3  ; Copy to intacc1+3
                     3950  


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 33
MV_ECU


                     3951  ;****************************************************************************
                     3952  ; - Load 16 bit divisor (decimal 1000) and divide
                     3953  ;****************************************************************************
                     3954  
 8E5E [02] A627      3955       lda     #$27        ; Load accumulator with decimal 1000 Hi byte
                     3956                          ; (3 x 256 = 768)
 8E60 [03] B765      3957       sta     intacc2    ; Copy to intacc2
 8E62 [02] A610      3958       lda     #$10       ; Load accumulator with decimal 1000 Lo byte
                     3959                          ; (232)
 8E64 [03] B766      3960       sta     intacc2+1  ; Copy to intacc2+1 variable
 8E66 [05] CD925E    3961       jsr     udvd32     ; jump to udvd32 subroutine
                     3962                          ; (intacc1:32 = intacc1:32 / intacc2:16)
                     3963  
                     3964  ;****************************************************************************
                     3965  ; - Load the 8 bit dividend and divide by 10
                     3966  ;****************************************************************************
                     3967  
 8E69 [03] 3F65      3968       clr     intacc2       ; Clear "intacc2"
 8E6B [02] A60A      3969       lda     #$0A          ; Load accumulator with decimal 10
 8E6D [03] B766      3970       sta     intacc2+1     ; Copy to "intacc2+1
 8E6F [05] CD925E    3971       jsr     udvd32        ; Jump to udv32:
                     3972  
                     3973  ;****************************************************************************
                     3974  ; - Copy the quotient to mccH:mccL
                     3975  ;****************************************************************************
                     3976  
 8E72 [03] B663      3977       lda     intacc1+2  ; Load accumulator with value in intacc1
                     3978                          ; (quotient Mid Lo byte)
 8E74 [03] B7F1      3979       sta     mccH       ; Copy to CC/1000 fuel used over 500 ms Hi byte
 8E76 [03] B664      3980       lda     intacc1+3  ; Load accumulator with value in intacc1+3
                     3981                          ; (quotient Lo byte)
 8E78 [03] B7F2      3982       sta     mccL       ; Copy to CC/1000 fuel used over 500 ms Lo byte
                     3983  
                     3984  ;****************************************************************************
                     3985  ; Calculate fuel burn rate over 1 second to 1 decimal place
                     3986  ; mmH:mmL / mccH:mccL = kmLtrH:kmLtrL
                     3987  ;****************************************************************************
                     3988  
                     3989  ;****************************************************************************
                     3990  ; - Load 16 bit dividend (mmH:mmL)
                     3991  ;****************************************************************************
                     3992  
 8E7A [03] 3F61      3993       clr     intacc1    ; Clear intacc1
 8E7C [03] 3F62      3994       clr     intacc1+1  ; Clear intacc1+1
 8E7E [03] B6EF      3995       lda     mmH        ; Load accumulator with value in Millimeters travelled
                     3996                          ; over 500 ms Hi byte
 8E80 [03] B763      3997       sta     intacc1+2  ; Copy to intacc1+2
 8E82 [03] B6F0      3998       lda     mmL        ; Load accumulator with value in Millimeters travelled
                     3999                          ; over 500 ms Lo byte
 8E84 [03] B764      4000       sta     intacc1+3  ; Copy to intacc1+3
                     4001  
                     4002  ;****************************************************************************
                     4003  ; - Load 16 bit divisor (mccH:mccL) and divide
                     4004  ;****************************************************************************
                     4005  
 8E86 [03] B6F1      4006       lda     mccH       ; Load accumulator with value in CC/1000 fuel used
                     4007                          ; over 500 ms Hi byte
 8E88 [03] B765      4008       sta     intacc2    ; Copy to intacc2 variable
 8E8A [03] B6F2      4009       lda     mccL       ; Load accumulator with value in CC/1000 fuel used
                     4010                          ; over 500 ms Lo byte
 8E8C [03] B766      4011       sta     intacc2+1  ; Copy to intacc2+1 variable
 8E8E [05] CD925E    4012       jsr     udvd32     ; jump to udvd32 subroutine
                     4013                          ; (intacc1:32 = intacc1:32 / intacc2:16)
 8E91 [03] B664      4014       lda     intacc1+3  ; Load accumulator with value in "intacc1+3"(result Lo byte)
 8E93 [03] B7EE      4015       sta     kmLtrL     ; Copy to "kmLtrL"
 8E95 [03] B663      4016       lda     intacc1+2  ; Load accumulator with value in "intacc1+2"(result mid Lo byte)
 8E97 [03] B7ED      4017       sta     kmLtrH     ; Copy to "kmLtrH
 8E99 [04] 81        4018       rts                ; Return from subroutine
                     4019  
                     4020  ;***********************************************************************************************
                     4021  ; - This subroutine divides a 16 bit variable loaded in "intacc1+2:intacc1+3" by 10 so the
                     4022  ;   result can fit in the 4 digit display. ( uS resolution is now in mmS)
                     4023  ;***********************************************************************************************
                     4024  
                     4025  DIV_BY_TEN:
                     4026  
                     4027  ;****************************************************************************
                     4028  ; - Clear the dividend Hi and Mid Hi bytes
                     4029  ;****************************************************************************
                     4030  
 8E9A [03] 3F61      4031       clr     intacc1     ; Clear intacc1
 8E9C [03] 3F62      4032       clr     intacc1+1   ; Clear intacc1+1
                     4033  
                     4034  ;****************************************************************************
                     4035  ; - Load the 8 bit divisor and divide by 10. The 16 bit quotient remains in
                     4036  ;   "intacc1+2:intacc1+3" for direct use in the "CONV_16BIT_ASCII" subroutine
                     4037  ;****************************************************************************
                     4038  
 8E9E [03] 3F65      4039       clr     intacc2       ; Clear "intacc2"
 8EA0 [02] A60A      4040       lda     #$0A          ; Load accumulator with decimal 10
 8EA2 [03] B766      4041       sta     intacc2+1     ; Copy to "intacc2+1
 8EA4 [05] CD925E    4042       jsr     udvd32        ; Jump to udv32:
 8EA7 [04] 81        4043       rts                   ; Return from subroutine
                     4044  
                     4045  
                     4046  ;***********************************************************************************************
                     4047  ;*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
                     4048  ;*----------------------------------------------------------------------------------------------
                     4049  ;*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO
                     4050  ;***********************************************************************************************
                     4051  
                     4052  ;****************************************************************************
                     4053  ; - This subroutine takes a byte value in the accumulator, transfers it to
                     4054  ;   the index register Lo byte, and converts it to a 3 variable string,
                     4055  ;   stored temporarily in variables "AC_100", AC_10", and "AC_1"
                     4056  ;****************************************************************************
                     4057  
                     4058  CONV_8BIT_ASCII:
 8EA8 [01] 8C        4059       clrh                      ; Clear index register hi byte
 8EA9 [03] B684      4060       lda     disVal            ; Load accumulator with value in "disVal"
 8EAB [01] 97        4061       tax                       ; Transfer value in accumulator to index
                     4062                                 ; register Lo byte(8 bit value)
 8EAC [04] D6F000    4063       lda     ASCII_CONV_100,x  ; Load accumulator with value in
                     4064                                 ; ASCII_CONV_100 table, offset in index
                     4065                                 ; register Lo byte(ASCII 100s value)
 8EAF [03] B7AD      4066       sta     AC_100            ; Copy to "AC_100" variable
 8EB1 [04] D6F100    4067       lda     ASCII_CONV_10,x   ; Load accumulator with value in
                     4068                                 ; ASCII_CONV_10 table, offset in index
                     4069                                 ; register Lo byte(ASCII 10s value)
 8EB4 [03] B7AE      4070       sta     AC_10             ; Copy to "AC_10" variable
 8EB6 [04] D6F200    4071       lda     ASCII_CONV_1,x    ; Load accumulator with value in
                     4072                                 ; ASCII_CONV_1 table, offset in index
                     4073                                 ; register Lo byte(ASCII 1s value)
 8EB9 [03] B7AF      4074       sta     AC_1              ; Copy to "AC_1" variable
 8EBB [04] 81        4075       rts                       ; Return from subroutine
                     4076  
                     4077  
                     4078  ;***********************************************************************************************
                     4079  ;  - This subroutine takes a 16 bit value previously stored in "intacc1+2:intacc1+3"
                     4080  ;    and converts it to a 4 variable string, stored temporarily as "thousands", "hundreds",
                     4081  ;    "tens", and "ones"
                     4082  ;***********************************************************************************************
                     4083  
                     4084  CONV_16BIT_ASCII:
                     4085  
 8EBC [03] 3F61      4086       clr     intacc1    ; Clear intacc1


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 34
MV_ECU


 8EBE [03] 3F62      4087       clr     intacc1+1  ; Clear intacc1+1
                     4088  
                     4089  ;***********************************************************************************************
                     4090  ; - Load 16 bit divisor (decimal 1000) and divide (1000s digit)
                     4091  ;***********************************************************************************************
                     4092  
 8EC0 [02] A603      4093       lda     #$3        ; Load accumulator with decimal 1000 Hi byte(3 x 256 = 768)
 8EC2 [03] B765      4094       sta     intacc2    ; Copy to intacc2
 8EC4 [02] A6E8      4095       lda     #$E8       ; Load accumulator with decimal 1000 Lo byte(232)
 8EC6 [03] B766      4096       sta     intacc2+1  ; Copy to intacc2+1 variable
 8EC8 [05] CD925E    4097       jsr     udvd32     ; jump to udvd32 subroutine
                     4098                          ; (intacc1:32 = intacc1:32 / intacc2:16)
                     4099  
                     4100  ;***********************************************************************************************
                     4101  ; - Convert the result to ASCII and save the 1000s digit
                     4102  ;***********************************************************************************************
                     4103  
 8ECB [03] B664      4104       lda     intacc1+3         ; Load accumulator with value in intacc1+3(result  Lo byte)
 8ECD [03] B784      4105       sta     disval            ; Copy to "disVal"
 8ECF [05] CD8EA8    4106       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8ED2 [03] B6AF      4107       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8ED4 [03] B7B0      4108       sta     thousands         ; Copy to "thousands"
                     4109  
                     4110  ;***********************************************************************************************
                     4111  ; - Load remainder as 16 bit dividend and divide by 100 (100s digit)
                     4112  ;***********************************************************************************************
                     4113  
 8ED6 [01] 8C        4114       clrh               ; Clear index register Hi byte
 8ED7 [03] B665      4115       lda     intacc2    ; Load accumulator with value in intacc2(remainder Hi byte)
 8ED9 [02] 87        4116       psha               ; push value in accumulator onto stack
 8EDA [02] 8A        4117       pulh               ; pull value from stack to index register Hi byte(A to H)
 8EDB [03] B666      4118       lda     intacc2+1  ; Load accumulator with value in intacc2+1(remainder Lo byte)
 8EDD [02] AE64      4119       ldx     #$64       ; Load index register Lo byte with decimal 100
 8EDF [07] 52        4120       div                ; A<-(H:A)/(X):(H)<-Rem
 8EE0 [03] B784      4121       sta     disval     ; Copy to "disVal"
                     4122  
                     4123  
                     4124  ;***********************************************************************************************
                     4125  ; - Save remainder for next calculation
                     4126  ;***********************************************************************************************
                     4127  
 8EE2 [02] 8B        4128       pshh               ; Push value in index register Hi byte to stack
 8EE3 [02] 88        4129       pulx               ; Pull value from stack to index register Lo byte(H to A)
 8EE4 [03] BF69      4130       stx     tmp1       ; Copy value in index register Lo byte to tmp1 variable
                     4131  
                     4132  ;***********************************************************************************************
                     4133  ; - Convert the result to ASCII and save the 100s digit
                     4134  ;***********************************************************************************************
                     4135  
 8EE6 [05] CD8EA8    4136       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8EE9 [03] B6AF      4137       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8EEB [03] B7B1      4138       sta     hundreds          ; Copy to "hundreds"
                     4139  
                     4140  ;***********************************************************************************************
                     4141  ; - Load remainder as 8 bit dividend and divide by 10 (10s digit)
                     4142  ;***********************************************************************************************
                     4143  
 8EED [01] 8C        4144       clrh               ; clear index register Hi byte
 8EEE [03] B669      4145       lda     tmp1       ; Load accumulator with value in tmp1(remainder)
 8EF0 [02] AE0A      4146       ldx     #$A        ; Load index register Lo byte with decimal 10
 8EF2 [07] 52        4147       div                ; A<-(H:A)/(X):(H)<-Rem
 8EF3 [03] B784      4148       sta     disval     ; Copy to "disVal"
                     4149  
                     4150  ;***********************************************************************************************
                     4151  ; - Save remainder for next calculation
                     4152  ;***********************************************************************************************
                     4153  
 8EF5 [02] 8B        4154       pshh               ; Push value in index register Hi byte to stack
 8EF6 [02] 88        4155       pulx               ; Pull value from stack to index register Lo byte (H to X)
 8EF7 [03] BF69      4156       stx     tmp1       ; Copy value in index register Lo byte to tmp1 variable
                     4157  
                     4158  ;***********************************************************************************************
                     4159  ; - Convert the result to ASCII and save the 10s digit
                     4160  ;***********************************************************************************************
                     4161  
 8EF9 [05] CD8EA8    4162       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8EFC [03] B6AF      4163       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8EFE [03] B7B2      4164       sta     tens              ; Copy to "tens"
                     4165  
                     4166  ;***********************************************************************************************
                     4167  ; - Convert the remainder to ASCII and save the 1s digit
                     4168  ;***********************************************************************************************
                     4169  
 8F00 [03] B669      4170       lda     tmp1              ; Load accumulator with value in tmp1(remainder)
 8F02 [03] B784      4171       sta     disval            ; Copy to "disVal"
 8F04 [05] CD8EA8    4172       jsr     CONV_8BIT_ASCII   ; Jump to subroutine at CONV_8BIT_ASCII:
 8F07 [03] B6AF      4173       lda     AC_1              ; Load accumulator with value in "AC_1"(1s col)
 8F09 [03] B7B3      4174       sta     ones              ; Copy to "ones"
 8F0B [04] 81        4175       rts                       ; Return from subroutine
                     4176  
                     4177  
                     4178  ;****************************************************************************
                     4179  ; - This subroutine checks the state of the Display Screen next
                     4180  ;   button on PTA0 and updates the switch status flag.
                     4181  ;   The switch status flag is cleared every pass through the main loop after
                     4182  ;   the routine relevent to that flag is completed.
                     4183  ;   Edge detection is provided from both open to closed, and closed to open.
                     4184  ;   Auto-repeat at 2HZ is commanded as long as the contacts remain closed
                     4185  ;   for a period of 1 second or more.
                     4186  ;   Auto-repeat is prevented in the open state.
                     4187  ;****************************************************************************
                     4188  
                     4189  SW0_CHK:
 8F0C [03] B640      4190       lda     Sw0DB                ; Load accumulator with value in Switch
                     4191                                    ; #0 de-bounce counter variable
 8F0E [03] 2642      4192       bne     SW0_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     4193                                    ; SW0_CHK_DONE: ("Sw0DB" not = 0,
                     4194                                    ; de-bounce in progress, skip over)
 8F10 [05] 00002D    4195       brset   Sw0,porta,SW0_OPN    ; If "Sw0" bit of Port A is set,(Hi)
                     4196                                    ; branch to Sw0_OPN: (contacts are open)
 8F13 [05] 004C08    4197       brset   Sw0LP,LPflags,SW0_ARC_CHK  ; If "Sw0LP" bit of "LPflags"
                     4198                               ; variable is set, branch to SW0_ARC_CHK:
                     4199                               ; (contacts closed, bit is already set,
                     4200                               ; check for auto-repeat command)
 8F16 [04] 6E6440    4201       mov     #$64,Sw0DB      ; Move decimal 100 into Switch #0
                     4202                               ; de-bounce counter variable (100mS)
 8F19 [04] 104C      4203       bset    Sw0LP,LPflags   ; Set "Sw0LP" bit of "LPflags" variable
 8F1B [03] CC8F39    4204       jmp     SW0_CLS         ; Jump to SW0_CLS:
                     4205  
                     4206  SW0_ARC_CHK:
 8F1E [05] 004D08    4207       brset   Sw0LP,ARCflags,SW0_ARC_PROG  ; If "Sw0LP" bit of "ARCflags"
                     4208                               ; variable is set, branch to SW0_ARC_PROG:
                     4209                               ;(auto-repeat command check in progress)
 8F21 [04] 6EC841    4210       mov     #$C8,Sw0ARC     ; Move decimal 200 into Switch #0
                     4211                               ; auto-repeat command counter variable(1Sec)
 8F24 [04] 104D      4212       bset    Sw0LP,ARCflags  ; Set "Sw0LP" bit of "ARCflags" variable
 8F26 [03] CC8F52    4213       jmp     SW0_CHK_DONE    ; Jump to SW0_CHK_DONE:
                     4214  
                     4215  SW0_ARC_PROG:
 8F29 [03] B641      4216       lda     Sw0ARC              ; Load accumulator with value in Switch
                     4217                                   ; #0 auto repeat command timer counter
 8F2B [03] 2625      4218       bne     SW0_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4219                                   ; SW0_CHK_DONE: ("Sw0ARC" not = 0,
                     4220                                   ; auto-repeat command check in progress,
                     4221                                   ; skip over)
 8F2D [05] 004E05    4222       brset   Sw0LP,ARflags,SW0_AR_PROG   ; If "Sw0LP" bit of "ARflags"


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 35
MV_ECU


                     4223                                   ; variable is set, branch to SW0_AR_PROG:
                     4224                                   ;(auto-repeat check in progress)
 8F30 [04] 6E6442    4225       mov     #$64,Sw0AR          ; Move decimal 100 into Contact Set #0
                     4226                                   ; auto-repeat counter variable(500mS)
 8F33 [04] 104E      4227       bset    Sw0LP,ARflags       ; Set "Sw0LP" bit of "ARflags" variable
                     4228  
                     4229  SW0_AR_PROG:
 8F35 [03] B642      4230       lda     Sw0AR               ; Load accumulator with value in Contact
                     4231                                   ; Set #0 auto repeat timer counter var
 8F37 [03] 2619      4232       bne     SW0_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4233                                   ; SW0_CHK_DONE: ("Sw0DB" not = 0,
                     4234                                   ; auto-repeat check in progress,
                     4235                                   ; skip over)
                     4236  SW0_CLS:
 8F39 [04] 104F      4237       bset    Sw0cls,Swflags      ; Set "Sw0cls" bit of "Swflags" variable
 8F3B [04] 114E      4238       bclr    Sw0LP,ARflags       ; Clear "Sw0LP" bit of "ARflags" variable
 8F3D [03] CC8F52    4239       jmp     SW0_CHK_DONE        ; Jump to SW0_CHK_DONE:
                     4240  
                     4241  SW0_OPN:
 8F40 [05] 014C0F    4242       brclr   Sw0LP,LPflags,SW0_CHK_DONE  ; If "Sw0LP" bit of "LPflags"
                     4243                                ; variable is clear, branch to SW0_CHK_DONE:
                     4244                                ; (contact set open, and bit is already
                     4245                                ; clear, so skip over)
 8F43 [04] 6E6440    4246       mov     #$64,Sw0DB       ; Move decimal 100 into Contact Set #0
                     4247                                ; de-bounce counter variable (100mS)
 8F46 [04] 114C      4248       bclr    Sw0LP,LPflags    ; Clear "Sw0LP" bit of "LPflags" variable
 8F48 [03] 3F42      4249       clr     Sw0AR            ; Clear Sw0 auto-repeat timer counter
 8F4A [04] 114E      4250       bclr    Sw0LP,ARflags    ; Clear "Sw0LP" bit of "ARflags" variable
 8F4C [03] 3F41      4251       clr     Sw0ARC           ; Clear "Sw0" auto-repeat command timer counter
 8F4E [04] 114D      4252       bclr    Sw0LP,ARCflags   ; Clear "Sw0LP" bit of "ARCflags" variable
 8F50 [04] 114F      4253       bclr    Sw0cls,Swflags   ; Clear "Sw0cls" bit of "Swflags" variable
                     4254  
                     4255  SW0_CHK_DONE:
 8F52 [04] 81        4256       rts                      ; Return from subroutine
                     4257  
                     4258  
                     4259  ;****************************************************************************
                     4260  ; - This subroutine checks the state of the Display Screen previous
                     4261  ;   button on PTA1 and updates the switch status flag.
                     4262  ;   The switch status flag is cleared every pass through the main loop after
                     4263  ;   the routine relevent to that flag is completed.
                     4264  ;   Edge detection is provided from both open to closed, and closed to open.
                     4265  ;   Auto-repeat at 2HZ is commanded as long as the contacts remain closed
                     4266  ;   for a period of 1 second or more.
                     4267  ;   Auto-repeat is prevented in the open state.
                     4268  ;****************************************************************************
                     4269  
                     4270  SW1_CHK:
 8F53 [03] B643      4271       lda     Sw1DB                ; Load accumulator with value in Switch
                     4272                                    ; #1 de-bounce counter variable
 8F55 [03] 2642      4273       bne     SW1_CHK_DONE         ; If Z bit of CCR is clear, branch to
                     4274                                    ; SW1_CHK_DONE: ("Sw0DB" not = 0,
                     4275                                    ; de-bounce in progress, skip over)
 8F57 [05] 02002D    4276       brset   Sw1,porta,SW1_OPN    ; If "Sw1" bit of Port A is set,(Hi)
                     4277                                    ; branch to Sw1_OPN: (contacts are open)
 8F5A [05] 024C08    4278       brset   Sw1LP,LPflags,SW1_ARC_CHK  ; If "Sw1LP" bit of "LPflags"
                     4279                               ; variable is set, branch to SW1_ARC_CHK:
                     4280                               ; (contacts closed, bit is already set,
                     4281                               ; check for auto-repeat command)
 8F5D [04] 6E6443    4282       mov     #$64,Sw1DB      ; Move decimal 100 into Switch #1
                     4283                               ; de-bounce counter variable (100mS)
 8F60 [04] 124C      4284       bset    Sw1LP,LPflags   ; Set "Sw1LP" bit of "LPflags" variable
 8F62 [03] CC8F80    4285       jmp     SW1_CLS         ; Jump to SW1_CLS:
                     4286  
                     4287  SW1_ARC_CHK:
 8F65 [05] 024D08    4288       brset   Sw1LP,ARCflags,SW1_ARC_PROG  ; If "Sw1LP" bit of "ARCflags"
                     4289                               ; variable is set, branch to SW1_ARC_PROG:
                     4290                               ;(auto-repeat command check in progress)
 8F68 [04] 6EC844    4291       mov     #$C8,Sw1ARC     ; Move decimal 200 into Switch #1
                     4292                               ; auto-repeat command counter variable(1Sec)
 8F6B [04] 124D      4293       bset    Sw1LP,ARCflags  ; Set "Sw1LP" bit of "ARCflags" variable
 8F6D [03] CC8F99    4294       jmp     SW1_CHK_DONE    ; Jump to SW1_CHK_DONE:
                     4295  
                     4296  SW1_ARC_PROG:
 8F70 [03] B644      4297       lda     Sw1ARC              ; Load accumulator with value in Switch
                     4298                                   ; #0 auto repeat command timer counter
 8F72 [03] 2625      4299       bne     SW1_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4300                                   ; SW1_CHK_DONE: ("Sw1ARC" not = 0,
                     4301                                   ; auto-repeat command check in progress,
                     4302                                   ; skip over)
 8F74 [05] 024E05    4303       brset   Sw1LP,ARflags,SW1_AR_PROG   ; If "Sw1LP" bit of "ARflags"
                     4304                                   ; variable is set, branch to SW1_AR_PROG:
                     4305                                   ;(auto-repeat check in progress)
 8F77 [04] 6E6445    4306       mov     #$64,Sw1AR          ; Move decimal 100 into Contact Set #1
                     4307                                   ; auto-repeat counter variable(500mS)
 8F7A [04] 124E      4308       bset    Sw1LP,ARflags       ; Set "Sw1LP" bit of "ARflags" variable
                     4309  
                     4310  SW1_AR_PROG:
 8F7C [03] B645      4311       lda     Sw1AR               ; Load accumulator with value in Contact
                     4312                                   ; Set #1 auto repeat timer counter var
 8F7E [03] 2619      4313       bne     SW1_CHK_DONE        ; If Z bit of CCR is clear, branch to
                     4314                                   ; SW1_CHK_DONE: ("Sw1DB" not = 0,
                     4315                                   ; auto-repeat check in progress,
                     4316                                   ; skip over)
                     4317  SW1_CLS:
 8F80 [04] 124F      4318       bset    Sw1cls,Swflags      ; Set "Sw1cls" bit of "Swflags" variable
 8F82 [04] 134E      4319       bclr    Sw1LP,ARflags       ; Clear "Sw1LP" bit of "ARflags" variable
 8F84 [03] CC8F99    4320       jmp     SW1_CHK_DONE        ; Jump to SW1_CHK_DONE:
                     4321  
                     4322  SW1_OPN:
 8F87 [05] 034C0F    4323       brclr   Sw1LP,LPflags,SW1_CHK_DONE  ; If "Sw1LP" bit of "LPflags"
                     4324                                ; variable is clear, branch to SW1_CHK_DONE:
                     4325                                ; (contact set open, and bit is already
                     4326                                ; clear, so skip over)
 8F8A [04] 6E6443    4327       mov     #$64,Sw1DB       ; Move decimal 100 into Contact Set #1
                     4328                                ; de-bounce counter variable (100mS)
 8F8D [04] 134C      4329       bclr    Sw1LP,LPflags    ; Clear "Sw1LP" bit of "LPflags" variable
 8F8F [03] 3F45      4330       clr     Sw1AR            ; Clear "Sw1" auto-repeat timer counter
 8F91 [04] 134E      4331       bclr    Sw1LP,ARflags    ; Clear "Sw1LP" bit of "ARflags" variable
 8F93 [03] 3F44      4332       clr     Sw1ARC           ; Clear "Sw1" auto-repeat command timer counter
 8F95 [04] 134D      4333       bclr    Sw1LP,ARCflags   ; Clear "Sw1LP" bit of "ARCflags" variable
 8F97 [04] 134F      4334       bclr    Sw1cls,Swflags   ; Clear "Sw1cls" bit of "Swflags" variable
                     4335  
                     4336  SW1_CHK_DONE:
 8F99 [04] 81        4337       rts                      ; Return from subroutine
                     4338  
                     4339  
                     4340  ;***************************************************************************
                     4341  ; - This subroutine is a ~300mS delay used at start up for power
                     4342  ;   stabilization and between transmit bytes for downloading VE and ST
                     4343  ;   constants.
                     4344  ;***************************************************************************
                     4345  
                     4346  DELAY300:
 8F9A [03] 3F69      4347       clr     tmp1     ; Clear tmp1 variable
                     4348  
                     4349  WAIT_1:
 8F9C [03] 3F6A      4350       clr     tmp2     ; Clear tmp2 variable
                     4351  
                     4352  WAIT_2:
 8F9E [03] 3F6B      4353       clr     tmp3     ; Clear tmp3 variable
                     4354  
                     4355  WAIT_3:
 8FA0 [03] B66B      4356       lda     tmp3     ; Load accumulator with value in tmp3
 8FA2 [01] 4C        4357       inca             ; Increment value in accumulator
 8FA3 [03] B76B      4358       sta     tmp3     ; Copy to tmp3


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 36
MV_ECU


 8FA5 [02] A1C8      4359       cmp     #$C8     ; Compare value in accumulator with decimal 200
 8FA7 [03] 25F7      4360       blo     WAIT_3   ; If C bit of CCR is set, (A<M), branch to WAIT_3:
 8FA9 [03] B66A      4361       lda     tmp2     ; Load accumulator with value in tmp2
 8FAB [01] 4C        4362       inca             ; Increment value in accumulator
 8FAC [03] B76A      4363       sta     tmp2     ; Copy to tmp2
 8FAE [02] A1C8      4364       cmp     #$C8     ; Compare value in accumulator with decimal 200
 8FB0 [03] 25EC      4365       blo     WAIT_2   ; If C bit of CCR is set, (A<M), branch to WAIT_2:
 8FB2 [03] B669      4366       lda     tmp1     ; Load accumulator with value in tmp1
 8FB4 [01] 4C        4367       inca             ; Increment value in accumulator
 8FB5 [03] B769      4368       sta     tmp1     ; Copy to tmp1
 8FB7 [02] A105      4369       cmp     #$05     ; Compare value in accumulator with decimal 5
 8FB9 [03] 25E1      4370       blo     WAIT_1   ; If C bit of CCR is set, (A<M), branch to WAIT_1:
 8FBB [04] 81        4371       rts              ; Return from subroutine
                     4372  
                     4373  
                     4374  ;****************************************************************************
                     4375  ; - This subroutine prints the top line of the VFD while in "Display" mode
                     4376  ;****************************************************************************
                     4377  
                     4378  PRNT_TOPLN_DSP:
                     4379  
                     4380  ;****************************************************************************
                     4381  ; - Set up the VFD to place the first character in the top line, extreme
                     4382  ;   left hand position
                     4383  ;****************************************************************************
                     4384  
 8FBC [05] CD9044    4385       jsr     VFD_START_TOP     ; Jump to subroutine at VFD_START_TOP:
                     4386  
                     4387  ;***************************************************************************
                     4388  ; - Using the Variables Top Line Table Index vector table, and the "ScrnCnt"
                     4389  ;   offset value, load H:X with the address of the desired Variables Top
                     4390  ;   Line Table.
                     4391  ;***************************************************************************
                     4392  
 8FBF [03] 45E154    4393       ldhx    #VARS_TL_TB_IND    ; Load index register with the address of
                     4394                                  ; the first value in the Variables Top Line
                     4395                                  ; Table Index vector table
 8FC2 [03] B654      4396       lda     ScrnCnt            ; Load accumulator with the value in "ScrnCnt"
 8FC4 [05] CD900D    4397       jsr     GET_VECT_ADDR      ; Jump to subroutine at GET_VECT_ADDR:
                     4398  
                     4399  ;***************************************************************************
                     4400  ; - Print the top line of the VFD display
                     4401  ;***************************************************************************
                     4402  
 8FC7 [05] CD8FF6    4403       jsr     PRINT_LINE         ; Jump to subroutine at PRINT_LINE:
 8FCA [04] 81        4404       rts                        ; Return from subroutine
                     4405  
                     4406  
                     4407  ;***************************************************************************
                     4408  ; - This subroutine initializes bottom line of the VFD with blank spaces
                     4409  ;***************************************************************************
                     4410  
                     4411  LOAD_SPACE:
 8FCB [02] A620      4412       lda     #$20         ; Load accumulator with ASCII ' '(space)
 8FCD [03] B785      4413       sta     BotLin0      ; Copy to "BotLin0" variable
 8FCF [03] B786      4414       sta     BotLin1      ; Copy to "BotLin0" variable
 8FD1 [03] B787      4415       sta     BotLin2      ; Copy to "BotLin0" variable
 8FD3 [03] B788      4416       sta     BotLin3      ; Copy to "BotLin0" variable
 8FD5 [03] B789      4417       sta     BotLin4      ; Copy to "BotLin0" variable
 8FD7 [03] B78A      4418       sta     BotLin5      ; Copy to "BotLin0" variable
 8FD9 [03] B78B      4419       sta     BotLin6      ; Copy to "BotLin0" variable
 8FDB [03] B78C      4420       sta     BotLin7      ; Copy to "BotLin0" variable
 8FDD [03] B78D      4421       sta     BotLin8      ; Copy to "BotLin0" variable
 8FDF [03] B78E      4422       sta     BotLin9      ; Copy to "BotLin0" variable
 8FE1 [03] B78F      4423       sta     BotLin10     ; Copy to "BotLin0" variable
 8FE3 [03] B790      4424       sta     BotLin11     ; Copy to "BotLin0" variable
 8FE5 [03] B791      4425       sta     BotLin12     ; Copy to "BotLin0" variable
 8FE7 [03] B792      4426       sta     BotLin13     ; Copy to "BotLin0" variable
 8FE9 [03] B793      4427       sta     BotLin14     ; Copy to "BotLin0" variable
 8FEB [03] B794      4428       sta     BotLin15     ; Copy to "BotLin0" variable
 8FED [03] B795      4429       sta     BotLin16     ; Copy to "BotLin0" variable
 8FEF [03] B796      4430       sta     BotLin17     ; Copy to "BotLin0" variable
 8FF1 [03] B797      4431       sta     BotLin18     ; Copy to "BotLin0" variable
 8FF3 [03] B798      4432       sta     BotLin19     ; Copy to "BotLin0" variable
 8FF5 [04] 81        4433       rts                  ; Return from subroutine
                     4434  
                     4435  
                     4436  ;***************************************************************************
                     4437  ; - This subroutine takes the address of the desired Line Table loaded
                     4438  ;   in H:X. Using the value in "ColNum" offset value, load the "value"
                     4439  ;   variable with the contents of the appropriate ASCCI value in the table
                     4440  ;   and display them on the top line of the VFD.
                     4441  ;***************************************************************************
                     4442  
                     4443  PRINT_LINE:
 8FF6 [03] 3F80      4444       clr     ColNum            ; Clear "ColNum" variable
                     4445                                 ;(ColNum = 0 = 1st column on left)
 8FF8 [03] B680      4446       lda     ColNum            ; Load accumulator with value in "ColNum"
                     4447  
                     4448  NEXT_CHAR:
 8FFA [05] CD9031    4449       jsr     LDA_W_HX_PL_A     ; Jump to subroutine at LDA_W_HX_PL_A:
 8FFD [03] B77E      4450       sta     value             ; Copy to "value" variable
 8FFF [05] CD9080    4451       jsr     VFD_SEND          ; Jump to subroutine at VFD_SEND:
 9002 [04] 3C80      4452       inc     ColNum            ; Increment "ColNum" (ColNum=ColNum+1)
 9004 [03] B680      4453       lda     ColNum            ; Load accumulator with value in "ColNum"
 9006 [02] A114      4454       cmp     #$14              ; Compare (A) with decimal 20
 9008 [03] 2702      4455       beq     CHARS_DONE        ; If Z bit of CCR is set, branch to
                     4456                                 ; CHARS_DONE:
                     4457                                 ;(finished sending all display characters)
 900A [03] 20EE      4458       bra     NEXT_CHAR         ; Branch to NEXT_CHAR:
                     4459  
                     4460  CHARS_DONE:
 900C [04] 81        4461       rts                       ; Return from subroutine
                     4462  
                     4463  
                     4464  ;***************************************************************************
                     4465  ; - This subroutine loads H:X with the desired vectored address found in a
                     4466  ;   vector address table. (H:X) originally holds the address of beginning of
                     4467  ;   the vector address table. (A) holds the offset value to the desired
                     4468  ;   vector address.
                     4469  ;   The accumulator has to be multiplied by 2 before addition to the index
                     4470  ;   register H:X, since each entry in the vector table is of 2 byte length.
                     4471  ;   Since the indexed addressing mode for LDHX is missing, we cannot load
                     4472  ;   H:X with the content of memory that H:X is pointing to. To do so, we
                     4473  ;   load (A) with the Hi byte of the vector address, using indexed
                     4474  ;   addressing with zero offset, and load (X) with the Lo byte of the vector
                     4475  ;   address, again, using indexed addressing, but, with an offset of 1.
                     4476  ;   After copying (A) to (H) via push/pull operations, (H:X) contains the
                     4477  ;   vector address.
                     4478  ;   NOTE! After the final "pulh" instruction, a "jmp ,x" will jump the
                     4479  ;   program to the desired vector address.
                     4480  ;***************************************************************************
                     4481  
                     4482  GET_VECT_ADDR:
 900D [01] 48        4483       lsla             ; Logical shift left accumulator(multiply by 2)
 900E [02] 89        4484       pshx             ; Push value in index register Lo byte to stack
 900F [02] 8B        4485       pshh             ; Push value in index register Hi byte to stack
 9010 [04] 9EEB02    4486       add     2,SP     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location
                     4487                        ; on stack, and SP=A, so (A=X+A)
 9013 [01] 97        4488       tax              ; Transfer value in accumulator to index register Lo
                     4489                        ; byte(Copy result in to index register Lo byte)
 9014 [02] 86        4490       pula             ; Pull value from stack to accumulator((H)->(A))
 9015 [02] A900      4491       adc     #$00     ; Add with carry ((A)<-(A)+(M)+(C))
                     4492                        ;(This just adds the carry, if applicable)
 9017 [02] 87        4493       psha             ; Push value in accumulator to stack
                     4494                        ;(modified (H) -> stack)


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 37
MV_ECU


 9018 [02] 8A        4495       pulh             ; Pull value from stack to index register Hi byte
                     4496                        ;(modified (H)->(H)
 9019 [02] 86        4497       pula             ; Pull value from stack to accumulator
                     4498                        ;(clean up stack)
 901A [02] F6        4499       lda     ,x       ; Load accumulator with value in index register Lo
                     4500                        ;(vector Hi byte)
 901B [03] EE01      4501       ldx     1,x      ; Load index register Lo byte with value in 1st
                     4502                        ; location on stack(vector Lo byte)
 901D [02] 87        4503       psha             ; Push value in accumulator to stack
 901E [02] 8A        4504       pulh             ; Pull value from stack to accumulator((A)->(H)
                     4505                        ;((H:X) now contains the desired vector address)
 901F [04] 81        4506       rts              ; Return from subroutine
                     4507  
                     4508  
                     4509  ;***************************************************************************
                     4510  ; - This subroutine does an effective address calculation, adding the
                     4511  ;   unsigned 8 bit value in the accumulator, to the index register (H:X).
                     4512  ;   Since there is no instruction available which can add the contents of
                     4513  ;   A to H:X, the contents of H:X must first be saved to memory(stack), to
                     4514  ;   allow a memory to register addition operation. H:X is modified.
                     4515  ;   (A) contains the value of the offset from address at (H:X)
                     4516  ;***************************************************************************
                     4517  
                     4518  ADD_A_TO_HX:
 9020 [02] 89        4519       pshx            ; Push value in index register Lo byte to stack
 9021 [02] 8B        4520       pshh            ; Push value in index register Hi byte to stack
 9022 [02] 87        4521       psha            ; push value in accumulator to stack
 9023 [02] 95        4522       tsx             ; Transfer value in stack to index register Lo byte
                     4523                       ;((A)->(X))
 9024 [03] EB02      4524       add     2,x     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location on
                     4525                       ; stack, and x=A, so (A=X+A)
 9026 [03] E702      4526       sta     2,x     ; Copy result to 2nd location on stack
 9028 [01] 4F        4527       clra            ; Clear accumulator(A=0)
 9029 [03] E901      4528       adc     1,x     ; Add with carry ((A)<-(A)+(M)+(C)) In this case
                     4529                       ; 1=1st location on stack, and x=A=0, so (A=H+C+A)
 902B [03] E701      4530       sta     1,x     ; Copy result to 1st location on stack
 902D [02] 86        4531       pula            ; Pull value from stack to accumulator
 902E [02] 8A        4532       pulh            ; Pull value from stack to index register Hi byte
 902F [02] 88        4533       pulx            ; Pull value from stack to index register Lo byte
                     4534                       ;(H:X) now contains ((H:X+(A))
 9030 [04] 81        4535       rts             ; return from subroutine
                     4536  
                     4537  
                     4538  ;***************************************************************************
                     4539  ; - This subroutine loads into A, the contents of a location pointed to by
                     4540  ;   H:X plus A. H:X is preserved. This operation emulates a "lda A,X"
                     4541  ;   instruction, so called "accumulator-offset indexed addressing mode",
                     4542  ;   which is not available on the HC08 family instruction set.
                     4543  ;   (A) contains the value of the offset from address at (H:X)
                     4544  ;***************************************************************************
                     4545  
                     4546  LDA_W_HX_PL_A:
 9031 [02] 89        4547       pshx             ; Push value in index register Lo byte to stack
 9032 [02] 8B        4548       pshh             ; Push value in index register Hi byte to stack
                     4549                        ;(These 2 instructions save the original (H:X))
 9033 [02] 89        4550       pshx             ; Push value in index register Lo byte to stack
 9034 [02] 8B        4551       pshh             ; Push value in index register Hi byte to stack
                     4552                        ;(These 2 instructions are for the working H:X
 9035 [04] 9EEB02    4553       add     2,SP     ; Add ((A)<-(A)+(M)) In this case, 2=2nd location
                     4554                        ; on stack, and SP=A, so (A=X+A)
 9038 [01] 97        4555       tax              ; Transfer value in accumulator to index register Lo
                     4556                        ; byte(Copy result in to index register Lo byte)
 9039 [02] 86        4557       pula             ; Pull value from stack to accumulator((H)->(A))
 903A [02] A900      4558       adc     #$00     ; Add with carry ((A)<-(A)+(M)+(C))
                     4559                        ;(This just adds the carry, if applicable)
 903C [02] 87        4560       psha             ; Push value in accumulator to stack
                     4561                        ;(modified (H) to stack)
 903D [02] 8A        4562       pulh             ; Pull value from stack to index register Hi byte
                     4563                        ;(modified (H) to (H)
 903E [02] A701      4564       ais     #$01     ; Add immediate value of 1 to SP register
                     4565                        ;(clean up stack)
 9040 [02] F6        4566       lda     ,x       ; Load accumulator with value in index register Lo
                     4567                        ; byte
                     4568                        ;(A now contains the value in the location at H:X+A)
 9041 [02] 8A        4569       pulh             ; Pull value from stack to index register Hi byte
 9042 [02] 88        4570       pulx             ; Pull value from stack to index register Lo byte
                     4571                        ;(these 2 instructions restore (H:X))
 9043 [04] 81        4572       rts              ; return from subroutine
                     4573  
                     4574  ;***************************************************************************
                     4575  ; - This subroutine sends an instruction byte to position the cursor in the
                     4576  ;   top left corner of the display.
                     4577  ;***************************************************************************
                     4578  
                     4579  VFD_START_TOP:
                     4580  
                     4581  ;***************************************************************************
                     4582  ; - Set up to send an instruction  byte.
                     4583  ;***************************************************************************
                     4584  
 9044 [04] 1901      4585       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B(PTB4)
 9046 [04] 1B01      4586       bclr    Rd_Wrt,PORTB     ; Clear "Rd_Wrt" bit of Port B(PTB5)
                     4587                                ;(Write Operation)
 9048 [04] 1D01      4588       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of Port B(PTB6)
                     4589                                ;(Send an instruction value)
                     4590  
                     4591  
                     4592  ;***************************************************************************
                     4593  ; - Set cursor top left Hi nibble
                     4594  ;***************************************************************************
                     4595  
 904A [04] 6E0802    4596       mov     #$08,PORTC       ; Move %00001000 into PortC
                     4597                                ;(Set bit4=DB7)
 904D [04] 1801      4598       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 904F [05] CD9108    4599       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 9052 [04] 1901      4600       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4601  
                     4602  ;***************************************************************************
                     4603  ; - Set cursor top left Lo nibble
                     4604  ;***************************************************************************
                     4605  
 9054 [04] 6E0002    4606       mov     #$00,PORTC       ; Move %00000000 into PortC
 9057 [04] 1801      4607       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 9059 [05] CD90FC    4608       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 905C [04] 1901      4609       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 905E [05] CD9108    4610       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 9061 [04] 81        4611       rts                      ; Return from subroutine
                     4612  
                     4613  
                     4614  ;***************************************************************************
                     4615  ; - This subroutine sends an instruction byte to position the cursor in the
                     4616  ;   bottom left corner of the display.
                     4617  ;***************************************************************************
                     4618  
                     4619  VFD_START_BOT:
                     4620  
                     4621  ;***************************************************************************
                     4622  ; - Set up to send an instruction  byte.
                     4623  ;***************************************************************************
                     4624  
 9062 [04] 1901      4625       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B(PTB4)
 9064 [04] 1B01      4626       bclr    Rd_Wrt,PORTB     ; Clear "Rd_Wrt" bit of Port B(PTB5)
                     4627                                ;(Write Operation)
 9066 [04] 1D01      4628       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of Port B(PTB6)
                     4629                                ;(Send an instruction value)
                     4630  


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 38
MV_ECU


                     4631  
                     4632  ;***************************************************************************
                     4633  ; - Set cursor bottom left Hi nibble
                     4634  ;***************************************************************************
                     4635  
 9068 [04] 6E0C02    4636       mov     #$0C,PORTC       ; Move %00001100 into PortC
                     4637                                ;(Set bit4=DB7 and bit3=DB6)
 906B [04] 1801      4638       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 906D [05] CD9108    4639       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 9070 [04] 1901      4640       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4641  
                     4642  ;***************************************************************************
                     4643  ; - Set cursor bottom left Lo nibble
                     4644  ;***************************************************************************
                     4645  
 9072 [04] 6E0002    4646       mov     #$00,PORTC       ; Move %00000000 into PortC
 9075 [04] 1801      4647       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 9077 [05] CD90FC    4648       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
 907A [04] 1901      4649       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 907C [05] CD9108    4650       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 907F [04] 81        4651       rts                      ; Return from subroutine
                     4652  
                     4653  
                     4654  ;***************************************************************************
                     4655  ; - This subroutine takes a single ASCII value, held in "value" variable
                     4656  ;   and sets the appropriate bits of Port C. Interface with the VFD display
                     4657  ;   is 4 bit, so, to send an 8 bit value, bits 4,5,6 and 7 are sent first,
                     4658  ;   then the bits 0,1,2 and 3 are sent.
                     4659  ;***************************************************************************
                     4660  
                     4661  VFD_SEND:
                     4662  
                     4663  ;***************************************************************************
                     4664  ; - Data Bit 4 (PTC0)
                     4665  ;***************************************************************************
                     4666  
                     4667  CHK_DB4:
 9080 [03] B67E      4668       lda     value       ; Load accumulator with value in "value" variable
 9082 [02] A510      4669       bit     #DB4m       ; Logical AND (A)&(M)%00010000
 9084 [03] 2604      4670       bne     SET_DB4     ; If Z bit of CCR is clear, branch to SET_DB4:
 9086 [04] 1102      4671       bclr    DB4,PORTC   ; Clear "DB4" bit of Port C(bit0)
 9088 [03] 2002      4672       bra     CHK_DB5     ; Branch to CHK_DB5
                     4673  
                     4674  SET_DB4:
 908A [04] 1002      4675       bset    DB4,PORTC   ; Set "DB4" bit of Port C(bit0)
                     4676  
                     4677  ;***************************************************************************
                     4678  ; - Data Bit 5 (PTC1)
                     4679  ;***************************************************************************
                     4680  
                     4681  CHK_DB5:
 908C [03] B67E      4682       lda     value       ; Load accumulator with value in "value" variable
 908E [02] A520      4683       bit     #DB5m       ; Logical AND (A)&(M)%00100000
 9090 [03] 2604      4684       bne     SET_DB5     ; If Z bit of CCR is clear, branch to SET_DB5:
 9092 [04] 1302      4685       bclr    DB5,PORTC   ; Clear "DB5" bit of Port C(bit1)
 9094 [03] 2002      4686       bra     CHK_DB6     ; Branch to CHK_DB6
                     4687  
                     4688  SET_DB5:
 9096 [04] 1202      4689       bset    DB5,PORTC   ; Set "DB5" bit of Port C(bit1)
                     4690  
                     4691  ;***************************************************************************
                     4692  ; - Data Bit 6 (PTC2)
                     4693  ;***************************************************************************
                     4694  
                     4695  CHK_DB6:
 9098 [03] B67E      4696       lda     value       ; Load accumulator with value in "value" variable
 909A [02] A540      4697       bit     #DB6m       ; Logical AND (A)&(M)%01000000
 909C [03] 2604      4698       bne     SET_DB6     ; If Z bit of CCR is clear, branch to SET_DB6:
 909E [04] 1502      4699       bclr    DB6,PORTC   ; Clear "DB6" bit of Port C(bit2)
 90A0 [03] 2002      4700       bra     CHK_DB7     ; Branch to CHK_DB7
                     4701  
                     4702  SET_DB6:
 90A2 [04] 1402      4703       bset    DB6,PORTC   ; Set "DB6" bit of Port C(bit2)
                     4704  
                     4705  ;***************************************************************************
                     4706  ; - Data Bit 7 (PTC3)
                     4707  ;***************************************************************************
                     4708  
                     4709  CHK_DB7:
 90A4 [03] B67E      4710       lda     value       ; Load accumulator with value in "value" variable
 90A6 [02] A580      4711       bit     #DB7m       ; Logical AND (A)&(M)%10000000
 90A8 [03] 2604      4712       bne     SET_DB7     ; If Z bit of CCR is clear, branch to SET_DB7:
 90AA [04] 1702      4713       bclr    DB7,PORTC   ; Clear "DB7" bit of Port C(bit3)
 90AC [03] 2002      4714       bra     HI_NIB      ; Branch to HI_NIB:
                     4715  
                     4716  SET_DB7:
 90AE [04] 1602      4717       bset    DB7,PORTC   ; Set "DB7" bit of Port C(bit3)
                     4718  
                     4719  ;***************************************************************************
                     4720  ; - Send the Hi nibble
                     4721  ;***************************************************************************
                     4722  
                     4723  HI_NIB:
 90B0 [04] 1C01      4724       bset    Reg_Sel,PORTB    ; Set "Reg_Sel" bit of PortB(RS=1)
 90B2 [05] CD9108    4725       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90B5 [04] 1801      4726       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 90B7 [05] CD9108    4727       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
                     4728  
                     4729  ;***************************************************************************
                     4730  ; - Clear Enable line to set up Lo nibble
                     4731  ;***************************************************************************
                     4732  
 90BA [04] 1901      4733       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
                     4734  
                     4735  ;***************************************************************************
                     4736  ; - Data Bit 0 (PTC0)
                     4737  ;***************************************************************************
                     4738  
                     4739  CHK_DB0:
 90BC [03] B67E      4740       lda     value       ; Load accumulator with value in "value" variable
 90BE [02] A501      4741       bit     #DB0m       ; Logical AND (A)&(M)%00000001
 90C0 [03] 2604      4742       bne     SET_DB0     ; If Z bit of CCR is clear, branch to SET_DB0:
 90C2 [04] 1102      4743       bclr    DB0,PORTC   ; Clear "DB0" bit of Port C(bit0)
 90C4 [03] 2002      4744       bra     CHK_DB1     ; Branch to CHK_DB1
                     4745  
                     4746  SET_DB0:
 90C6 [04] 1002      4747       bset    DB0,PORTC   ; Set "DB0" bit of Port C(bit0)
                     4748  
                     4749  ;***************************************************************************
                     4750  ; - Data Bit 1 (PTC1)
                     4751  ;***************************************************************************
                     4752  
                     4753  CHK_DB1:
 90C8 [03] B67E      4754       lda     value       ; Load accumulator with value in "value" variable
 90CA [02] A502      4755       bit     #DB1m       ; Logical AND (A)&(M)%00000010
 90CC [03] 2604      4756       bne     SET_DB1     ; If Z bit of CCR is clear, branch to SET_DB1:
 90CE [04] 1302      4757       bclr    DB1,PORTC   ; Clear "DB1" bit of Port C(bit1)
 90D0 [03] 2002      4758       bra     CHK_DB2     ; Branch to CHK_DB2
                     4759  
                     4760  SET_DB1:
 90D2 [04] 1202      4761       bset    DB1,PORTC   ; Set "DB1" bit of Port C(bit1)
                     4762  
                     4763  ;***************************************************************************
                     4764  ; - Data Bit 2 (PTC2)
                     4765  ;***************************************************************************
                     4766  


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 39
MV_ECU


                     4767  CHK_DB2:
 90D4 [03] B67E      4768       lda     value       ; Load accumulator with value in "value" variable
 90D6 [02] A504      4769       bit     #DB2m       ; Logical AND (A)&(M)%00000100
 90D8 [03] 2604      4770       bne     SET_DB2     ; If Z bit of CCR is clear, branch to SET_DB2:
 90DA [04] 1502      4771       bclr    DB2,PORTC   ; Clear "DB2" bit of Port C(bit2)
 90DC [03] 2002      4772       bra     CHK_DB3     ; Branch to CHK_DB3
                     4773  
                     4774  SET_DB2:
 90DE [04] 1402      4775       bset    DB2,PORTC   ; Set "DB2" bit of Port C(bit2)
                     4776  
                     4777  ;***************************************************************************
                     4778  ; - Data Bit 3 (PTC3)
                     4779  ;***************************************************************************
                     4780  
                     4781  CHK_DB3:
 90E0 [03] B67E      4782       lda     value       ; Load accumulator with value in "value" variable
 90E2 [02] A508      4783       bit     #DB3m       ; Logical AND (A)&(M)%00001000
 90E4 [03] 2604      4784       bne     SET_DB3     ; If Z bit of CCR is clear, branch to SET_DB3:
 90E6 [04] 1702      4785       bclr    DB3,PORTC   ; Clear "DB3" bit of Port C(bit3)
 90E8 [03] 2002      4786       bra     LO_NIB      ; Branch to LO_NIB:
                     4787  
                     4788  SET_DB3:
 90EA [04] 1602      4789       bset    DB3,PORTC   ; Set "DB3" bit of Port C(bit3)
                     4790  
                     4791  ;***************************************************************************
                     4792  ; - Send the Lo nibble
                     4793  ;***************************************************************************
                     4794  
                     4795  LO_NIB:
 90EC [04] 1801      4796       bset    Enable,PORTB     ; Set "Enable" bit of Port B (PTB4)("En"=1)
 90EE [05] CD90FC    4797       jsr     LONG_DELAY       ; Jump to subroutine at LONG_DELAY:
                     4798                                ;(timing requirement)
                     4799  
                     4800  ;***************************************************************************
                     4801  ; - Clear Enable and Register Select to set up for next transmit
                     4802  ;***************************************************************************
                     4803  
 90F1 [04] 1901      4804       bclr    Enable,PORTB     ; Clear "Enable" bit of Port B (PTB4)("En"=0)
 90F3 [05] CD9108    4805       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90F6 [04] 1D01      4806       bclr    Reg_Sel,PORTB    ; Clear "Reg_Sel" bit of PortB(RS=0)
 90F8 [05] CD9108    4807       jsr     SHORT_DELAY      ; Jump to subroutine at SHORT_DELAY:
 90FB [04] 81        4808       rts                      ; Return from subroutine
                     4809  
                     4810  
                     4811  ;****************************************************************************
                     4812  ; - This is the delay time from the point at which the data bits have been
                     4813  ;   configured, and the "enable" bit set, to the point at which the "enable"
                     4814  ;   bit is cleared.(min 0.45uS)
                     4815  ;   One pass through the loop takes ~1.5uS, bus frequency of ~8mHZ
                     4816  ;****************************************************************************
                     4817  
                     4818  LONG_DELAY:
 90FC [03] 3F69      4819       clr     tmp1       ; Clear tmp1 variable
                     4820  
                     4821  WAIT_4:
 90FE [03] B669      4822       lda     tmp1       ; Load accumulator with value in tmp1 variable
 9100 [01] 4C        4823       inca               ; Increment value in accumulator
 9101 [03] B769      4824       sta     tmp1       ; Copy to tmp1 variable
 9103 [02] A102      4825       cmp     #$02       ; Compare value in accumulator with decimal 2
 9105 [03] 25F7      4826       blo     WAIT_4     ; If C bit of CCR is set, (A<M), branch to
                     4827                          ; WAIT_4:(~3uS delay for timing requirements)
 9107 [04] 81        4828       rts                ; Return from subroutine
                     4829  
                     4830  
                     4831  ;****************************************************************************
                     4832  ; - This is the delay time from the point at which the "enable" bit has been
                     4833  ;   cleared, to the point where the data bits can be re-configured.
                     4834  ;   (min 0.01uS) One NOP takes ~0.125uS, bus frequency of ~8mHZ
                     4835  ;****************************************************************************
                     4836  
                     4837  SHORT_DELAY:
 9108 [01] 9D        4838       nop                ; No operation(1 bus cycle)
 9109 [04] 81        4839       rts                ; Return from subroutine
                     4840  
                     4841  
                     4842  ;****************************************************************************
                     4843  ; - This subroutine compares all the characters on the bottom line commanded,
                     4844  ;   to those of the previous bottom line. If they are different, update the
                     4845  ;   bottom line, otherwise, skip over. This is to eliminate display
                     4846  ;   "digit rattle" caused by rapid screen updates.
                     4847  ;****************************************************************************
                     4848  
                     4849  CMP_BOTLIN:
 910A [03] B685      4850       lda     Botlin0         ; Load accumulator with value in "Botlin0"
 910C [03] B199      4851       cmp     Botlin0L        ; Compare it with the value in "Botlin0L"
 910E [03] 2705      4852       beq     NO_CHNG_BL0     ; If Z bit of CCR is set, branch to NO_CHNG_BL0
                     4853                               ;(A=M)
 9110 [03] B799      4854       sta     Botlin0L        ; Copy "Botlin0" to "Botlin0L"
 9112 [03] CC91E8    4855       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4856  
                     4857  NO_CHNG_BL0:
 9115 [03] B686      4858       lda     Botlin1         ; Load accumulator with value in "Botlin1"
 9117 [03] B19A      4859       cmp     Botlin1L        ; Compare it with the value in "Botlin1L"
 9119 [03] 2705      4860       beq     NO_CHNG_BL1     ; If Z bit of CCR is set, branch to NO_CHNG_BL1
                     4861                               ;(A=M)
 911B [03] B79A      4862       sta     Botlin1L        ; Copy "Botlin1" to "Botlin1L"
 911D [03] CC91E8    4863       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4864  
                     4865  NO_CHNG_BL1:
 9120 [03] B687      4866       lda     Botlin2         ; Load accumulator with value in "Botlin2"
 9122 [03] B19B      4867       cmp     Botlin2L        ; Compare it with the value in "Botlin2L"
 9124 [03] 2705      4868       beq     NO_CHNG_BL2     ; If Z bit of CCR is set, branch to NO_CHNG_BL2
                     4869                               ;(A=M)
 9126 [03] B79B      4870       sta     Botlin2L        ; Copy "Botlin2" to "Botlin2L"
 9128 [03] CC91E8    4871       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4872  
                     4873  NO_CHNG_BL2:
 912B [03] B688      4874       lda     Botlin3         ; Load accumulator with value in "Botlin3"
 912D [03] B19C      4875       cmp     Botlin3L        ; Compare it with the value in "Botlin3L"
 912F [03] 2705      4876       beq     NO_CHNG_BL3     ; If Z bit of CCR is set, branch to NO_CHNG_BL3
                     4877                               ;(A=M)
 9131 [03] B79C      4878       sta     Botlin3L        ; Copy "Botlin3" to "Botlin3L"
 9133 [03] CC91E8    4879       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4880  
                     4881  NO_CHNG_BL3:
 9136 [03] B689      4882       lda     Botlin4         ; Load accumulator with value in "Botlin4"
 9138 [03] B19D      4883       cmp     Botlin4L        ; Compare it with the value in "Botlin4L"
 913A [03] 2705      4884       beq     NO_CHNG_BL4     ; If Z bit of CCR is set, branch to NO_CHNG_BL4
                     4885                               ;(A=M)
 913C [03] B79D      4886       sta     Botlin4L        ; Copy "Botlin4" to "Botlin4L"
 913E [03] CC91E8    4887       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4888  
                     4889  NO_CHNG_BL4:
 9141 [03] B68A      4890       lda     Botlin5         ; Load accumulator with value in "Botlin5"
 9143 [03] B19E      4891       cmp     Botlin5L        ; Compare it with the value in "Botlin5L"
 9145 [03] 2705      4892       beq     NO_CHNG_BL5     ; If Z bit of CCR is set, branch to NO_CHNG_BL5
                     4893                               ;(A=M)
 9147 [03] B79E      4894       sta     Botlin5L        ; Copy "Botlin5" to "Botlin5L"
 9149 [03] CC91E8    4895       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4896  
                     4897  NO_CHNG_BL5:
 914C [03] B68B      4898       lda     Botlin6         ; Load accumulator with value in "Botlin6"
 914E [03] B19F      4899       cmp     Botlin6L        ; Compare it with the value in "Botlin6L"
 9150 [03] 2705      4900       beq     NO_CHNG_BL6     ; If Z bit of CCR is set, branch to NO_CHNG_BL6
                     4901                               ;(A=M)
 9152 [03] B79F      4902       sta     Botlin6L        ; Copy "Botlin6" to "Botlin6L"


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 40
MV_ECU


 9154 [03] CC91E8    4903       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4904  
                     4905  NO_CHNG_BL6:
 9157 [03] B68C      4906       lda     Botlin7         ; Load accumulator with value in "Botlin7"
 9159 [03] B1A0      4907       cmp     Botlin7L        ; Compare it with the value in "Botlin7L"
 915B [03] 2705      4908       beq     NO_CHNG_BL7     ; If Z bit of CCR is set, branch to NO_CHNG_BL7
                     4909                               ;(A=M)
 915D [03] B7A0      4910       sta     Botlin7L        ; Copy "Botlin7" to "Botlin7L"
 915F [03] CC91E8    4911       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4912  
                     4913  NO_CHNG_BL7:
 9162 [03] B68D      4914       lda     Botlin8         ; Load accumulator with value in "Botlin8"
 9164 [03] B1A1      4915       cmp     Botlin8L        ; Compare it with the value in "Botlin8L"
 9166 [03] 2705      4916       beq     NO_CHNG_BL8     ; If Z bit of CCR is set, branch to NO_CHNG_BL8
                     4917                               ;(A=M)
 9168 [03] B7A1      4918       sta     Botlin8L        ; Copy "Botlin8" to "Botlin8L"
 916A [03] CC91E8    4919       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4920  
                     4921  NO_CHNG_BL8:
 916D [03] B68E      4922       lda     Botlin9         ; Load accumulator with value in "Botlin9"
 916F [03] B1A2      4923       cmp     Botlin9L        ; Compare it with the value in "Botlin9L"
 9171 [03] 2705      4924       beq     NO_CHNG_BL9     ; If Z bit of CCR is set, branch to NO_CHNG_BL9
                     4925                               ;(A=M)
 9173 [03] B7A2      4926       sta     Botlin9L        ; Copy "Botlin9" to "Botlin9L"
 9175 [03] CC91E8    4927       jmp     BOTLIN_CHNG     ; Jump to BOTLIN_CHNG:
                     4928  
                     4929  NO_CHNG_BL9:
 9178 [03] B68F      4930       lda     Botlin10         ; Load accumulator with value in "Botlin10"
 917A [03] B1A3      4931       cmp     Botlin10L        ; Compare it with the value in "Botlin10L"
 917C [03] 2705      4932       beq     NO_CHNG_BL10     ; If Z bit of CCR is set, branch to NO_CHNG_BL10
                     4933                                ;(A=M)
 917E [03] B7A3      4934       sta     Botlin10L        ; Copy "Botlin10" to "Botlin10L"
 9180 [03] CC91E8    4935       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4936  
                     4937  NO_CHNG_BL10:
 9183 [03] B690      4938       lda     Botlin11         ; Load accumulator with value in "Botlin11"
 9185 [03] B1A4      4939       cmp     Botlin11L        ; Compare it with the value in "Botlin11L"
 9187 [03] 2705      4940       beq     NO_CHNG_BL11     ; If Z bit of CCR is set, branch to NO_CHNG_BL11
                     4941                                ;(A=M)
 9189 [03] B7A4      4942       sta     Botlin11L        ; Copy "Botlin11" to "Botlin11L"
 918B [03] CC91E8    4943       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4944  
                     4945  NO_CHNG_BL11:
 918E [03] B691      4946       lda     Botlin12         ; Load accumulator with value in "Botlin12"
 9190 [03] B1A5      4947       cmp     Botlin12L        ; Compare it with the value in "Botlin12L"
 9192 [03] 2705      4948       beq     NO_CHNG_BL12     ; If Z bit of CCR is set, branch to NO_CHNG_BL12
                     4949                                ;(A=M)
 9194 [03] B7A5      4950       sta     Botlin12L        ; Copy "Botlin12" to "Botlin12L"
 9196 [03] CC91E8    4951       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4952  
                     4953  NO_CHNG_BL12:
 9199 [03] B692      4954       lda     Botlin13         ; Load accumulator with value in "Botlin13"
 919B [03] B1A6      4955       cmp     Botlin13L        ; Compare it with the value in "Botlin13L"
 919D [03] 2705      4956       beq     NO_CHNG_BL13     ; If Z bit of CCR is set, branch to NO_CHNG_BL13
                     4957                                ;(A=M)
 919F [03] B7A6      4958       sta     Botlin13L        ; Copy "Botlin13" to "Botlin13L"
 91A1 [03] CC91E8    4959       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4960  
                     4961  NO_CHNG_BL13:
 91A4 [03] B693      4962       lda     Botlin14         ; Load accumulator with value in "Botlin14"
 91A6 [03] B1A7      4963       cmp     Botlin14L        ; Compare it with the value in "Botlin14L"
 91A8 [03] 2705      4964       beq     NO_CHNG_BL14     ; If Z bit of CCR is set, branch to NO_CHNG_BL14
                     4965                                ;(A=M)
 91AA [03] B7A7      4966       sta     Botlin14L        ; Copy "Botlin14" to "Botlin14L"
 91AC [03] CC91E8    4967       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4968  
                     4969  NO_CHNG_BL14:
 91AF [03] B694      4970       lda     Botlin15         ; Load accumulator with value in "Botlin15"
 91B1 [03] B1A8      4971       cmp     Botlin15L        ; Compare it with the value in "Botlin15L"
 91B3 [03] 2705      4972       beq     NO_CHNG_BL15     ; If Z bit of CCR is set, branch to NO_CHNG_BL15
                     4973                                ;(A=M)
 91B5 [03] B7A8      4974       sta     Botlin15L        ; Copy "Botlin15" to "Botlin15L"
 91B7 [03] CC91E8    4975       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4976  
                     4977  NO_CHNG_BL15:
 91BA [03] B695      4978       lda     Botlin16         ; Load accumulator with value in "Botlin16"
 91BC [03] B1A9      4979       cmp     Botlin16L        ; Compare it with the value in "Botlin16L"
 91BE [03] 2705      4980       beq     NO_CHNG_BL16     ; If Z bit of CCR is set, branch to NO_CHNG_BL16
                     4981                                ;(A=M)
 91C0 [03] B7A9      4982       sta     Botlin16L        ; Copy "Botlin16" to "Botlin16L"
 91C2 [03] CC91E8    4983       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4984  
                     4985  NO_CHNG_BL16:
 91C5 [03] B696      4986       lda     Botlin17         ; Load accumulator with value in "Botlin17"
 91C7 [03] B1AA      4987       cmp     Botlin17L        ; Compare it with the value in "Botlin17L"
 91C9 [03] 2705      4988       beq     NO_CHNG_BL17     ; If Z bit of CCR is set, branch to NO_CHNG_BL17
                     4989                                ;(A=M)
 91CB [03] B7AA      4990       sta     Botlin17L        ; Copy "Botlin17" to "Botlin17L"
 91CD [03] CC91E8    4991       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     4992  
                     4993  NO_CHNG_BL17:
 91D0 [03] B697      4994       lda     Botlin18         ; Load accumulator with value in "Botlin18"
 91D2 [03] B1AB      4995       cmp     Botlin18L        ; Compare it with the value in "Botlin18L"
 91D4 [03] 2705      4996       beq     NO_CHNG_BL18     ; If Z bit of CCR is set, branch to NO_CHNG_BL18
                     4997                                ;(A=M)
 91D6 [03] B7AB      4998       sta     Botlin18L        ; Copy "Botlin18" to "Botlin18L"
 91D8 [03] CC91E8    4999       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     5000  
                     5001  NO_CHNG_BL18:
 91DB [03] B698      5002       lda     Botlin19         ; Load accumulator with value in "Botlin19"
 91DD [03] B1AC      5003       cmp     Botlin19L        ; Compare it with the value in "Botlin19L"
 91DF [03] 2705      5004       beq     NO_CHNG_BL19     ; If Z bit of CCR is set, branch to NO_CHNG_BL19
                     5005                                ;(A=M)
 91E1 [03] B7AC      5006       sta     Botlin19L        ; Copy "Botlin19" to "Botlin19L"
 91E3 [03] CC91E8    5007       jmp     BOTLIN_CHNG      ; Jump to BOTLIN_CHNG:
                     5008  
                     5009  NO_CHNG_BL19:
 91E6 [03] 2004      5010       bra     NO_CHNG_BOTLIN   ; Branch to NO_CHNG_BOTLIN:
                     5011  
                     5012  BOTLIN_CHNG:
 91E8 [04] 1A53      5013       bset    LinChng,flags    ; Set "Linchng" bit of "flags" variable
 91EA [03] 2002      5014       bra     CMP_BOTLIN_DONE  ; Branch to CMP_BOTLIN_DONE:
                     5015  
                     5016  NO_CHNG_BOTLIN:
 91EC [04] 1B53      5017       bclr    LinChng,flags    ; Clear "Linchng" bit of "flags" variable
                     5018  
                     5019  CMP_BOTLIN_DONE:
 91EE [04] 81        5020       rts                      ; Return from subroutine
                     5021  
                     5022  ;***************************************************************************
                     5023  ;
                     5024  ; -------------------- Ordered Table Search Subroutine ---------------------
                     5025  ;
                     5026  ;  X is pointing to the start of the first value in the table
                     5027  ;  tmp1:2 initially hold the start of table address,
                     5028  ;  then they hold the bound values
                     5029  ;  tmp3 is the end of the table ("n" elements - 1)
                     5030  ;  tmp4 is the comparison value
                     5031  ;  tmp5 is the index result - if zero then comp value is less
                     5032  ;  than beginning of table, and if equal to "n" elements then it is
                     5033  ;  rail-ed at upper end
                     5034  ;
                     5035  ;***************************************************************************
                     5036  
                     5037  ORD_TABLE_FIND:
 91EF [03] 3F6D      5038       clr     tmp5     ; Clear tmp5 variable


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 41
MV_ECU


 91F1 [04] 5569      5039       ldhx    tmp1     ; Load high part of index register with value in tmp1
 91F3 [02] F6        5040       lda     ,x            ; Load accumulator with low part of index register???
 91F4 [03] B769      5041       sta     tmp1     ; Copy to tmp1 variable
 91F6 [03] B76A      5042       sta     tmp2     ; Copy to tmp2 variable
                     5043  
                     5044  REENT:
 91F8 [01] 5C        5045       incx                    ; Increment low part of index register
 91F9 [04] 3C6D      5046       inc     tmp5            ; Increment tmp5 variable
 91FB [05] 4E6A69    5047       mov     tmp2,tmp1       ; Move value in tmp2 variable to tmp1 variable
 91FE [02] F6        5048       lda     ,x              ; Load accumulator with value in index reg Lo??
 91FF [03] B76A      5049       sta     tmp2            ; Copy to tmp2 variable
 9201 [03] B16C      5050       cmp     tmp4            ; Compare it with tmp4 variable
 9203 [03] 2206      5051       bhi     GOT_ORD_NUM     ; If higher, branch to GOT_ORD_NUM lable
 9205 [03] B66D      5052       lda     tmp5            ; Load accumulator with value in tmp5 variable
 9207 [03] B16B      5053       cmp     tmp3            ; Compare it with value in tmp3 variable
 9209 [03] 26ED      5054       bne     REENT           ; If the Z bit of CCR is clesr, branch to REENT:
                     5055  
                     5056  GOT_ORD_NUM:
 920B [04] 81        5057       rts                     ; Return from subroutine
                     5058  
                     5059  
                     5060  ;****************************************************************************
                     5061  ;
                     5062  ; ------------------ Linear Interpolation - 2D Subroutine -------------------
                     5063  ;
                     5064  ; Graph Plot         Z2
                     5065  ;                   Y2
                     5066  ;               X
                     5067  ;               Y
                     5068  ;         X1
                     5069  ;         Y1
                     5070  ;            (y2 - y1)
                     5071  ;  Y = Y1 +  --------- * (x - x1)
                     5072  ;            (x2 - x1)
                     5073  ;
                     5074  ;   tmp1 = x1
                     5075  ;   tmp2 = x2
                     5076  ;   tmp3 = y1
                     5077  ;   tmp4 = y2
                     5078  ;   tmp5 = x
                     5079  ;   tmp6 = y
                     5080  ;***************************************************************************
                     5081  
                     5082  LININTERP:
 920C [03] 3F6F      5083       clr     tmp7          ; Clear tmp7 variable (This is the negative slope
                     5084                             ; detection bit) (tmp7 = 0)
 920E [05] 4E6B6E    5085       mov     tmp3,tmp6     ; Move value in tmp3 variable to tmp6 variable
                     5086                             ; (Y1 to tmp6)
                     5087  
                     5088  CHECK_LESS_THAN:
 9211 [03] B66D      5089       lda     tmp5               ; Load accumulator with value in tmp5 variable
                     5090                                  ; (x)
 9213 [03] B169      5091       cmp     tmp1               ; Compare it with value in tmp1 variable
                     5092                                  ; (x1)
 9215 [03] 2202      5093       bhi     CHECK_GREATER_THAN ; If higher, branch to CHECK_GREATER_THAN:
                     5094                                  ; (X>X1)
 9217 [03] 2044      5095       bra     DONE_WITH_INTERP        ; Branch to DONE_WITH_INTERP: (else (Y=Y1))
                     5096  
                     5097  CHECK_GREATER_THAN:
 9219 [03] B66D      5098       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     5099                                ; (x)
 921B [03] B16A      5100       cmp     tmp2             ; Compare it with value in tmp2 variable
                     5101                                ; (X2)
 921D [03] 2505      5102       blo     DO_INTERP        ; If lower, branch to DO_INTERP lable
                     5103                                ; (X<X2)
 921F [05] 4E6C6E    5104       mov     tmp4,tmp6        ; Move value in tmp4 variable to tmp6 variable
                     5105                                ; (Y2 to tmp6)
 9222 [03] 2039      5106       bra     DONE_WITH_INTERP ; Branch to DONE_WITH_INTERP lable (else (Y=Y2))
                     5107  
                     5108  DO_INTERP:
 9224 [05] 4E6B6E    5109       mov     tmp3,tmp6        ; Move value in tmp3 variable to tmp6 variable
                     5110                                ; (Y1 to tmp6)
 9227 [03] B66A      5111       lda     tmp2             ; Load accumulator with value in tmp2 variable
                     5112                                ; (X2)
 9229 [03] B069      5113       sub     tmp1             ; Subtract tmp1 from tmp2 (A=X2-X1)
 922B [03] 2730      5114       beq     DONE_WITH_INTERP ; If the Z bit of CCR is set, branch to
                     5115                                ;DONE_WITH_INTERP:  else (Y=Y1)
 922D [02] 87        5116       psha                     ; Push value in accumulator to stack
                     5117                                ; (X2-X1)(stack 1)
 922E [03] B66C      5118       lda     tmp4             ; Load accumulator with value in tmp4 variable
                     5119                                ; (Y2)
 9230 [03] B06B      5120       sub     tmp3             ; Subtract tmp3 from tmp4 (A=Y2-Y1)
 9232 [03] 2403      5121       bcc     POSINTERP        ; If C bit of CCR is clear, branch to POSINTERP:
 9234 [01] 40        5122       nega                     ; Negate accumulator      ??????????
 9235 [04] 3C6F      5123       inc     tmp7             ; Increment tmp7 variable (tmp7 = 1)
                     5124  
                     5125  POSINTERP:
 9237 [02] 87        5126       psha                     ; Push value in accumulator to stack
                     5127                                ; (negated Y2-Y1) (stack 2)
 9238 [03] B66D      5128       lda     tmp5             ; Load accumulator with value in tmp5 variable
                     5129                                ; (X)
 923A [03] B069      5130       sub     tmp1             ; Subtract tmp1 from tmp5 (A=X-X1)
 923C [03] 271D      5131       beq     ZERO_SLOPE            ; If the Z bit of CCR is set,
                     5132                                ; branch to ZERO_SLOPE lable  (Y=Y1)
 923E [02] 88        5133       pulx                     ; Pull value from stack to index register Lo
                     5134                                ;(negated Y2-Y1) (stack 2)
 923F [05] 42        5135       mul                      ; Multiply it by the value in the accumulator
                     5136                                ; A=(negated Y2-Y1)*(X-X1)
 9240 [02] 89        5137       pshx                     ; Push the index register L to the stack
                     5138                                ; (stack 2)
 9241 [02] 8A        5139       pulh                     ; Pull this value to index register Hi(stack 2)
 9242 [02] 88        5140       pulx                     ; Pull the next value to index register Lo
                     5141                                ;(stack 1)
 9243 [07] 52        5142       div                      ; Divide A<-(H:A)/(X);H<-Remainder
 9244 [02] 87        5143       psha                     ; Push the value in the accumulator onto stack
                     5144                                ; (stack 1)
 9245 [03] B66F      5145       lda     tmp7             ; Load accumulator with value in tmp7 variable
 9247 [03] 2607      5146       bne     NEG_SLOPE        ; If the Z bit of CCR is clear,
                     5147                                ; branch to NEG_SLOPE: (Y=Y1)
 9249 [02] 86        5148       pula                     ; Pull value from stack to accumulator (stack 1)
 924A [03] BB6B      5149       add     tmp3             ; Add it with value in tmp3 variable
 924C [03] B76E      5150       sta     tmp6             ; Copy it to tmp6 variable
 924E [03] 200D      5151       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     5152  
                     5153  NEG_SLOPE:
 9250 [02] 86        5154       pula                     ; Pull value from stack to accumulator(stack 1)
 9251 [03] B76F      5155       sta     tmp7             ; Copy to tmp7 variable
 9253 [03] B66B      5156       lda     tmp3             ; Load accumulator with value in tmp3  Y1)
 9255 [03] B06F      5157       sub     tmp7             ; Subtract tmp7 from tmp3
 9257 [03] B76E      5158       sta     tmp6             ; Copy result to tmp6 variable
 9259 [03] 2002      5159       bra     DONE_WITH_INTERP ; Branch to  DONE_WITH_INTERP:
                     5160  
                     5161  ZERO_SLOPE:
 925B [02] 86        5162          pula    ; Pull value from stack to accumulator (clean stack)(stack 2)
 925C [02] 86        5163          pula    ; Pull value from stack to accumulator (clean stack)(stack 1)
                     5164  
                     5165  DONE_WITH_INTERP:
 925D [04] 81        5166          rts      ; Return from subroutine
                     5167  
                     5168  ;****************************************************************************
                     5169  ;
                     5170  ; ----------------- 32 x 16 Unsigned Divide Subroutine ---------------------
                     5171  ;
                     5172  ; This routine takes the 32-bit dividend stored in INTACC1.....INTACC1+3
                     5173  ; and divides it by the 16-bit divisor stored in INTACC2:INTACC2+1.
                     5174  ; The quotient replaces the dividend and the remainder replaces the divisor.


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 42
MV_ECU


                     5175  ; INTACC1:INTAAC1+1:INTAAC1+2:INTAAC1+3 / INTAAC2:INTAAC2+1
                     5176  ; = INTACC1:INTAAC1+1:INTAAC1+2:INTAAC1+3 rem INTAAC2:INTAAC2+1
                     5177  ;
                     5178  ;***************************************************************************
                     5179  
 925E                5180  UDVD32    EQU     *
                     5181  *
 925E                5182  DIVIDEND  EQU     INTACC1+2
 925E                5183  DIVISOR   EQU     INTACC2
 925E                5184  QUOTIENT  EQU     INTACC1
 925E                5185  REMAINDER EQU     INTACC1
                     5186  *
 925E [02] 8B        5187          PSHH                            ;save h-reg value
 925F [02] 87        5188          PSHA                            ;save accumulator
 9260 [02] 89        5189          PSHX                            ;save x-reg value
 9261 [02] A7FD      5190          AIS     #-3                     ;reserve three bytes of temp storage
 9263 [02] A620      5191          LDA     #!32                    ;
 9265 [04] 9EE703    5192          STA     3,SP                    ;loop counter for number of shifts
 9268 [03] B665      5193          LDA     DIVISOR                 ;get divisor msb
 926A [04] 9EE701    5194          STA     1,SP                    ;put divisor msb in working storage
 926D [03] B666      5195          LDA     DIVISOR+1               ;get divisor lsb
 926F [04] 9EE702    5196          STA     2,SP                    ;put divisor lsb in working storage
                     5197  
                     5198  ****************************************************************************
                     5199  *     Shift all four bytes of dividend 16 bits to the right and clear
                     5200  *     both bytes of the temporary remainder location
                     5201  ****************************************************************************
                     5202  
 9272 [05] 4E6466    5203          MOV     DIVIDEND+1,DIVIDEND+3   ;shift dividend lsb
 9275 [05] 4E6365    5204          MOV     DIVIDEND,DIVIDEND+2     ;shift 2nd byte of dividend
 9278 [05] 4E6264    5205          MOV     DIVIDEND-1,DIVIDEND+1   ;shift 3rd byte of dividend
 927B [05] 4E6163    5206          MOV     DIVIDEND-2,DIVIDEND     ;shift dividend msb
 927E [03] 3F61      5207          CLR     REMAINDER               ;zero remainder msb
 9280 [03] 3F62      5208          CLR     REMAINDER+1             ;zero remainder lsb
                     5209  
                     5210  ****************************************************************************
                     5211  *     Shift each byte of dividend and remainder one bit to the left
                     5212  ****************************************************************************
                     5213  
 9282 [03] B661      5214  SHFTLP  LDA     REMAINDER               ;get remainder msb
 9284 [01] 49        5215          ROLA                            ;shift remainder msb into carry
 9285 [04] 3966      5216          ROL     DIVIDEND+3              ;shift dividend lsb
 9287 [04] 3965      5217          ROL     DIVIDEND+2              ;shift 2nd byte of dividend
 9289 [04] 3964      5218          ROL     DIVIDEND+1              ;shift 3rd byte of dividend
 928B [04] 3963      5219          ROL     DIVIDEND                ;shift dividend msb
 928D [04] 3962      5220          ROL     REMAINDER+1             ;shift remainder lsb
 928F [04] 3961      5221          ROL     REMAINDER               ;shift remainder msb
                     5222  
                     5223  *****************************************************************************
                     5224  *     Subtract both bytes of the divisor from the remainder
                     5225  *****************************************************************************
                     5226  
 9291 [03] B662      5227          LDA     REMAINDER+1          ;get remainder lsb
 9293 [04] 9EE002    5228          SUB     2,SP                 ;subtract divisor lsb from remainder lsb
 9296 [03] B762      5229          STA     REMAINDER+1          ;store new remainder lsb
 9298 [03] B661      5230          LDA     REMAINDER            ;get remainder msb
 929A [04] 9EE201    5231          SBC     1,SP                 ;subtract divisor msb from remainder msb
 929D [03] B761      5232          STA     REMAINDER            ;store new remainder msb
 929F [03] B666      5233          LDA     DIVIDEND+3           ;get low byte of dividend/quotient
 92A1 [02] A200      5234          SBC     #0                   ;dividend low bit holds subtract carry
 92A3 [03] B766      5235          STA     DIVIDEND+3           ;store low byte of dividend/quotient
                     5236  
                     5237  *****************************************************************************
                     5238  *     Check dividend/quotient lsb. If clear, set lsb of quotient to indicate
                     5239  *     successful subraction, else add both bytes of divisor back to remainder
                     5240  *****************************************************************************
                     5241  
 92A5 [05] 016616    5242          BRCLR   0,DIVIDEND+3,SETLSB     ;check for a carry from subtraction
                     5243                                          ;and add divisor to remainder if set
 92A8 [03] B662      5244          LDA     REMAINDER+1             ;get remainder lsb
 92AA [04] 9EEB02    5245          ADD     2,SP                    ;add divisor lsb to remainder lsb
 92AD [03] B762      5246          STA     REMAINDER+1             ;store remainder lsb
 92AF [03] B661      5247          LDA     REMAINDER               ;get remainder msb
 92B1 [04] 9EE901    5248          ADC     1,SP                    ;add divisor msb to remainder msb
 92B4 [03] B761      5249          STA     REMAINDER               ;store remainder msb
 92B6 [03] B666      5250          LDA     DIVIDEND+3              ;get low byte of dividend
 92B8 [02] A900      5251          ADC     #0                      ;add carry to low bit of dividend
 92BA [03] B766      5252          STA     DIVIDEND+3              ;store low byte of dividend
 92BC [03] 2002      5253          BRA     DECRMT                  ;do next shift and subtract
                     5254  
 92BE [04] 1066      5255  SETLSB  BSET    0,DIVIDEND+3            ;set lsb of quotient to indicate
                     5256                                          ;successive subtraction
 92C0 [06] 9E6B03BE  5257  DECRMT  DBNZ    3,SP,SHFTLP             ;decrement loop counter and do next
                     5258                                          ;shift
                     5259  
                     5260  *****************************************************************************
                     5261  *     Move 32-bit dividend into INTACC1.....INTACC1+3 and put 16-bit
                     5262  *     remainder in INTACC2:INTACC2+1
                     5263  *****************************************************************************
                     5264  
 92C4 [03] B661      5265          LDA     REMAINDER               ;get remainder msb
 92C6 [04] 9EE701    5266          STA     1,SP                    ;temporarily store remainder msb
 92C9 [03] B662      5267          LDA     REMAINDER+1             ;get remainder lsb
 92CB [04] 9EE702    5268          STA     2,SP                    ;temporarily store remainder lsb
 92CE [05] 4E6361    5269          MOV     DIVIDEND,QUOTIENT       ;
 92D1 [05] 4E6462    5270          MOV     DIVIDEND+1,QUOTIENT+1   ;shift all four bytes of quotient
 92D4 [05] 4E6563    5271          MOV     DIVIDEND+2,QUOTIENT+2   ; 16 bits to the left
 92D7 [05] 4E6664    5272          MOV     DIVIDEND+3,QUOTIENT+3   ;
 92DA [04] 9EE601    5273          LDA     1,SP                    ;get final remainder msb
 92DD [03] B765      5274          STA     INTACC2                 ;store final remainder msb
 92DF [04] 9EE602    5275          LDA     2,SP                    ;get final remainder lsb
 92E2 [03] B766      5276          STA     INTACC2+1               ;store final remainder lsb
                     5277  
                     5278  *****************************************************************************
                     5279  *     Deallocate local storage, restore register values, and return from
                     5280  *     subroutine
                     5281  *****************************************************************************
                     5282  
 92E4 [02] A703      5283          AIS     #3                      ;deallocate temporary storage
 92E6 [02] 88        5284          PULX                            ;restore x-reg value
 92E7 [02] 86        5285          PULA                            ;restore accumulator value
 92E8 [02] 8A        5286          PULH                            ;restore h-reg value
 92E9 [04] 81        5287          RTS                             ;return
                     5288  
                     5289  *****************************************************************************
                     5290  
                     5291  
                     5292  ;****************************************************************************
                     5293  ; ----------  ----- ROUND after div (unsigned) Subroutine -------------------
                     5294  ;  Quotient = dividend / divisor
                     5295  ;  div = A<-(H:A)/(X) ; H<-Remainder. Overflow(quotient>$FF) or divide by 0 sets C bit
                     5296  ;
                     5297  ;  1)  check for div overflow (carry set), rail result if detected
                     5298  ;  2)  if (remainder * 2) > divisor then     ; was remainder > (divisor / 2)
                     5299  ;  2a)    increment result, rail if over-flow
                     5300  ;
                     5301  ;****************************************************************************
                     5302  
                     5303  DIVROUND:
 92EA [03] 250E      5304       bcs     DIVROUND0     ; If C bit of CCR is set, branch to DIVROUND0:
                     5305                             ; (div overflow? yes, branch)
 92EC [03] BF7D      5306       stx     local_tmp     ; Copy value in index register Lo byte to
                     5307                             ; local_tmp variable (divisor)
 92EE [02] 8B        5308       pshh                  ; Push value in index register Hi byte onto
                     5309                             ; stack (retrieve remainder)
 92EF [02] 88        5310       pulx                  ; Pull value on stack to index register Lo byte


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 43
MV_ECU


 92F0 [01] 58        5311       lslx                  ; Logical shift left index register lo byte (* 2)
 92F1 [03] 2504      5312       bcs     DIVROUND2     ; If C bit of CCR is set, branch to DIVROUND2:
                     5313                             ;(over-flow on left-shift, (remainder * 2) > $FF)
 92F3 [03] B37D      5314       cpx     local_tmp     ; Compare value in local_tmp variable with value
                     5315                             ; in index register Lo byte
                     5316                             ;(compare (remainder * 2) to divisor)
 92F5 [03] 2505      5317       blo     DIVROUND1     ; If lower, branch to DIVROUND1:
                     5318  
                     5319  
                     5320  DIVROUND2:
 92F7 [01] 4C        5321       inca                   ; Increment accumulator (round-up result)
 92F8 [03] 2602      5322       bne      DIVROUND1     ; If Z bit of CCR is clear, branch to DIVROUND1:
                     5323                              ; (result roll over? no, branch)
                     5324  
                     5325  
                     5326  DIVROUND0:
 92FA [02] A6FF      5327       lda     #$FF     ; Load accumulator with decimal 255 (rail result)
                     5328  
                     5329  
                     5330  DIVROUND1:
 92FC [04] 81        5331       rts              ; return from subroutine
                     5332  
                     5333  
                     5334  ;****************************************************************************
                     5335  ;
                     5336  ; ------------------- 16 x 16 Unsigned Multiply Subroutine -----------------
                     5337  ;
                     5338  ;     tmp8:tmp7:tmp6:tmp5 = tmp4:tmp3 * tmp2:tmp1
                     5339  ;
                     5340  ;               tmp3*tmp1
                     5341  ;   +      tmp4*tmp1
                     5342  ;   +      tmp3*tmp2
                     5343  ;   + tmp4*tmp2
                     5344  ;   = ===================
                     5345  ;     tmp8 tmp7 tmp6 tmp5
                     5346  ;
                     5347  ;****************************************************************************
                     5348  
                     5349  UMUL32:
 92FD [03] B669      5350       lda     tmp1        ; Load accumulator with value in tmp1 variable
 92FF [03] BE6B      5351       ldx     tmp3        ; Load index register Lo byte with value in tmp3
 9301 [05] 42        5352       mul                 ; Multiply X:A<-(X)*(A)
 9302 [03] B76D      5353       sta     tmp5        ; Ccopy result to tmp5
 9304 [03] BF6E      5354       stx     tmp6        ; Copy value in index register Lo byte to tmp6
                     5355  ;
 9306 [03] B66A      5356       lda     tmp2        ; Load accumulator with value in tmp2
 9308 [03] BE6C      5357       ldx     tmp4        ; Load index register Lo byte with value in tmp4
 930A [05] 42        5358       mul                 ; Multiply X:A<-(X)*(A)
 930B [03] B76F      5359       sta     tmp7        ; Copy result to tmp7
 930D [03] BF70      5360       stx     tmp8        ; Copy value in index register Lo byte to tmp8
                     5361  ;
 930F [03] B669      5362       lda     tmp1        ; Load accumulator with value in tmp1
 9311 [03] BE6C      5363       ldx     tmp4        ; Load index register Lo byte with value in tmp4
 9313 [05] 42        5364       mul                 ; Multiply X:A<-(X)*(A)
 9314 [03] BB6E      5365       add     tmp6        ; Add without carry, A<-(A)+(M)
 9316 [03] B76E      5366       sta     tmp6        ; Copy result to tmp6
 9318 [01] 9F        5367       txa                 ; Transfer value in index register Lo byte
                     5368                           ; to accumulator
 9319 [03] B96F      5369       adc     tmp7        ; Add with carry, A<-(A)+(M)+(C)
 931B [03] B76F      5370       sta     tmp7        ; Copy result to tmp7
 931D [03] 2402      5371       bcc     UMUL32a     ; If C bit of CCR is clear, branch to UMUL32a:
 931F [04] 3C70      5372       inc     tmp8        ; Increment value in tmp8
                     5373  
                     5374  
                     5375  UMUL32a:
 9321 [03] B66A      5376       lda     tmp2        ; Load accumulator with value in tmp2
 9323 [03] BE6B      5377       ldx     tmp3        ; Load index register Lo byte with value in tmp3
 9325 [05] 42        5378       mul                 ; Multiply X:A<-(X)*(A)
 9326 [03] BB6E      5379       add     tmp6        ; Add without carry, A<-(A)+(M)
 9328 [03] B76E      5380       sta     tmp6        ; Copy result to tmp6
 932A [01] 9F        5381       txa                 ; Transfer value in index register Lo byte
                     5382                           ; to accumulator
 932B [03] B96F      5383       adc     tmp7        ; Add with carry, A<-(A)+(M)+(C)
 932D [03] B76F      5384       sta     tmp7        ; Copy result to tmp7
 932F [03] 2402      5385       bcc     UMUL32b     ; If C bit of CCR is clear, branch to UMUL32b:
 9331 [04] 3C70      5386       inc     tmp8        ; increment value in tmp8 variable
                     5387  
                     5388  
                     5389  UMUL32b:
 9333 [04] 81        5390        rts                ; return from subroutine
                     5391  
                     5392  ;***************************************************************************
                     5393  ; ----------------------------- Include Files -----------------------------
                     5394  ;***************************************************************************
                     5395  
                     5396  
 F000                5397       org     $F000       ; Origin at Memory Location $F000 = 61440
                     5398                           ; (uses 1536) to Memory location $E500 = 62976
                     5399  
 F000                5400       include "ASCII_Conv_100.inc"     ; Converts 8 bit value to ASCII,
                     5401  ASCII_CONV_100:
 F000      30        5402       db     '0'     ; Decimal 0
 F001      30        5403       db     '0'     ; Decimal 1
 F002      30        5404       db     '0'     ; Decimal 2
 F003      30        5405       db     '0'     ; Decimal        3
 F004      30        5406       db     '0'     ; Decimal        4
 F005      30        5407       db     '0'     ; Decimal        5
 F006      30        5408       db     '0'     ; Decimal        6
 F007      30        5409       db     '0'     ; Decimal        7
 F008      30        5410       db     '0'     ; Decimal        8
 F009      30        5411       db     '0'     ; Decimal        9
 F00A      30        5412       db     '0'     ; Decimal        10
 F00B      30        5413       db     '0'     ; Decimal        11
 F00C      30        5414       db     '0'     ; Decimal        12
 F00D      30        5415       db     '0'     ; Decimal        13
 F00E      30        5416       db     '0'     ; Decimal        14
 F00F      30        5417       db     '0'     ; Decimal        15
 F010      30        5418       db     '0'     ; Decimal        16
 F011      30        5419       db     '0'     ; Decimal        17
 F012      30        5420       db     '0'     ; Decimal        18
 F013      30        5421       db     '0'     ; Decimal        19
 F014      30        5422       db     '0'     ; Decimal        20
 F015      30        5423       db     '0'     ; Decimal        21
 F016      30        5424       db     '0'     ; Decimal        22
 F017      30        5425       db     '0'     ; Decimal        23
 F018      30        5426       db     '0'     ; Decimal        24
 F019      30        5427       db     '0'     ; Decimal        25
 F01A      30        5428       db     '0'     ; Decimal        26
 F01B      30        5429       db     '0'     ; Decimal        27
 F01C      30        5430       db     '0'     ; Decimal        28
 F01D      30        5431       db     '0'     ; Decimal        29
 F01E      30        5432       db     '0'     ; Decimal        30
 F01F      30        5433       db     '0'     ; Decimal        31
 F020      30        5434       db     '0'     ; Decimal        32
 F021      30        5435       db     '0'     ; Decimal        33
 F022      30        5436       db     '0'     ; Decimal        34
 F023      30        5437       db     '0'     ; Decimal        35
 F024      30        5438       db     '0'     ; Decimal        36
 F025      30        5439       db     '0'     ; Decimal        37
 F026      30        5440       db     '0'     ; Decimal        38
 F027      30        5441       db     '0'     ; Decimal        39
 F028      30        5442       db     '0'     ; Decimal        40
 F029      30        5443       db     '0'     ; Decimal        41
 F02A      30        5444       db     '0'     ; Decimal        42
 F02B      30        5445       db     '0'     ; Decimal        43
 F02C      30        5446       db     '0'     ; Decimal        44


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 44
MV_ECU


 F02D      30        5447       db     '0'     ; Decimal        45
 F02E      30        5448       db     '0'     ; Decimal        46
 F02F      30        5449       db     '0'     ; Decimal        47
 F030      30        5450       db     '0'     ; Decimal        48
 F031      30        5451       db     '0'     ; Decimal        49
 F032      30        5452       db     '0'     ; Decimal        50
 F033      30        5453       db     '0'     ; Decimal        51
 F034      30        5454       db     '0'     ; Decimal        52
 F035      30        5455       db     '0'     ; Decimal        53
 F036      30        5456       db     '0'     ; Decimal        54
 F037      30        5457       db     '0'     ; Decimal        55
 F038      30        5458       db     '0'     ; Decimal        56
 F039      30        5459       db     '0'     ; Decimal        57
 F03A      30        5460       db     '0'     ; Decimal        58
 F03B      30        5461       db     '0'     ; Decimal        59
 F03C      30        5462       db     '0'     ; Decimal        60
 F03D      30        5463       db     '0'     ; Decimal        61
 F03E      30        5464       db     '0'     ; Decimal        62
 F03F      30        5465       db     '0'     ; Decimal        63
 F040      30        5466       db     '0'     ; Decimal        64
 F041      30        5467       db     '0'     ; Decimal        65
 F042      30        5468       db     '0'     ; Decimal        66
 F043      30        5469       db     '0'     ; Decimal        67
 F044      30        5470       db     '0'     ; Decimal        68
 F045      30        5471       db     '0'     ; Decimal        69
 F046      30        5472       db     '0'     ; Decimal        70
 F047      30        5473       db     '0'     ; Decimal        71
 F048      30        5474       db     '0'     ; Decimal        72
 F049      30        5475       db     '0'     ; Decimal        73
 F04A      30        5476       db     '0'     ; Decimal        74
 F04B      30        5477       db     '0'     ; Decimal        75
 F04C      30        5478       db     '0'     ; Decimal        76
 F04D      30        5479       db     '0'     ; Decimal        77
 F04E      30        5480       db     '0'     ; Decimal        78
 F04F      30        5481       db     '0'     ; Decimal        79
 F050      30        5482       db     '0'     ; Decimal        80
 F051      30        5483       db     '0'     ; Decimal        81
 F052      30        5484       db     '0'     ; Decimal        82
 F053      30        5485       db     '0'     ; Decimal        83
 F054      30        5486       db     '0'     ; Decimal        84
 F055      30        5487       db     '0'     ; Decimal        85
 F056      30        5488       db     '0'     ; Decimal        86
 F057      30        5489       db     '0'     ; Decimal        87
 F058      30        5490       db     '0'     ; Decimal        88
 F059      30        5491       db     '0'     ; Decimal        89
 F05A      30        5492       db     '0'     ; Decimal        90
 F05B      30        5493       db     '0'     ; Decimal        91
 F05C      30        5494       db     '0'     ; Decimal        92
 F05D      30        5495       db     '0'     ; Decimal        93
 F05E      30        5496       db     '0'     ; Decimal        94
 F05F      30        5497       db     '0'     ; Decimal        95
 F060      30        5498       db     '0'     ; Decimal        96
 F061      30        5499       db     '0'     ; Decimal        97
 F062      30        5500       db     '0'     ; Decimal        98
 F063      30        5501       db     '0'     ; Decimal        99
 F064      31        5502       db     '1'     ; Decimal        100
 F065      31        5503       db     '1'     ; Decimal        101
 F066      31        5504       db     '1'     ; Decimal        102
 F067      31        5505       db     '1'     ; Decimal        103
 F068      31        5506       db     '1'     ; Decimal        104
 F069      31        5507       db     '1'     ; Decimal        105
 F06A      31        5508       db     '1'     ; Decimal        106
 F06B      31        5509       db     '1'     ; Decimal        107
 F06C      31        5510       db     '1'     ; Decimal        108
 F06D      31        5511       db     '1'     ; Decimal        109
 F06E      31        5512       db     '1'     ; Decimal        110
 F06F      31        5513       db     '1'     ; Decimal        111
 F070      31        5514       db     '1'     ; Decimal        112
 F071      31        5515       db     '1'     ; Decimal        113
 F072      31        5516       db     '1'     ; Decimal        114
 F073      31        5517       db     '1'     ; Decimal        115
 F074      31        5518       db     '1'     ; Decimal        116
 F075      31        5519       db     '1'     ; Decimal        117
 F076      31        5520       db     '1'     ; Decimal        118
 F077      31        5521       db     '1'     ; Decimal        119
 F078      31        5522       db     '1'     ; Decimal        120
 F079      31        5523       db     '1'     ; Decimal        121
 F07A      31        5524       db     '1'     ; Decimal        122
 F07B      31        5525       db     '1'     ; Decimal        123
 F07C      31        5526       db     '1'     ; Decimal        124
 F07D      31        5527       db     '1'     ; Decimal        125
 F07E      31        5528       db     '1'     ; Decimal        126
 F07F      31        5529       db     '1'     ; Decimal        127
 F080      31        5530       db     '1'     ; Decimal        128
 F081      31        5531       db     '1'     ; Decimal        129
 F082      31        5532       db     '1'     ; Decimal        130
 F083      31        5533       db     '1'     ; Decimal        131
 F084      31        5534       db     '1'     ; Decimal        132
 F085      31        5535       db     '1'     ; Decimal        133
 F086      31        5536       db     '1'     ; Decimal        134
 F087      31        5537       db     '1'     ; Decimal        135
 F088      31        5538       db     '1'     ; Decimal        136
 F089      31        5539       db     '1'     ; Decimal        137
 F08A      31        5540       db     '1'     ; Decimal        138
 F08B      31        5541       db     '1'     ; Decimal        139
 F08C      31        5542       db     '1'     ; Decimal        140
 F08D      31        5543       db     '1'     ; Decimal        141
 F08E      31        5544       db     '1'     ; Decimal        142
 F08F      31        5545       db     '1'     ; Decimal        143
 F090      31        5546       db     '1'     ; Decimal        144
 F091      31        5547       db     '1'     ; Decimal        145
 F092      31        5548       db     '1'     ; Decimal        146
 F093      31        5549       db     '1'     ; Decimal        147
 F094      31        5550       db     '1'     ; Decimal        148
 F095      31        5551       db     '1'     ; Decimal        149
 F096      31        5552       db     '1'     ; Decimal        150
 F097      31        5553       db     '1'     ; Decimal        151
 F098      31        5554       db     '1'     ; Decimal        152
 F099      31        5555       db     '1'     ; Decimal        153
 F09A      31        5556       db     '1'     ; Decimal        154
 F09B      31        5557       db     '1'     ; Decimal        155
 F09C      31        5558       db     '1'     ; Decimal        156
 F09D      31        5559       db     '1'     ; Decimal        157
 F09E      31        5560       db     '1'     ; Decimal        158
 F09F      31        5561       db     '1'     ; Decimal        159
 F0A0      31        5562       db     '1'     ; Decimal        160
 F0A1      31        5563       db     '1'     ; Decimal        161
 F0A2      31        5564       db     '1'     ; Decimal        162
 F0A3      31        5565       db     '1'     ; Decimal        163
 F0A4      31        5566       db     '1'     ; Decimal        164
 F0A5      31        5567       db     '1'     ; Decimal        165
 F0A6      31        5568       db     '1'     ; Decimal        166
 F0A7      31        5569       db     '1'     ; Decimal        167
 F0A8      31        5570       db     '1'     ; Decimal        168
 F0A9      31        5571       db     '1'     ; Decimal        169
 F0AA      31        5572       db     '1'     ; Decimal        170
 F0AB      31        5573       db     '1'     ; Decimal        171
 F0AC      31        5574       db     '1'     ; Decimal        172
 F0AD      31        5575       db     '1'     ; Decimal        173
 F0AE      31        5576       db     '1'     ; Decimal        174
 F0AF      31        5577       db     '1'     ; Decimal        175
 F0B0      31        5578       db     '1'     ; Decimal        176
 F0B1      31        5579       db     '1'     ; Decimal        177
 F0B2      31        5580       db     '1'     ; Decimal        178
 F0B3      31        5581       db     '1'     ; Decimal        179
 F0B4      31        5582       db     '1'     ; Decimal        180


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 45
MV_ECU


 F0B5      31        5583       db     '1'     ; Decimal        181
 F0B6      31        5584       db     '1'     ; Decimal        182
 F0B7      31        5585       db     '1'     ; Decimal        183
 F0B8      31        5586       db     '1'     ; Decimal        184
 F0B9      31        5587       db     '1'     ; Decimal        185
 F0BA      31        5588       db     '1'     ; Decimal        186
 F0BB      31        5589       db     '1'     ; Decimal        187
 F0BC      31        5590       db     '1'     ; Decimal        188
 F0BD      31        5591       db     '1'     ; Decimal        189
 F0BE      31        5592       db     '1'     ; Decimal        190
 F0BF      31        5593       db     '1'     ; Decimal        191
 F0C0      31        5594       db     '1'     ; Decimal        192
 F0C1      31        5595       db     '1'     ; Decimal        193
 F0C2      31        5596       db     '1'     ; Decimal        194
 F0C3      31        5597       db     '1'     ; Decimal        195
 F0C4      31        5598       db     '1'     ; Decimal        196
 F0C5      31        5599       db     '1'     ; Decimal        197
 F0C6      31        5600       db     '1'     ; Decimal        198
 F0C7      31        5601       db     '1'     ; Decimal        199
 F0C8      32        5602       db     '2'     ; Decimal        200
 F0C9      32        5603       db     '2'     ; Decimal        201
 F0CA      32        5604       db     '2'     ; Decimal        202
 F0CB      32        5605       db     '2'     ; Decimal        203
 F0CC      32        5606       db     '2'     ; Decimal        204
 F0CD      32        5607       db     '2'     ; Decimal        205
 F0CE      32        5608       db     '2'     ; Decimal        206
 F0CF      32        5609       db     '2'     ; Decimal        207
 F0D0      32        5610       db     '2'     ; Decimal        208
 F0D1      32        5611       db     '2'     ; Decimal        209
 F0D2      32        5612       db     '2'     ; Decimal        210
 F0D3      32        5613       db     '2'     ; Decimal        211
 F0D4      32        5614       db     '2'     ; Decimal        212
 F0D5      32        5615       db     '2'     ; Decimal        213
 F0D6      32        5616       db     '2'     ; Decimal        214
 F0D7      32        5617       db     '2'     ; Decimal        215
 F0D8      32        5618       db     '2'     ; Decimal        216
 F0D9      32        5619       db     '2'     ; Decimal        217
 F0DA      32        5620       db     '2'     ; Decimal        218
 F0DB      32        5621       db     '2'     ; Decimal        219
 F0DC      32        5622       db     '2'     ; Decimal        220
 F0DD      32        5623       db     '2'     ; Decimal        221
 F0DE      32        5624       db     '2'     ; Decimal        222
 F0DF      32        5625       db     '2'     ; Decimal        223
 F0E0      32        5626       db     '2'     ; Decimal        224
 F0E1      32        5627       db     '2'     ; Decimal        225
 F0E2      32        5628       db     '2'     ; Decimal        226
 F0E3      32        5629       db     '2'     ; Decimal        227
 F0E4      32        5630       db     '2'     ; Decimal        228
 F0E5      32        5631       db     '2'     ; Decimal        229
 F0E6      32        5632       db     '2'     ; Decimal        230
 F0E7      32        5633       db     '2'     ; Decimal        231
 F0E8      32        5634       db     '2'     ; Decimal        232
 F0E9      32        5635       db     '2'     ; Decimal        233
 F0EA      32        5636       db     '2'     ; Decimal        234
 F0EB      32        5637       db     '2'     ; Decimal        235
 F0EC      32        5638       db     '2'     ; Decimal        236
 F0ED      32        5639       db     '2'     ; Decimal        237
 F0EE      32        5640       db     '2'     ; Decimal        238
 F0EF      32        5641       db     '2'     ; Decimal        239
 F0F0      32        5642       db     '2'     ; Decimal        240
 F0F1      32        5643       db     '2'     ; Decimal        241
 F0F2      32        5644       db     '2'     ; Decimal        242
 F0F3      32        5645       db     '2'     ; Decimal        243
 F0F4      32        5646       db     '2'     ; Decimal        244
 F0F5      32        5647       db     '2'     ; Decimal        245
 F0F6      32        5648       db     '2'     ; Decimal        246
 F0F7      32        5649       db     '2'     ; Decimal        247
 F0F8      32        5650       db     '2'     ; Decimal        248
 F0F9      32        5651       db     '2'     ; Decimal        249
 F0FA      32        5652       db     '2'     ; Decimal        250
 F0FB      32        5653       db     '2'     ; Decimal        251
 F0FC      32        5654       db     '2'     ; Decimal        252
 F0FD      32        5655       db     '2'     ; Decimal        253
 F0FE      32        5656       db     '2'     ; Decimal        254
 F0FF      32        5657       db     '2'     ; Decimal        255
                     5658                                        ; 100s column
 F100                5659       include "ASCII_Conv_10.inc"      ; Converts 8 bit value to ASCII,
                     5660  ASCII_CONV_10:
 F100      30        5661       db     '0'     ; Decimal 0
 F101      30        5662       db     '0'     ; Decimal 1
 F102      30        5663       db     '0'     ; Decimal 2
 F103      30        5664       db     '0'     ; Decimal        3
 F104      30        5665       db     '0'     ; Decimal        4
 F105      30        5666       db     '0'     ; Decimal        5
 F106      30        5667       db     '0'     ; Decimal        6
 F107      30        5668       db     '0'     ; Decimal        7
 F108      30        5669       db     '0'     ; Decimal        8
 F109      30        5670       db     '0'     ; Decimal        9
 F10A      31        5671       db     '1'     ; Decimal        10
 F10B      31        5672       db     '1'     ; Decimal        11
 F10C      31        5673       db     '1'     ; Decimal        12
 F10D      31        5674       db     '1'     ; Decimal        13
 F10E      31        5675       db     '1'     ; Decimal        14
 F10F      31        5676       db     '1'     ; Decimal        15
 F110      31        5677       db     '1'     ; Decimal        16
 F111      31        5678       db     '1'     ; Decimal        17
 F112      31        5679       db     '1'     ; Decimal        18
 F113      31        5680       db     '1'     ; Decimal        19
 F114      32        5681       db     '2'     ; Decimal        20
 F115      32        5682       db     '2'     ; Decimal        21
 F116      32        5683       db     '2'     ; Decimal        22
 F117      32        5684       db     '2'     ; Decimal        23
 F118      32        5685       db     '2'     ; Decimal        24
 F119      32        5686       db     '2'     ; Decimal        25
 F11A      32        5687       db     '2'     ; Decimal        26
 F11B      32        5688       db     '2'     ; Decimal        27
 F11C      32        5689       db     '2'     ; Decimal        28
 F11D      32        5690       db     '2'     ; Decimal        29
 F11E      33        5691       db     '3'     ; Decimal        30
 F11F      33        5692       db     '3'     ; Decimal        31
 F120      33        5693       db     '3'     ; Decimal        32
 F121      33        5694       db     '3'     ; Decimal        33
 F122      33        5695       db     '3'     ; Decimal        34
 F123      33        5696       db     '3'     ; Decimal        35
 F124      33        5697       db     '3'     ; Decimal        36
 F125      33        5698       db     '3'     ; Decimal        37
 F126      33        5699       db     '3'     ; Decimal        38
 F127      33        5700       db     '3'     ; Decimal        39
 F128      34        5701       db     '4'     ; Decimal        40
 F129      34        5702       db     '4'     ; Decimal        41
 F12A      34        5703       db     '4'     ; Decimal        42
 F12B      34        5704       db     '4'     ; Decimal        43
 F12C      34        5705       db     '4'     ; Decimal        44
 F12D      34        5706       db     '4'     ; Decimal        45
 F12E      34        5707       db     '4'     ; Decimal        46
 F12F      34        5708       db     '4'     ; Decimal        47
 F130      34        5709       db     '4'     ; Decimal        48
 F131      34        5710       db     '4'     ; Decimal        49
 F132      35        5711       db     '5'     ; Decimal        50
 F133      35        5712       db     '5'     ; Decimal        51
 F134      35        5713       db     '5'     ; Decimal        52
 F135      35        5714       db     '5'     ; Decimal        53
 F136      35        5715       db     '5'     ; Decimal        54
 F137      35        5716       db     '5'     ; Decimal        55
 F138      35        5717       db     '5'     ; Decimal        56
 F139      35        5718       db     '5'     ; Decimal        57


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 46
MV_ECU


 F13A      35        5719       db     '5'     ; Decimal        58
 F13B      35        5720       db     '5'     ; Decimal        59
 F13C      36        5721       db     '6'     ; Decimal        60
 F13D      36        5722       db     '6'     ; Decimal        61
 F13E      36        5723       db     '6'     ; Decimal        62
 F13F      36        5724       db     '6'     ; Decimal        63
 F140      36        5725       db     '6'     ; Decimal        64
 F141      36        5726       db     '6'     ; Decimal        65
 F142      36        5727       db     '6'     ; Decimal        66
 F143      36        5728       db     '6'     ; Decimal        67
 F144      36        5729       db     '6'     ; Decimal        68
 F145      36        5730       db     '6'     ; Decimal        69
 F146      37        5731       db     '7'     ; Decimal        70
 F147      37        5732       db     '7'     ; Decimal        71
 F148      37        5733       db     '7'     ; Decimal        72
 F149      37        5734       db     '7'     ; Decimal        73
 F14A      37        5735       db     '7'     ; Decimal        74
 F14B      37        5736       db     '7'     ; Decimal        75
 F14C      37        5737       db     '7'     ; Decimal        76
 F14D      37        5738       db     '7'     ; Decimal        77
 F14E      37        5739       db     '7'     ; Decimal        78
 F14F      37        5740       db     '7'     ; Decimal        79
 F150      38        5741       db     '8'     ; Decimal        80
 F151      38        5742       db     '8'     ; Decimal        81
 F152      38        5743       db     '8'     ; Decimal        82
 F153      38        5744       db     '8'     ; Decimal        83
 F154      38        5745       db     '8'     ; Decimal        84
 F155      38        5746       db     '8'     ; Decimal        85
 F156      38        5747       db     '8'     ; Decimal        86
 F157      38        5748       db     '8'     ; Decimal        87
 F158      38        5749       db     '8'     ; Decimal        88
 F159      38        5750       db     '8'     ; Decimal        89
 F15A      39        5751       db     '9'     ; Decimal        90
 F15B      39        5752       db     '9'     ; Decimal        91
 F15C      39        5753       db     '9'     ; Decimal        92
 F15D      39        5754       db     '9'     ; Decimal        93
 F15E      39        5755       db     '9'     ; Decimal        94
 F15F      39        5756       db     '9'     ; Decimal        95
 F160      39        5757       db     '9'     ; Decimal        96
 F161      39        5758       db     '9'     ; Decimal        97
 F162      39        5759       db     '9'     ; Decimal        98
 F163      39        5760       db     '9'     ; Decimal        99
 F164      30        5761       db     '0'     ; Decimal        100
 F165      30        5762       db     '0'     ; Decimal        101
 F166      30        5763       db     '0'     ; Decimal        102
 F167      30        5764       db     '0'     ; Decimal        103
 F168      30        5765       db     '0'     ; Decimal        104
 F169      30        5766       db     '0'     ; Decimal        105
 F16A      30        5767       db     '0'     ; Decimal        106
 F16B      30        5768       db     '0'     ; Decimal        107
 F16C      30        5769       db     '0'     ; Decimal        108
 F16D      30        5770       db     '0'     ; Decimal        109
 F16E      31        5771       db     '1'     ; Decimal        110
 F16F      31        5772       db     '1'     ; Decimal        111
 F170      31        5773       db     '1'     ; Decimal        112
 F171      31        5774       db     '1'     ; Decimal        113
 F172      31        5775       db     '1'     ; Decimal        114
 F173      31        5776       db     '1'     ; Decimal        115
 F174      31        5777       db     '1'     ; Decimal        116
 F175      31        5778       db     '1'     ; Decimal        117
 F176      31        5779       db     '1'     ; Decimal        118
 F177      31        5780       db     '1'     ; Decimal        119
 F178      32        5781       db     '2'     ; Decimal        120
 F179      32        5782       db     '2'     ; Decimal        121
 F17A      32        5783       db     '2'     ; Decimal        122
 F17B      32        5784       db     '2'     ; Decimal        123
 F17C      32        5785       db     '2'     ; Decimal        124
 F17D      32        5786       db     '2'     ; Decimal        125
 F17E      32        5787       db     '2'     ; Decimal        126
 F17F      32        5788       db     '2'     ; Decimal        127
 F180      32        5789       db     '2'     ; Decimal        128
 F181      32        5790       db     '2'     ; Decimal        129
 F182      33        5791       db     '3'     ; Decimal        130
 F183      33        5792       db     '3'     ; Decimal        131
 F184      33        5793       db     '3'     ; Decimal        132
 F185      33        5794       db     '3'     ; Decimal        133
 F186      33        5795       db     '3'     ; Decimal        134
 F187      33        5796       db     '3'     ; Decimal        135
 F188      33        5797       db     '3'     ; Decimal        136
 F189      33        5798       db     '3'     ; Decimal        137
 F18A      33        5799       db     '3'     ; Decimal        138
 F18B      33        5800       db     '3'     ; Decimal        139
 F18C      34        5801       db     '4'     ; Decimal        140
 F18D      34        5802       db     '4'     ; Decimal        141
 F18E      34        5803       db     '4'     ; Decimal        142
 F18F      34        5804       db     '4'     ; Decimal        143
 F190      34        5805       db     '4'     ; Decimal        144
 F191      34        5806       db     '4'     ; Decimal        145
 F192      34        5807       db     '4'     ; Decimal        146
 F193      34        5808       db     '4'     ; Decimal        147
 F194      34        5809       db     '4'     ; Decimal        148
 F195      34        5810       db     '4'     ; Decimal        149
 F196      35        5811       db     '5'     ; Decimal        150
 F197      35        5812       db     '5'     ; Decimal        151
 F198      35        5813       db     '5'     ; Decimal        152
 F199      35        5814       db     '5'     ; Decimal        153
 F19A      35        5815       db     '5'     ; Decimal        154
 F19B      35        5816       db     '5'     ; Decimal        155
 F19C      35        5817       db     '5'     ; Decimal        156
 F19D      35        5818       db     '5'     ; Decimal        157
 F19E      35        5819       db     '5'     ; Decimal        158
 F19F      35        5820       db     '5'     ; Decimal        159
 F1A0      36        5821       db     '6'     ; Decimal        160
 F1A1      36        5822       db     '6'     ; Decimal        161
 F1A2      36        5823       db     '6'     ; Decimal        162
 F1A3      36        5824       db     '6'     ; Decimal        163
 F1A4      36        5825       db     '6'     ; Decimal        164
 F1A5      36        5826       db     '6'     ; Decimal        165
 F1A6      36        5827       db     '6'     ; Decimal        166
 F1A7      36        5828       db     '6'     ; Decimal        167
 F1A8      36        5829       db     '6'     ; Decimal        168
 F1A9      36        5830       db     '6'     ; Decimal        169
 F1AA      37        5831       db     '7'     ; Decimal        170
 F1AB      37        5832       db     '7'     ; Decimal        171
 F1AC      37        5833       db     '7'     ; Decimal        172
 F1AD      37        5834       db     '7'     ; Decimal        173
 F1AE      37        5835       db     '7'     ; Decimal        174
 F1AF      37        5836       db     '7'     ; Decimal        175
 F1B0      37        5837       db     '7'     ; Decimal        176
 F1B1      37        5838       db     '7'     ; Decimal        177
 F1B2      37        5839       db     '7'     ; Decimal        178
 F1B3      37        5840       db     '7'     ; Decimal        179
 F1B4      38        5841       db     '8'     ; Decimal        180
 F1B5      38        5842       db     '8'     ; Decimal        181
 F1B6      38        5843       db     '8'     ; Decimal        182
 F1B7      38        5844       db     '8'     ; Decimal        183
 F1B8      38        5845       db     '8'     ; Decimal        184
 F1B9      38        5846       db     '8'     ; Decimal        185
 F1BA      38        5847       db     '8'     ; Decimal        186
 F1BB      38        5848       db     '8'     ; Decimal        187
 F1BC      38        5849       db     '8'     ; Decimal        188
 F1BD      38        5850       db     '8'     ; Decimal        189
 F1BE      39        5851       db     '9'     ; Decimal        190
 F1BF      39        5852       db     '9'     ; Decimal        191
 F1C0      39        5853       db     '9'     ; Decimal        192
 F1C1      39        5854       db     '9'     ; Decimal        193


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 47
MV_ECU


 F1C2      39        5855       db     '9'     ; Decimal        194
 F1C3      39        5856       db     '9'     ; Decimal        195
 F1C4      39        5857       db     '9'     ; Decimal        196
 F1C5      39        5858       db     '9'     ; Decimal        197
 F1C6      39        5859       db     '9'     ; Decimal        198
 F1C7      39        5860       db     '9'     ; Decimal        199
 F1C8      30        5861       db     '0'     ; Decimal        200
 F1C9      30        5862       db     '0'     ; Decimal        201
 F1CA      30        5863       db     '0'     ; Decimal        202
 F1CB      30        5864       db     '0'     ; Decimal        203
 F1CC      30        5865       db     '0'     ; Decimal        204
 F1CD      30        5866       db     '0'     ; Decimal        205
 F1CE      30        5867       db     '0'     ; Decimal        206
 F1CF      30        5868       db     '0'     ; Decimal        207
 F1D0      30        5869       db     '0'     ; Decimal        208
 F1D1      30        5870       db     '0'     ; Decimal        209
 F1D2      31        5871       db     '1'     ; Decimal        210
 F1D3      31        5872       db     '1'     ; Decimal        211
 F1D4      31        5873       db     '1'     ; Decimal        212
 F1D5      31        5874       db     '1'     ; Decimal        213
 F1D6      31        5875       db     '1'     ; Decimal        214
 F1D7      31        5876       db     '1'     ; Decimal        215
 F1D8      31        5877       db     '1'     ; Decimal        216
 F1D9      31        5878       db     '1'     ; Decimal        217
 F1DA      31        5879       db     '1'     ; Decimal        218
 F1DB      31        5880       db     '1'     ; Decimal        219
 F1DC      32        5881       db     '2'     ; Decimal        220
 F1DD      32        5882       db     '2'     ; Decimal        221
 F1DE      32        5883       db     '2'     ; Decimal        222
 F1DF      32        5884       db     '2'     ; Decimal        223
 F1E0      32        5885       db     '2'     ; Decimal        224
 F1E1      32        5886       db     '2'     ; Decimal        225
 F1E2      32        5887       db     '2'     ; Decimal        226
 F1E3      32        5888       db     '2'     ; Decimal        227
 F1E4      32        5889       db     '2'     ; Decimal        228
 F1E5      32        5890       db     '2'     ; Decimal        229
 F1E6      33        5891       db     '3'     ; Decimal        230
 F1E7      33        5892       db     '3'     ; Decimal        231
 F1E8      33        5893       db     '3'     ; Decimal        232
 F1E9      33        5894       db     '3'     ; Decimal        233
 F1EA      33        5895       db     '3'     ; Decimal        234
 F1EB      33        5896       db     '3'     ; Decimal        235
 F1EC      33        5897       db     '3'     ; Decimal        236
 F1ED      33        5898       db     '3'     ; Decimal        237
 F1EE      33        5899       db     '3'     ; Decimal        238
 F1EF      33        5900       db     '3'     ; Decimal        239
 F1F0      34        5901       db     '4'     ; Decimal        240
 F1F1      34        5902       db     '4'     ; Decimal        241
 F1F2      34        5903       db     '4'     ; Decimal        242
 F1F3      34        5904       db     '4'     ; Decimal        243
 F1F4      34        5905       db     '4'     ; Decimal        244
 F1F5      34        5906       db     '4'     ; Decimal        245
 F1F6      34        5907       db     '4'     ; Decimal        246
 F1F7      34        5908       db     '4'     ; Decimal        247
 F1F8      34        5909       db     '4'     ; Decimal        248
 F1F9      34        5910       db     '4'     ; Decimal        249
 F1FA      35        5911       db     '5'     ; Decimal        250
 F1FB      35        5912       db     '5'     ; Decimal        251
 F1FC      35        5913       db     '5'     ; Decimal        252
 F1FD      35        5914       db     '5'     ; Decimal        253
 F1FE      35        5915       db     '5'     ; Decimal        254
 F1FF      35        5916       db     '5'     ; Decimal        255
                     5917                                        ; 10s column
 F200                5918       include "ASCII_Conv_1.inc"       ; Converts 8 bit value to ASCII,
                     5919  ASCII_CONV_1:
 F200      30        5920       db     '0'     ; Decimal 0
 F201      31        5921       db     '1'     ; Decimal 1
 F202      32        5922       db     '2'     ; Decimal 2
 F203      33        5923       db     '3'     ; Decimal        3
 F204      34        5924       db     '4'     ; Decimal        4
 F205      35        5925       db     '5'     ; Decimal        5
 F206      36        5926       db     '6'     ; Decimal        6
 F207      37        5927       db     '7'     ; Decimal        7
 F208      38        5928       db     '8'     ; Decimal        8
 F209      39        5929       db     '9'     ; Decimal        9
 F20A      30        5930       db     '0'     ; Decimal        10
 F20B      31        5931       db     '1'     ; Decimal        11
 F20C      32        5932       db     '2'     ; Decimal        12
 F20D      33        5933       db     '3'     ; Decimal        13
 F20E      34        5934       db     '4'     ; Decimal        14
 F20F      35        5935       db     '5'     ; Decimal        15
 F210      36        5936       db     '6'     ; Decimal        16
 F211      37        5937       db     '7'     ; Decimal        17
 F212      38        5938       db     '8'     ; Decimal        18
 F213      39        5939       db     '9'     ; Decimal        19
 F214      30        5940       db     '0'     ; Decimal        20
 F215      31        5941       db     '1'     ; Decimal        21
 F216      32        5942       db     '2'     ; Decimal        22
 F217      33        5943       db     '3'     ; Decimal        23
 F218      34        5944       db     '4'     ; Decimal        24
 F219      35        5945       db     '5'     ; Decimal        25
 F21A      36        5946       db     '6'     ; Decimal        26
 F21B      37        5947       db     '7'     ; Decimal        27
 F21C      38        5948       db     '8'     ; Decimal        28
 F21D      39        5949       db     '9'     ; Decimal        29
 F21E      30        5950       db     '0'     ; Decimal        30
 F21F      31        5951       db     '1'     ; Decimal        31
 F220      32        5952       db     '2'     ; Decimal        32
 F221      33        5953       db     '3'     ; Decimal        33
 F222      34        5954       db     '4'     ; Decimal        34
 F223      35        5955       db     '5'     ; Decimal        35
 F224      36        5956       db     '6'     ; Decimal        36
 F225      37        5957       db     '7'     ; Decimal        37
 F226      38        5958       db     '8'     ; Decimal        38
 F227      39        5959       db     '9'     ; Decimal        39
 F228      30        5960       db     '0'     ; Decimal        40
 F229      31        5961       db     '1'     ; Decimal        41
 F22A      32        5962       db     '2'     ; Decimal        42
 F22B      33        5963       db     '3'     ; Decimal        43
 F22C      34        5964       db     '4'     ; Decimal        44
 F22D      35        5965       db     '5'     ; Decimal        45
 F22E      36        5966       db     '6'     ; Decimal        46
 F22F      37        5967       db     '7'     ; Decimal        47
 F230      38        5968       db     '8'     ; Decimal        48
 F231      39        5969       db     '9'     ; Decimal        49
 F232      30        5970       db     '0'     ; Decimal        50
 F233      31        5971       db     '1'     ; Decimal        51
 F234      32        5972       db     '2'     ; Decimal        52
 F235      33        5973       db     '3'     ; Decimal        53
 F236      34        5974       db     '4'     ; Decimal        54
 F237      35        5975       db     '5'     ; Decimal        55
 F238      36        5976       db     '6'     ; Decimal        56
 F239      37        5977       db     '7'     ; Decimal        57
 F23A      38        5978       db     '8'     ; Decimal        58
 F23B      39        5979       db     '9'     ; Decimal        59
 F23C      30        5980       db     '0'     ; Decimal        60
 F23D      31        5981       db     '1'     ; Decimal        61
 F23E      32        5982       db     '2'     ; Decimal        62
 F23F      33        5983       db     '3'     ; Decimal        63
 F240      34        5984       db     '4'     ; Decimal        64
 F241      35        5985       db     '5'     ; Decimal        65
 F242      36        5986       db     '6'     ; Decimal        66
 F243      37        5987       db     '7'     ; Decimal        67
 F244      38        5988       db     '8'     ; Decimal        68
 F245      39        5989       db     '9'     ; Decimal        69
 F246      30        5990       db     '0'     ; Decimal        70


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 48
MV_ECU


 F247      31        5991       db     '1'     ; Decimal        71
 F248      32        5992       db     '2'     ; Decimal        72
 F249      33        5993       db     '3'     ; Decimal        73
 F24A      34        5994       db     '4'     ; Decimal        74
 F24B      35        5995       db     '5'     ; Decimal        75
 F24C      36        5996       db     '6'     ; Decimal        76
 F24D      37        5997       db     '7'     ; Decimal        77
 F24E      38        5998       db     '8'     ; Decimal        78
 F24F      39        5999       db     '9'     ; Decimal        79
 F250      30        6000       db     '0'     ; Decimal        80
 F251      31        6001       db     '1'     ; Decimal        81
 F252      32        6002       db     '2'     ; Decimal        82
 F253      33        6003       db     '3'     ; Decimal        83
 F254      34        6004       db     '4'     ; Decimal        84
 F255      35        6005       db     '5'     ; Decimal        85
 F256      36        6006       db     '6'     ; Decimal        86
 F257      37        6007       db     '7'     ; Decimal        87
 F258      38        6008       db     '8'     ; Decimal        88
 F259      39        6009       db     '9'     ; Decimal        89
 F25A      30        6010       db     '0'     ; Decimal        90
 F25B      31        6011       db     '1'     ; Decimal        91
 F25C      32        6012       db     '2'     ; Decimal        92
 F25D      33        6013       db     '3'     ; Decimal        93
 F25E      34        6014       db     '4'     ; Decimal        94
 F25F      35        6015       db     '5'     ; Decimal        95
 F260      36        6016       db     '6'     ; Decimal        96
 F261      37        6017       db     '7'     ; Decimal        97
 F262      38        6018       db     '8'     ; Decimal        98
 F263      39        6019       db     '9'     ; Decimal        99
 F264      30        6020       db     '0'     ; Decimal        100
 F265      31        6021       db     '1'     ; Decimal        101
 F266      32        6022       db     '2'     ; Decimal        102
 F267      33        6023       db     '3'     ; Decimal        103
 F268      34        6024       db     '4'     ; Decimal        104
 F269      35        6025       db     '5'     ; Decimal        105
 F26A      36        6026       db     '6'     ; Decimal        106
 F26B      37        6027       db     '7'     ; Decimal        107
 F26C      38        6028       db     '8'     ; Decimal        108
 F26D      39        6029       db     '9'     ; Decimal        109
 F26E      30        6030       db     '0'     ; Decimal        110
 F26F      31        6031       db     '1'     ; Decimal        111
 F270      32        6032       db     '2'     ; Decimal        112
 F271      33        6033       db     '3'     ; Decimal        113
 F272      34        6034       db     '4'     ; Decimal        114
 F273      35        6035       db     '5'     ; Decimal        115
 F274      36        6036       db     '6'     ; Decimal        116
 F275      37        6037       db     '7'     ; Decimal        117
 F276      38        6038       db     '8'     ; Decimal        118
 F277      39        6039       db     '9'     ; Decimal        119
 F278      30        6040       db     '0'     ; Decimal        120
 F279      31        6041       db     '1'     ; Decimal        121
 F27A      32        6042       db     '2'     ; Decimal        122
 F27B      33        6043       db     '3'     ; Decimal        123
 F27C      34        6044       db     '4'     ; Decimal        124
 F27D      35        6045       db     '5'     ; Decimal        125
 F27E      36        6046       db     '6'     ; Decimal        126
 F27F      37        6047       db     '7'     ; Decimal        127
 F280      38        6048       db     '8'     ; Decimal        128
 F281      39        6049       db     '9'     ; Decimal        129
 F282      30        6050       db     '0'     ; Decimal        130
 F283      31        6051       db     '1'     ; Decimal        131
 F284      32        6052       db     '2'     ; Decimal        132
 F285      33        6053       db     '3'     ; Decimal        133
 F286      34        6054       db     '4'     ; Decimal        134
 F287      35        6055       db     '5'     ; Decimal        135
 F288      36        6056       db     '6'     ; Decimal        136
 F289      37        6057       db     '7'     ; Decimal        137
 F28A      38        6058       db     '8'     ; Decimal        138
 F28B      39        6059       db     '9'     ; Decimal        139
 F28C      30        6060       db     '0'     ; Decimal        140
 F28D      31        6061       db     '1'     ; Decimal        141
 F28E      32        6062       db     '2'     ; Decimal        142
 F28F      33        6063       db     '3'     ; Decimal        143
 F290      34        6064       db     '4'     ; Decimal        144
 F291      35        6065       db     '5'     ; Decimal        145
 F292      36        6066       db     '6'     ; Decimal        146
 F293      37        6067       db     '7'     ; Decimal        147
 F294      38        6068       db     '8'     ; Decimal        148
 F295      39        6069       db     '9'     ; Decimal        149
 F296      30        6070       db     '0'     ; Decimal        150
 F297      31        6071       db     '1'     ; Decimal        151
 F298      32        6072       db     '2'     ; Decimal        152
 F299      33        6073       db     '3'     ; Decimal        153
 F29A      34        6074       db     '4'     ; Decimal        154
 F29B      35        6075       db     '5'     ; Decimal        155
 F29C      36        6076       db     '6'     ; Decimal        156
 F29D      37        6077       db     '7'     ; Decimal        157
 F29E      38        6078       db     '8'     ; Decimal        158
 F29F      39        6079       db     '9'     ; Decimal        159
 F2A0      30        6080       db     '0'     ; Decimal        160
 F2A1      31        6081       db     '1'     ; Decimal        161
 F2A2      32        6082       db     '2'     ; Decimal        162
 F2A3      33        6083       db     '3'     ; Decimal        163
 F2A4      34        6084       db     '4'     ; Decimal        164
 F2A5      35        6085       db     '5'     ; Decimal        165
 F2A6      36        6086       db     '6'     ; Decimal        166
 F2A7      37        6087       db     '7'     ; Decimal        167
 F2A8      38        6088       db     '8'     ; Decimal        168
 F2A9      39        6089       db     '9'     ; Decimal        169
 F2AA      30        6090       db     '0'     ; Decimal        170
 F2AB      31        6091       db     '1'     ; Decimal        171
 F2AC      32        6092       db     '2'     ; Decimal        172
 F2AD      33        6093       db     '3'     ; Decimal        173
 F2AE      34        6094       db     '4'     ; Decimal        174
 F2AF      35        6095       db     '5'     ; Decimal        175
 F2B0      36        6096       db     '6'     ; Decimal        176
 F2B1      37        6097       db     '7'     ; Decimal        177
 F2B2      38        6098       db     '8'     ; Decimal        178
 F2B3      39        6099       db     '9'     ; Decimal        179
 F2B4      30        6100       db     '0'     ; Decimal        180
 F2B5      31        6101       db     '1'     ; Decimal        181
 F2B6      32        6102       db     '2'     ; Decimal        182
 F2B7      33        6103       db     '3'     ; Decimal        183
 F2B8      34        6104       db     '4'     ; Decimal        184
 F2B9      35        6105       db     '5'     ; Decimal        185
 F2BA      36        6106       db     '6'     ; Decimal        186
 F2BB      37        6107       db     '7'     ; Decimal        187
 F2BC      38        6108       db     '8'     ; Decimal        188
 F2BD      39        6109       db     '9'     ; Decimal        189
 F2BE      30        6110       db     '0'     ; Decimal        190
 F2BF      31        6111       db     '1'     ; Decimal        191
 F2C0      32        6112       db     '2'     ; Decimal        192
 F2C1      33        6113       db     '3'     ; Decimal        193
 F2C2      34        6114       db     '4'     ; Decimal        194
 F2C3      35        6115       db     '5'     ; Decimal        195
 F2C4      36        6116       db     '6'     ; Decimal        196
 F2C5      37        6117       db     '7'     ; Decimal        197
 F2C6      38        6118       db     '8'     ; Decimal        198
 F2C7      39        6119       db     '9'     ; Decimal        199
 F2C8      30        6120       db     '0'     ; Decimal        200
 F2C9      31        6121       db     '1'     ; Decimal        201
 F2CA      32        6122       db     '2'     ; Decimal        202
 F2CB      33        6123       db     '3'     ; Decimal        203
 F2CC      34        6124       db     '4'     ; Decimal        204
 F2CD      35        6125       db     '5'     ; Decimal        205
 F2CE      36        6126       db     '6'     ; Decimal        206


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 49
MV_ECU


 F2CF      37        6127       db     '7'     ; Decimal        207
 F2D0      38        6128       db     '8'     ; Decimal        208
 F2D1      39        6129       db     '9'     ; Decimal        209
 F2D2      30        6130       db     '0'     ; Decimal        210
 F2D3      31        6131       db     '1'     ; Decimal        211
 F2D4      32        6132       db     '2'     ; Decimal        212
 F2D5      33        6133       db     '3'     ; Decimal        213
 F2D6      34        6134       db     '4'     ; Decimal        214
 F2D7      35        6135       db     '5'     ; Decimal        215
 F2D8      36        6136       db     '6'     ; Decimal        216
 F2D9      37        6137       db     '7'     ; Decimal        217
 F2DA      38        6138       db     '8'     ; Decimal        218
 F2DB      39        6139       db     '9'     ; Decimal        219
 F2DC      30        6140       db     '0'     ; Decimal        220
 F2DD      31        6141       db     '1'     ; Decimal        221
 F2DE      32        6142       db     '2'     ; Decimal        222
 F2DF      33        6143       db     '3'     ; Decimal        223
 F2E0      34        6144       db     '4'     ; Decimal        224
 F2E1      35        6145       db     '5'     ; Decimal        225
 F2E2      36        6146       db     '6'     ; Decimal        226
 F2E3      37        6147       db     '7'     ; Decimal        227
 F2E4      38        6148       db     '8'     ; Decimal        228
 F2E5      39        6149       db     '9'     ; Decimal        229
 F2E6      30        6150       db     '0'     ; Decimal        230
 F2E7      31        6151       db     '1'     ; Decimal        231
 F2E8      32        6152       db     '2'     ; Decimal        232
 F2E9      33        6153       db     '3'     ; Decimal        233
 F2EA      34        6154       db     '4'     ; Decimal        234
 F2EB      35        6155       db     '5'     ; Decimal        235
 F2EC      36        6156       db     '6'     ; Decimal        236
 F2ED      37        6157       db     '7'     ; Decimal        237
 F2EE      38        6158       db     '8'     ; Decimal        238
 F2EF      39        6159       db     '9'     ; Decimal        239
 F2F0      30        6160       db     '0'     ; Decimal        240
 F2F1      31        6161       db     '1'     ; Decimal        241
 F2F2      32        6162       db     '2'     ; Decimal        242
 F2F3      33        6163       db     '3'     ; Decimal        243
 F2F4      34        6164       db     '4'     ; Decimal        244
 F2F5      35        6165       db     '5'     ; Decimal        245
 F2F6      36        6166       db     '6'     ; Decimal        246
 F2F7      37        6167       db     '7'     ; Decimal        247
 F2F8      38        6168       db     '8'     ; Decimal        248
 F2F9      39        6169       db     '9'     ; Decimal        249
 F2FA      30        6170       db     '0'     ; Decimal        250
 F2FB      31        6171       db     '1'     ; Decimal        251
 F2FC      32        6172       db     '2'     ; Decimal        252
 F2FD      33        6173       db     '3'     ; Decimal        253
 F2FE      34        6174       db     '4'     ; Decimal        254
 F2FF      35        6175       db     '5'     ; Decimal        255
                     6176                                        ; 1s column
 F300                6177       include "DIYWBlambda.inc"         ; Converts WB O2 sensor voltage Raw
                     6178  ; Generated using: blood, sweat and tears
                     6179  ; TechEdge WBo2 SVOUT to Lambda, Motorola version
                     6180  ; davidh 2 March 04
                     6181  ; Modified for MV300,MV460,MV351WM R Hiebert 11/26/10
                     6182  
                     6183  DIYWBLAMBDA:
                     6184  ;      DB    Lambda x 10      ;        ADC      VOUT
 F300      3C        6185         DB        60T  ;         0         0.0
 F301      3C        6186          DB      60T      ;       1       0.019607843
 F302      3C        6187          DB      60T      ;       2       0.039215686
 F303      3C        6188         DB        60T  ;         3       0.058823529
 F304      3C        6189          DB      60T      ;       4       0.078431373
 F305      3C        6190          DB      60T      ;       5       0.098039216
 F306      3C        6191          DB      60T      ;       6       0.117647059
 F307      3C        6192          DB      60T      ;       7       0.137254902
 F308      3C        6193          DB      60T      ;       8       0.156862745
 F309      3C        6194          DB      60T      ;       9       0.176470588
 F30A      3C        6195          DB      60T      ;       10      0.196078431
 F30B      3C        6196          DB      60T      ;       11      0.215686275
 F30C      3C        6197          DB      60T      ;       12      0.235294118
 F30D      3C        6198          DB      60T      ;       13      0.254901961
 F30E      3C        6199          DB      60T      ;       14      0.274509804
 F30F      3C        6200          DB      60T      ;       15      0.294117647
 F310      3C        6201          DB      60T      ;       16      0.31372549
 F311      3C        6202          DB      60T      ;       17      0.333333333
 F312      3C        6203          DB      60T      ;       18      0.352941176
 F313      3C        6204          DB      60T      ;       19      0.37254902
 F314      3C        6205          DB      60T      ;       20      0.392156863
 F315      3C        6206          DB      60T      ;       21      0.411764706
 F316      3C        6207          DB      60T      ;       22      0.431372549
 F317      3C        6208          DB      60T      ;       23      0.450980392
 F318      3C        6209          DB      60T      ;       24      0.470588235
 F319      3C        6210          DB      60T      ;       25      0.490196078
 F31A      3C        6211          DB      60T      ;       26      0.509803922
 F31B      3C        6212          DB      60T      ;       27      0.529411765
 F31C      3C        6213          DB      60T      ;       28      0.549019608
 F31D      3C        6214          DB      60T      ;       29      0.568627451
 F31E      3C        6215          DB      60T      ;       30      0.588235294
 F31F      3C        6216          DB      60T      ;       31      0.607843137
 F320      3C        6217          DB      60T      ;       32      0.62745098
 F321      3C        6218          DB      60T      ;       33      0.647058824
 F322      3C        6219          DB      60T      ;       34      0.666666667
 F323      3C        6220          DB      60T      ;       35      0.68627451
 F324      3C        6221          DB      60T      ;       36      0.705882353
 F325      3C        6222          DB      60T      ;       37      0.725490196
 F326      3C        6223          DB      60T      ;       38      0.745098039
 F327      3C        6224          DB      60T      ;       39      0.764705882
 F328      3C        6225          DB      60T      ;       40      0.784313725
 F329      3C        6226          DB      60T      ;       41      0.803921569
 F32A      3C        6227          DB      60T      ;       42      0.823529412
 F32B      3C        6228          DB      60T      ;       43      0.843137255
 F32C      3C        6229          DB      60T      ;       44      0.862745098
 F32D      3C        6230          DB      60T      ;       45      0.882352941
 F32E      3C        6231          DB      60T      ;       46      0.901960784
 F32F      3C        6232          DB      60T      ;       47      0.921568627
 F330      3C        6233          DB      60T      ;       48      0.941176471
 F331      3C        6234          DB      60T      ;       49      0.960784314
 F332      3C        6235          DB      60T      ;       50      0.980392157
 F333      3C        6236         DB        60T  ;         51        1.0
 F334      3C        6237          DB      60T      ;       52      1.019607843
 F335      3D        6238          DB      61T      ;       53      1.039215686
 F336      3E        6239          DB      62T      ;       54      1.058823529
 F337      3E        6240          DB      62T      ;       55      1.078431373
 F338      3E        6241          DB      62T      ;       56      1.098039216
 F339      3F        6242          DB      63T      ;       57      1.117647059
 F33A      3F        6243          DB      63T      ;       58      1.137254902
 F33B      40        6244          DB      64T      ;       59      1.156862745
 F33C      40        6245          DB      64T      ;       60      1.176470588
 F33D      40        6246          DB      64T      ;       61      1.196078431
 F33E      41        6247          DB      65T      ;       62      1.215686275
 F33F      41        6248          DB      65T      ;       63      1.235294118
 F340      42        6249          DB      66T      ;       64      1.254901961
 F341      42        6250          DB      66T      ;       65      1.274509804
 F342      42        6251          DB      66T      ;       66      1.294117647
 F343      43        6252          DB      67T      ;       67      1.31372549
 F344      43        6253          DB      67T      ;       68      1.333333333
 F345      44        6254          DB      68T      ;       69      1.352941176
 F346      44        6255          DB      68T      ;       70      1.37254902
 F347      44        6256          DB      68T      ;       71      1.392156863
 F348      45        6257          DB      69T      ;       72      1.411764706
 F349      45        6258          DB      69T      ;       73      1.431372549
 F34A      46        6259          DB      70T      ;       74      1.450980392
 F34B      46        6260          DB      70T      ;       75      1.470588235
 F34C      46        6261          DB      70T      ;       76      1.490196078
 F34D      47        6262          DB      71T      ;       77      1.509803922


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 50
MV_ECU


 F34E      47        6263          DB      71T      ;       78      1.529411765
 F34F      48        6264          DB      72T      ;       79      1.549019608
 F350      48        6265          DB      72T      ;       80      1.568627451
 F351      48        6266          DB      72T      ;       81      1.588235294
 F352      49        6267          DB      73T      ;       82      1.607843137
 F353      49        6268          DB      73T      ;       83      1.62745098
 F354      4A        6269          DB      74T      ;       84      1.647058824
 F355      4A        6270          DB      74T      ;       85      1.666666667
 F356      4B        6271          DB      75T      ;       86      1.68627451
 F357      4B        6272          DB      75T      ;       87      1.705882353
 F358      4C        6273          DB      76T      ;       88      1.725490196
 F359      4C        6274          DB      76T      ;       89      1.745098039
 F35A      4D        6275          DB      77T      ;       90      1.764705882
 F35B      4D        6276          DB      77T      ;       91      1.784313725
 F35C      4E        6277          DB      78T      ;       92      1.803921569
 F35D      4E        6278          DB      78T      ;       93      1.823529412
 F35E      4F        6279          DB      79T      ;       94      1.843137255
 F35F      4F        6280          DB      79T      ;       95      1.862745098
 F360      50        6281          DB      80T      ;       96      1.882352941
 F361      50        6282          DB      80T      ;       97      1.901960784
 F362      51        6283          DB      81T      ;       98      1.921568627
 F363      51        6284          DB      81T      ;       99      1.941176471
 F364      52        6285          DB      82T      ;       100      1.960784314
 F365      52        6286          DB      82T      ;       101      1.980392157
 F366      53        6287         DB        83T  ;         102  2.0
 F367      53        6288          DB      83T      ;       103      2.019607843
 F368      54        6289          DB      84T      ;       104      2.039215686
 F369      54        6290          DB      84T      ;       105      2.058823529
 F36A      55        6291          DB      85T      ;       106      2.078431373
 F36B      56        6292          DB      86T      ;       107      2.098039216
 F36C      56        6293          DB      86T      ;       108      2.117647059
 F36D      57        6294          DB      87T      ;       109      2.137254902
 F36E      57        6295          DB      87T      ;       110      2.156862745
 F36F      58        6296          DB      88T      ;       111      2.176470588
 F370      59        6297          DB      89T      ;       112      2.196078431
 F371      59        6298          DB      89T      ;       113      2.215686275
 F372      5A        6299          DB      90T      ;       114      2.235294118
 F373      5B        6300          DB      91T      ;       115      2.254901961
 F374      5B        6301          DB      91T      ;       116      2.274509804
 F375      5C        6302          DB      92T      ;       117      2.294117647
 F376      5D        6303          DB      93T      ;       118      2.31372549
 F377      5E        6304          DB      94T      ;       119      2.333333333
 F378      5E        6305          DB      94T      ;       120      2.352941176
 F379      5F        6306          DB      95T      ;       121      2.37254902
 F37A      60        6307          DB      96T      ;       122      2.392156863
 F37B      60        6308          DB      96T      ;       123      2.411764706
 F37C      61        6309          DB      97T      ;       124      2.431372549
 F37D      62        6310          DB      98T      ;       125      2.450980392
 F37E      63        6311          DB      99T      ;       126      2.470588235
 F37F      64        6312          DB      100T      ;       127      2.490196078
 F380      65        6313          DB      101T      ;       128      2.509803922
 F381      66        6314          DB      102T      ;       129      2.529411765
 F382      68        6315          DB      104T      ;       130      2.549019608
 F383      69        6316          DB      105T      ;       131      2.568627451
 F384      6B        6317          DB      107T      ;       132      2.588235294
 F385      6C        6318          DB      108T      ;       133      2.607843137
 F386      6E        6319          DB      110T      ;       134      2.62745098
 F387      70        6320          DB      112T      ;       135      2.647058824
 F388      72        6321          DB      114T      ;       136      2.666666667
 F389      74        6322          DB      116T      ;       137      2.68627451
 F38A      75        6323          DB      117T      ;       138      2.705882353
 F38B      77        6324          DB      119T      ;       139      2.725490196
 F38C      79        6325          DB      121T      ;       140      2.745098039
 F38D      7C        6326          DB      124T      ;       141      2.764705882
 F38E      7E        6327          DB      126T      ;       142      2.784313725
 F38F      80        6328          DB      128T      ;       143      2.803921569
 F390      82        6329          DB      130T      ;       144      2.823529412
 F391      85        6330          DB      133T      ;       145      2.843137255
 F392      87        6331          DB      135T      ;       146      2.862745098
 F393      89        6332          DB      137T      ;       147      2.882352941
 F394      8C        6333          DB      140T      ;       148      2.901960784
 F395      8F        6334          DB      143T      ;       149      2.921568627
 F396      92        6335          DB      146T      ;       150      2.941176471
 F397      95        6336          DB      149T      ;       151      2.960784314
 F398      98        6337          DB      152T      ;       152      2.980392157
 F399      9B        6338         DB        155T          ;         153          3.0
 F39A      9F        6339          DB      159T      ;       154      3.019607843
 F39B      A2        6340          DB      162T      ;       155      3.039215686
 F39C      A6        6341          DB      166T      ;       156      3.058823529
 F39D      AA        6342          DB      170T      ;       157      3.078431373 afr x 10 calculation limit
 F39E      AA        6343          DB      170T      ;       158      3.098039216
 F39F      AA        6344          DB      170T      ;       159      3.117647059
 F3A0      AA        6345          DB      170T      ;       160      3.137254902
 F3A1      AA        6346          DB      170T      ;       161      3.156862745
 F3A2      AA        6347          DB      170T      ;       162      3.176470588
 F3A3      AA        6348          DB      170T      ;       163      3.196078431
 F3A4      AA        6349          DB      170T      ;       164      3.215686275
 F3A5      AA        6350          DB      170T      ;       165      3.235294118
 F3A6      AA        6351          DB      170T      ;       166      3.254901961
 F3A7      AA        6352          DB      170T      ;       167      3.274509804
 F3A8      AA        6353          DB      170T      ;       168      3.294117647
 F3A9      AA        6354          DB      170T      ;       169      3.31372549
 F3AA      AA        6355          DB      170T      ;       170      3.333333333
 F3AB      AA        6356          DB      170T      ;       171      3.352941176
 F3AC      AA        6357          DB      170T      ;       172      3.37254902
 F3AD      AA        6358          DB      170T      ;       173      3.392156863
 F3AE      AA        6359          DB      170T      ;       174      3.411764706
 F3AF      AA        6360          DB      170T      ;       175      3.431372549
 F3B0      AA        6361          DB      170T      ;       176      3.450980392
 F3B1      AA        6362          DB      170T      ;       177      3.470588235
 F3B2      AA        6363          DB      170T      ;       178      3.490196078
 F3B3      AA        6364          DB      170T      ;       179      3.509803922
 F3B4      AA        6365          DB      170T      ;       180      3.529411765
 F3B5      AA        6366          DB      170T      ;       181      3.549019608
 F3B6      AA        6367          DB      170T      ;       182      3.568627451
 F3B7      AA        6368          DB      170T      ;       183      3.588235294
 F3B8      AA        6369          DB      170T      ;       184      3.607843137
 F3B9      AA        6370          DB      170T      ;       185      3.62745098
 F3BA      AA        6371          DB      170T      ;       186      3.647058824
 F3BB      AA        6372          DB      170T      ;       187      3.666666667
 F3BC      AA        6373          DB      170T      ;       188      3.68627451
 F3BD      AA        6374          DB      170T      ;       189      3.705882353
 F3BE      AA        6375          DB      170T      ;       190      3.725490196
 F3BF      AA        6376          DB      170T      ;       191      3.745098039
 F3C0      AA        6377          DB      170T      ;       192      3.764705882
 F3C1      AA        6378          DB      170T      ;       193      3.784313725
 F3C2      AA        6379          DB      170T      ;       194      3.803921569
 F3C3      AA        6380          DB      170T      ;       195      3.823529412
 F3C4      AA        6381          DB      170T      ;       196      3.843137255
 F3C5      AA        6382          DB      170T      ;       197      3.862745098
 F3C6      AA        6383          DB      170T      ;       198      3.882352941
 F3C7      AA        6384          DB      170T      ;       199      3.901960784
 F3C8      AA        6385          DB      170T      ;       200      3.921568627
 F3C9      AA        6386          DB      170T      ;       201      3.941176471
 F3CA      AA        6387          DB      170T      ;       202      3.960784314
 F3CB      AA        6388          DB      170T      ;       203      3.980392157
 F3CC      AA        6389         DB      170T    ;         204  4.0
 F3CD      AA        6390          DB      170T      ;       205      4.019607843
 F3CE      AA        6391          DB      170T      ;       206      4.039215686
 F3CF      AA        6392          DB      170T      ;       207      4.058823529
 F3D0      AA        6393          DB      170T      ;       208      4.078431373
 F3D1      AA        6394          DB      170T      ;       209      4.098039216
 F3D2      AA        6395          DB      170T      ;       210      4.117647059
 F3D3      AA        6396          DB      170T      ;       211      4.137254902
 F3D4      AA        6397          DB      170T      ;       212      4.156862745
 F3D5      AA        6398          DB      170T      ;       213      4.176470588


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 51
MV_ECU


 F3D6      AA        6399          DB      170T      ;       214      4.196078431
 F3D7      AA        6400          DB      170T      ;       215      4.215686275
 F3D8      AA        6401          DB      170T      ;       216      4.235294118
 F3D9      AA        6402          DB      170T      ;       217      4.254901961
 F3DA      AA        6403          DB      170T      ;       218      4.274509804
 F3DB      AA        6404          DB      170T      ;       219      4.294117647
 F3DC      AA        6405          DB      170T      ;       220      4.31372549
 F3DD      AA        6406          DB      170T      ;       221      4.333333333
 F3DE      AA        6407          DB      170T      ;       222      4.352941176
 F3DF      AA        6408          DB      170T      ;       223      4.37254902
 F3E0      AA        6409          DB      170T      ;       224      4.392156863
 F3E1      AA        6410          DB      170T      ;       225      4.411764706
 F3E2      AA        6411          DB      170T      ;       226      4.431372549
 F3E3      AA        6412          DB      170T      ;       227      4.450980392
 F3E4      AA        6413          DB      170T      ;       228      4.470588235
 F3E5      AA        6414          DB      170T      ;       229      4.490196078
 F3E6      AA        6415          DB      170T      ;       230      4.509803922
 F3E7      AA        6416          DB      170T      ;       231      4.529411765
 F3E8      AA        6417          DB      170T      ;       232      4.549019608
 F3E9      AA        6418          DB      170T      ;       233      4.568627451
 F3EA      AA        6419          DB      170T      ;       234      4.588235294
 F3EB      AA        6420          DB      170T      ;       235      4.607843137
 F3EC      AA        6421          DB      170T      ;       236      4.62745098
 F3ED      AA        6422          DB      170T      ;       237      4.647058824
 F3EE      AA        6423          DB      170T      ;       238      4.666666667
 F3EF      AA        6424          DB      170T      ;       239      4.68627451
 F3F0      AA        6425          DB      170T      ;       240      4.705882353
 F3F1      AA        6426          DB      170T      ;       241      4.725490196
 F3F2      AA        6427          DB      170T      ;       242      4.745098039
 F3F3      AA        6428          DB      170T      ;       243      4.764705882
 F3F4      AA        6429          DB      170T      ;       244      4.784313725
 F3F5      AA        6430          DB      170T      ;       245      4.803921569
 F3F6      AA        6431          DB      170T      ;       246      4.823529412
 F3F7      AA        6432          DB      170T      ;       247      4.843137255
 F3F8      AA        6433          DB      170T      ;       248      4.862745098
 F3F9      AA        6434          DB      170T      ;       249      4.882352941
 F3FA      AA        6435          DB      170T      ;       250      4.901960784
 F3FB      AA        6436          DB      170T      ;       251      4.921568627
 F3FC      AA        6437          DB      170T      ;       252      4.941176471
 F3FD      AA        6438          DB      170T      ;       253      4.960784314
 F3FE      AA        6439          DB      170T      ;       254      4.980392157
 F3FF      AA        6440         DB        170T          ;       255    5.0
                     6441                                        ; Reading to Lambda * 10
 F400                6442       include "kpafactor4250rjh.inc"   ; Converts mapADC and baroADC
                     6443  KPAFACTOR4250rjh:
 F400      64        6444          DB      100T     ; x=000;=0.000v;sensor failure
 F401      0B        6445          DB      11T      ; x=001;=0.020v
 F402      0C        6446          DB      12T      ; x=002;=0.039v
 F403      0D        6447          DB      13T      ; x=003;=0.059v
 F404      0E        6448          DB      14T      ; x=004;=0.078v
 F405      0F        6449          DB      15T      ; x=005;=0.098v
 F406      10        6450          DB      16T      ; x=006;=0.118v
 F407      11        6451          DB      17T      ; x=007;=0.137v
 F408      12        6452          DB      18T      ; x=008;=0.157v
 F409      13        6453          DB      19T      ; x=009;=0.176v
 F40A      14        6454          DB      20T      ; x=010;=0.196v
 F40B      15        6455          DB      21T      ; x=011;=0.216v
 F40C      16        6456          DB      22T      ; x=012;=0.235v
 F40D      17        6457          DB      23T      ; x=013;=0.255v
 F40E      18        6458          DB      24T      ; x=014;=0.275v
 F40F      19        6459          DB      25T      ; x=015;=0.294v
 F410      1A        6460          DB      26T      ; x=016;=0.314v
 F411      1B        6461          DB      27T      ; x=017;=0.333v
 F412      1C        6462          DB      28T      ; x=018;=0.353v
 F413      1D        6463          DB      29T      ; x=019;=0.373v
 F414      1E        6464          DB      30T      ; x=020;=0.392v
 F415      1F        6465          DB      31T      ; x=021;=0.412v
 F416      20        6466          DB      32T      ; x=022;=0.431v
 F417      21        6467          DB      33T      ; x=023;=0.451v
 F418      22        6468          DB      34T      ; x=024;=0.471v
 F419      23        6469          DB      35T      ; x=025;=0.490v
 F41A      23        6470          DB      35T      ; x=026;=0.510v
 F41B      24        6471          DB      36T      ; x=027;=0.529v
 F41C      25        6472          DB      37T      ; x=028;=0.549v
 F41D      26        6473          DB      38T      ; x=029;=0.569v
 F41E      27        6474          DB      39T      ; x=030;=0.588v
 F41F      28        6475          DB      40T      ; x=031;=0.608v
 F420      29        6476          DB      41T      ; x=032;=0.627v
 F421      2A        6477          DB      42T      ; x=033;=0.647v
 F422      2B        6478          DB      43T      ; x=034;=0.667v
 F423      2C        6479          DB      44T      ; x=035;=0.686v
 F424      2D        6480          DB      45T      ; x=036;=0.706v
 F425      2E        6481          DB      46T      ; x=037;=0.725v
 F426      2F        6482          DB      47T      ; x=038;=0.745v
 F427      30        6483          DB      48T      ; x=039;=0.765v
 F428      31        6484          DB      49T      ; x=040;=0.784v
 F429      32        6485          DB      50T      ; x=041;=0.804v
 F42A      33        6486          DB      51T      ; x=042;=0.824v
 F42B      34        6487          DB      52T      ; x=043;=0.843v
 F42C      35        6488          DB      53T      ; x=044;=0.863v
 F42D      36        6489          DB      54T      ; x=045;=0.882v
 F42E      37        6490          DB      55T      ; x=046;=0.902v
 F42F      38        6491          DB      56T      ; x=047;=0.922v
 F430      39        6492          DB      57T      ; x=048;=0.941v
 F431      3A        6493          DB      58T      ; x=049;=0.961v
 F432      3B        6494          DB      59T      ; x=050;=0.980v
 F433      3C        6495          DB      60T      ; x=051;=1.000v
 F434      3D        6496          DB      61T      ; x=052;=1.020v
 F435      3E        6497          DB      62T      ; x=053;=1.039v
 F436      3F        6498          DB      63T      ; x=054;=1.059v
 F437      40        6499          DB      64T      ; x=055;=1.078v
 F438      41        6500          DB      65T      ; x=056;=1.096v
 F439      42        6501          DB      66T      ; x=057;=1.118v
 F43A      43        6502          DB      67T      ; x=058;=1.137v
 F43B      44        6503          DB      68T      ; x=059;=1.157v
 F43C      45        6504          DB      69T      ; x=060;=1.176v
 F43D      46        6505          DB      70T      ; x=061;=1,196v
 F43E      47        6506          DB      71T      ; x=062;=1,216v
 F43F      48        6507          DB      72T      ; x=063;=1.235v
 F440      49        6508          DB      73T      ; x=064;=1.255v
 F441      4A        6509          DB      74T      ; x=065;=1.275v
 F442      4B        6510          DB      75T      ; x=066;=1.294v
 F443      4C        6511          DB      76T      ; x=067;=1.314v
 F444      4D        6512          DB      77T      ; x=068;=1.333v
 F445      4E        6513          DB      78T      ; x=069;=1.353v
 F446      4F        6514          DB      79T      ; x=070;=1.373v
 F447      50        6515          DB      80T      ; x=071;=1.392v
 F448      51        6516          DB      81T      ; x=072;=1.412v
 F449      52        6517          DB      82T      ; x=073;=1.431v
 F44A      53        6518          DB      83T      ; x=074;=1.451v
 F44B      54        6519          DB      84T      ; x=075;=1.471v
 F44C      55        6520          DB      85T      ; x=076;=1.490v
 F44D      55        6521          DB      85T      ; x=077;=1.510v
 F44E      56        6522          DB      86T      ; x=078;=1.529v
 F44F      57        6523          DB      87T      ; x=079;=1.549v
 F450      58        6524          DB      88T      ; x=080;=1.569v
 F451      59        6525          DB      89T      ; x=081;=1.588v
 F452      5A        6526          DB      90T      ; x=082;=1.608v
 F453      5B        6527          DB      91T      ; x=083;=1.627v
 F454      5C        6528          DB      92T      ; x=084;=1.647v
 F455      5D        6529          DB      93T      ; x=085;=1.667v
 F456      5E        6530          DB      94T      ; x=086;=1.686v
 F457      5F        6531          DB      95T      ; x=087;=1.706v
 F458      60        6532          DB      96T      ; x=088;=1.725v
 F459      61        6533          DB      97T      ; x=089;=1.745v
 F45A      62        6534          DB      98T      ; x=090;=1.765v


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 52
MV_ECU


 F45B      63        6535          DB      99T      ; x=091;=1.784v
 F45C      64        6536          DB      100T     ; x=092;=1.804v
 F45D      65        6537          DB      101T     ; x=093;=1.824v
 F45E      66        6538          DB      102T     ; x=094;=1.843v
 F45F      67        6539          DB      103T     ; x=095;=1.863v
 F460      68        6540          DB      104T     ; x=096;=1.882v
 F461      69        6541          DB      105T     ; x=097;=1.902v
 F462      6A        6542          DB      106T     ; x=098;=1.922v
 F463      6B        6543          DB      107T     ; x=099;=1.941v
 F464      6C        6544          DB      108T     ; x=100;=1.961v
 F465      6D        6545          DB      109T     ; x=101;=1.980v
 F466      6E        6546          DB      110T     ; x=102;=2.000v
 F467      6F        6547          DB      111T     ; x=103;=2.020v
 F468      70        6548          DB      112T     ; x=104;=2.039v
 F469      71        6549          DB      113T     ; x=105;=2.059v
 F46A      72        6550          DB      114T     ; x=106;=2.078v
 F46B      73        6551          DB      115T     ; x=107;=2.098v
 F46C      74        6552          DB      116T     ; x=108;=2.118v
 F46D      75        6553          DB      117T     ; x=109;=2.137v
 F46E      76        6554          DB      118T     ; x=110;=2.157v
 F46F      77        6555          DB      119T     ; x=111;=2.176v
 F470      78        6556          DB      120T     ; x=112;=2.196v
 F471      79        6557          DB      121T     ; x=113;=2.216v
 F472      7A        6558          DB      122T     ; x=114;=2.235v
 F473      7B        6559          DB      123T     ; x=115;=2.255v
 F474      7C        6560          DB      124T     ; x=116;=2.275v
 F475      7D        6561          DB      125T     ; x=117;=2.294v
 F476      7E        6562          DB      126T     ; x=118;=2.314v
 F477      7F        6563          DB      127T     ; x=119;=2.333v
 F478      80        6564          DB      128T     ; x=120;=2.353v
 F479      81        6565          DB      129T     ; x=121;=2.373v
 F47A      82        6566          DB      130T     ; x=122;=2.392v
 F47B      83        6567          DB      131T     ; x=123;=2.412v
 F47C      84        6568          DB      132T     ; x=124;=2.431v
 F47D      85        6569          DB      133T     ; x=125;=2.451v
 F47E      86        6570          DB      134T     ; x=126;=2.471v
 F47F      87        6571          DB      135T     ; x=127;=2.490v
 F480      87        6572          DB      135T     ; x=128;=2.510v
 F481      88        6573          DB      136T     ; x=129;=2.529v
 F482      89        6574          DB      137T     ; x=130,=2.549v
 F483      8A        6575          DB      138T     ; x=131;=2.569v
 F484      8B        6576          DB      139T     ; x=132;=2.588v
 F485      8C        6577          DB      140T     ; x=133;=2.608v
 F486      8D        6578          DB      141T     ; x=134;=2.627v
 F487      8E        6579          DB      142T     ; x=135;=2.647v
 F488      8F        6580          DB      143T     ; x=136;=2.667v
 F489      90        6581          DB      144T     ; x=137;=2.686v
 F48A      91        6582          DB      145T     ; x=138;=2.706v
 F48B      92        6583          DB      146T     ; x=139;=2.725v
 F48C      93        6584          DB      147T     ; x=140;=2.745v
 F48D      94        6585          DB      148T     ; x=141;=2.765v
 F48E      95        6586          DB      149T     ; x=142;=2.784v
 F48F      96        6587          DB      150T     ; x=143;=2.804v
 F490      97        6588          DB      151T     ; x=144;=0.824v
 F491      98        6589          DB      152T     ; x=145;=2.843v
 F492      99        6590          DB      153T     ; x=146;=2.863v
 F493      9A        6591          DB      154T     ; x=147;=2.882v
 F494      9B        6592          DB      155T     ; x=148;=2.902v
 F495      9C        6593          DB      156T     ; x=149;=2.922v
 F496      9D        6594          DB      157T     ; x=150;=2.941v
 F497      9E        6595          DB      158T     ; x=151;=2.961v
 F498      9F        6596          DB      159T     ; x=152;=2.980v
 F499      A0        6597          DB      160T     ; x=153;=3.000v
 F49A      A1        6598          DB      161T     ; x=154;=3.020v
 F49B      A2        6599          DB      162T     ; x=155;=3.039v
 F49C      A3        6600          DB      163T     ; x=156;=3.059v
 F49D      A4        6601          DB      164T     ; x=157;=3.078v
 F49E      A5        6602          DB      165T     ; x=158;=3.098v
 F49F      A6        6603          DB      166T     ; x=159;=3.118v
 F4A0      A7        6604          DB      167T     ; x=160;=3.137v
 F4A1      A8        6605          DB      168T     ; x=161;=3.157v
 F4A2      A9        6606          DB      169T     ; x=162;=3.176v
 F4A3      AA        6607          DB      170T     ; x=163;=3.196v
 F4A4      AB        6608          DB      171T     ; x=164;=3.216v
 F4A5      AC        6609          DB      172T     ; x=165;=3.235v
 F4A6      AD        6610          DB      173T     ; x=166;=3.255v
 F4A7      AE        6611          DB      174T     ; x=167;=3.275v
 F4A8      AF        6612          DB      175T     ; x=168;=3.294v
 F4A9      B0        6613          DB      176T     ; x=169;=3.314v
 F4AA      B1        6614          DB      177T     ; x=170;=3.333v
 F4AB      B2        6615          DB      178T     ; x=171;=3.353v
 F4AC      B3        6616          DB      179T     ; x=172;=3.373v
 F4AD      B4        6617          DB      180T     ; x=173;=3.392v
 F4AE      B5        6618          DB      181T     ; x=174;=3.412v
 F4AF      B6        6619          DB      182T     ; x=175;=3.431v
 F4B0      B7        6620          DB      183T     ; x=176;=3.451v
 F4B1      B8        6621          DB      184T     ; x=177;=3.471v
 F4B2      B9        6622          DB      185T     ; x=178;=3.490v
 F4B3      B9        6623          DB      185T     ; x=179;=3.510v
 F4B4      BA        6624          DB      186T     ; x=180;=3.529v
 F4B5      BB        6625          DB      187T     ; x=181;=3.549v
 F4B6      BC        6626          DB      188T     ; x=182;=3.569v
 F4B7      BD        6627          DB      189T     ; x=183;=3.588v
 F4B8      BE        6628          DB      190T     ; x=184;=3.608v
 F4B9      BF        6629          DB      191T     ; x=185;=3.627v
 F4BA      C0        6630          DB      192T     ; x=186;=3.647v
 F4BB      C1        6631          DB      193T     ; x=187;=3.667v
 F4BC      C2        6632          DB      194T     ; x=188;=3.686v
 F4BD      C3        6633          DB      195T     ; x=189;=3.706v
 F4BE      C4        6634          DB      196T     ; x=190;=3.725v
 F4BF      C5        6635          DB      197T     ; x=191;=3.745v
 F4C0      C6        6636          DB      198T     ; x=192;=3.765v
 F4C1      C7        6637          DB      199T     ; x=193;=3.784v
 F4C2      C8        6638          DB      200T     ; x=194;=3.804v
 F4C3      C9        6639          DB      201T     ; x=195;=3.824v
 F4C4      CA        6640          DB      202T     ; x=196;=3.843v
 F4C5      CB        6641          DB      203T     ; x=197;=3.863v
 F4C6      CC        6642          DB      204T     ; x=198;=3.882v
 F4C7      CD        6643          DB      205T     ; x=199;=3.902v
 F4C8      CE        6644          DB      206T     ; x=200;=3.922v
 F4C9      CF        6645          DB      207T     ; x=201;=3.941v
 F4CA      D0        6646          DB      208T     ; x=202;=3.961v
 F4CB      D1        6647          DB      209T     ; x=203;=3.980v
 F4CC      D2        6648          DB      210T     ; x=204;=4.000v
 F4CD      D3        6649          DB      211T     ; x=205;=4.020v
 F4CE      D4        6650          DB      212T     ; x=206;=4.039v
 F4CF      D5        6651          DB      213T     ; x=207;=4.059v
 F4D0      D6        6652          DB      214T     ; x=208;=4.078v
 F4D1      D7        6653          DB      215T     ; x=209;=4.098v
 F4D2      D8        6654          DB      216T     ; x=210;=4.118v
 F4D3      D9        6655          DB      217T     ; x=211;=4.137v
 F4D4      DA        6656          DB      218T     ; x=212;=4.157v
 F4D5      DB        6657          DB      219T     ; x=213;=4.176v
 F4D6      DC        6658          DB      220T     ; x=214;=4.196v
 F4D7      DD        6659          DB      221T     ; x=215;=4.216v
 F4D8      DE        6660          DB      222T     ; x=216;=4.235v
 F4D9      DF        6661          DB      223T     ; x=217;=4.255v
 F4DA      E0        6662          DB      224T     ; x=218;=4.275v
 F4DB      E1        6663          DB      225T     ; x=219;=4.294v
 F4DC      E2        6664          DB      226T     ; x=220;=4.314v
 F4DD      E3        6665          DB      227T     ; x=221;=4.333v
 F4DE      E4        6666          DB      228T     ; x=222;=4.353v
 F4DF      E5        6667          DB      229T     ; x=223;=4.373v
 F4E0      E6        6668          DB      230T     ; x=224;=4.392v
 F4E1      E7        6669          DB      231T     ; x=225;=4.412v
 F4E2      E8        6670          DB      232T     ; x=226;=4.431v


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 53
MV_ECU


 F4E3      E9        6671          DB      233T     ; x=227;=4.451v
 F4E4      EA        6672          DB      234T     ; x=228;=4.471v
 F4E5      EB        6673          DB      235T     ; x=229;=4.490v
 F4E6      EB        6674          DB      235T     ; x=230;=4.510v
 F4E7      EC        6675          DB      236T     ; x=231;=4.529v
 F4E8      ED        6676          DB      237T     ; x=232;=4.549v
 F4E9      EE        6677          DB      238T     ; x=233;=4.569v
 F4EA      EF        6678          DB      239T     ; x=234;=4.588v
 F4EB      F0        6679          DB      240T     ; x=235;=4.608v
 F4EC      F1        6680          DB      241T     ; x=236;=4.627v
 F4ED      F2        6681          DB      242T     ; x=237;=4.647v
 F4EE      F3        6682          DB      243T     ; x=238;=4.667v
 F4EF      F4        6683          DB      244T     ; x=239;=4.686v
 F4F0      F5        6684          DB      245T     ; x=240;=4.706v
 F4F1      F6        6685          DB      246T     ; x=241;=4.725v
 F4F2      F7        6686          DB      247T     ; x=242;=4.745v
 F4F3      F8        6687          DB      248T     ; x=243;=4.765v
 F4F4      F9        6688          DB      249T     ; x=244;=4.784v
 F4F5      FA        6689          DB      250T     ; x=245;=4.804v
 F4F6      FB        6690          DB      251T     ; x=246;=4.824v
 F4F7      FC        6691          DB      252T     ; x=247;=4.843v
 F4F8      FD        6692          DB      253T     ; x=248;=4.863v
 F4F9      FE        6693          DB      254T     ; x=249;=4.882v
 F4FA      FF        6694          DB      255T     ; x=250;=4.902v
 F4FB      FF        6695          DB      255T     ; x=251;=4.922v
 F4FC      FF        6696          DB      255T     ; x=252;=4.941v
 F4FD      FF        6697          DB      255T     ; x=253;=4.961v
 F4FE      FF        6698          DB      255T     ; x=254;=4.980v
 F4FF      64        6699          DB      100T     ; x=255;=5.000v;sensor failure
                     6700                                        ; to kpa
 F500                6701       include "thermfactor.inc"        ; Converts matADC and cltADC
                     6702  ; Generated using EasyTherm4.exe
                     6703  ;
                     6704  ; Ford ECT
                     6705  ;
                     6706  ; ***** CAUTION - NON STD BIAS RESISTOR REQUIRED *****
                     6707  ; File generated for use with 22000 ohm resistor at R7
                     6708  ;
                     6709  ; Steinhart-Hart coefficients:  A= 9.34735E-04   B=2.2114E-04   C= 1.273387E-07
                     6710  ;
                     6711  ; Input Data:        Temp, degF      Resistance
                     6712  ;                50             58750
                     6713  ;               104             16150
                     6714  ;               212              2070
                     6715  ;
                     6716  
                     6717  THERMFACTOR:
                     6718                       ;    ADC  Temp, degF
 F500      D2        6719       DB      210T    ;     0    Sensor Failure - use 170 degF as default
 F501      FF        6720       DB      255T    ;     1    472.13
 F502      FF        6721       DB      255T    ;     2    400.72
 F503      FF        6722       DB      255T    ;     3    363.34
 F504      FF        6723       DB      255T    ;     4    338.48
 F505      FF        6724       DB      255T    ;     5    320.04
 F506      FF        6725       DB      255T    ;     6    305.49
 F507      FF        6726       DB      255T    ;     7    293.51
 F508      FF        6727       DB      255T    ;     8    283.36
 F509      FF        6728       DB      255T    ;     9    274.58
 F50A      FF        6729       DB      255T    ;    10    266.84
 F50B      FF        6730       DB      255T    ;    11    259.94
 F50C      FF        6731       DB      255T    ;    12    253.72
 F50D      FF        6732       DB      255T    ;    13    248.06
 F50E      FF        6733       DB      255T    ;    14    242.86
 F50F      FF        6734       DB      255T    ;    15    238.06
 F510      FF        6735       DB      255T    ;    16    233.61
 F511      FF        6736       DB      255T    ;    17    229.45
 F512      FF        6737       DB      255T    ;    18    225.56
 F513      FF        6738       DB      255T    ;    19    221.89
 F514      FF        6739       DB      255T    ;    20    218.43
 F515      FF        6740       DB      255T    ;    21    215.16
 F516      FC        6741       DB      252T    ;    22    212.05
 F517      F9        6742       DB      249T    ;    23    209.09
 F518      F6        6743       DB      246T    ;    24    206.26
 F519      F4        6744       DB      244T    ;    25    203.56
 F51A      F1        6745       DB      241T    ;    26    200.96
 F51B      EE        6746       DB      238T    ;    27    198.48
 F51C      EC        6747       DB      236T    ;    28    196.08
 F51D      EA        6748       DB      234T    ;    29    193.78
 F51E      E8        6749       DB      232T    ;    30    191.56
 F51F      E5        6750       DB      229T    ;    31    189.41
 F520      E3        6751       DB      227T    ;    32    187.33
 F521      E1        6752       DB      225T    ;    33    185.32
 F522      DF        6753       DB      223T    ;    34    183.38
 F523      DD        6754       DB      221T    ;    35    181.48
 F524      DC        6755       DB      220T    ;    36    179.65
 F525      DA        6756       DB      218T    ;    37    177.86
 F526      D8        6757       DB      216T    ;    38    176.12
 F527      D6        6758       DB      214T    ;    39    174.43
 F528      D5        6759       DB      213T    ;    40    172.78
 F529      D3        6760       DB      211T    ;    41    171.17
 F52A      D2        6761       DB      210T    ;    42    169.60
 F52B      D0        6762       DB      208T    ;    43    168.06
 F52C      CF        6763       DB      207T    ;    44    166.56
 F52D      CD        6764       DB      205T    ;    45    165.09
 F52E      CC        6765       DB      204T    ;    46    163.66
 F52F      CA        6766       DB      202T    ;    47    162.25
 F530      C9        6767       DB      201T    ;    48    160.87
 F531      C8        6768       DB      200T    ;    49    159.52
 F532      C6        6769       DB      198T    ;    50    158.19
 F533      C5        6770       DB      197T    ;    51    156.89
 F534      C4        6771       DB      196T    ;    52    155.61
 F535      C2        6772       DB      194T    ;    53    154.35
 F536      C1        6773       DB      193T    ;    54    153.12
 F537      C0        6774       DB      192T    ;    55    151.91
 F538      BF        6775       DB      191T    ;    56    150.71
 F539      BE        6776       DB      190T    ;    57    149.54
 F53A      BC        6777       DB      188T    ;    58    148.38
 F53B      BB        6778       DB      187T    ;    59    147.24
 F53C      BA        6779       DB      186T    ;    60    146.12
 F53D      B9        6780       DB      185T    ;    61    145.02
 F53E      B8        6781       DB      184T    ;    62    143.93
 F53F      B7        6782       DB      183T    ;    63    142.85
 F540      B6        6783       DB      182T    ;    64    141.79
 F541      B5        6784       DB      181T    ;    65    140.75
 F542      B4        6785       DB      180T    ;    66    139.72
 F543      B3        6786       DB      179T    ;    67    138.70
 F544      B2        6787       DB      178T    ;    68    137.69
 F545      B1        6788       DB      177T    ;    69    136.70
 F546      B0        6789       DB      176T    ;    70    135.71
 F547      AF        6790       DB      175T    ;    71    134.74
 F548      AE        6791       DB      174T    ;    72    133.78
 F549      AD        6792       DB      173T    ;    73    132.83
 F54A      AC        6793       DB      172T    ;    74    131.89
 F54B      AB        6794       DB      171T    ;    75    130.97
 F54C      AA        6795       DB      170T    ;    76    130.05
 F54D      A9        6796       DB      169T    ;    77    129.14
 F54E      A8        6797       DB      168T    ;    78    128.23
 F54F      A7        6798       DB      167T    ;    79    127.34
 F550      A6        6799       DB      166T    ;    80    126.46
 F551      A6        6800       DB      166T    ;    81    125.58
 F552      A5        6801       DB      165T    ;    82    124.71
 F553      A4        6802       DB      164T    ;    83    123.85
 F554      A3        6803       DB      163T    ;    84    123.00
 F555      A2        6804       DB      162T    ;    85    122.16
 F556      A1        6805       DB      161T    ;    86    121.32
 F557      A0        6806       DB      160T    ;    87    120.49


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 54
MV_ECU


 F558      A0        6807       DB      160T    ;    88    119.66
 F559      9F        6808       DB      159T    ;    89    118.84
 F55A      9E        6809       DB      158T    ;    90    118.03
 F55B      9D        6810       DB      157T    ;    91    117.22
 F55C      9C        6811       DB      156T    ;    92    116.42
 F55D      9C        6812       DB      156T    ;    93    115.63
 F55E      9B        6813       DB      155T    ;    94    114.84
 F55F      9A        6814       DB      154T    ;    95    114.05
 F560      99        6815       DB      153T    ;    96    113.27
 F561      98        6816       DB      152T    ;    97    112.50
 F562      98        6817       DB      152T    ;    98    111.73
 F563      97        6818       DB      151T    ;    99    110.97
 F564      96        6819       DB      150T    ;   100    110.21
 F565      95        6820       DB      149T    ;   101    109.45
 F566      95        6821       DB      149T    ;   102    108.70
 F567      94        6822       DB      148T    ;   103    107.95
 F568      93        6823       DB      147T    ;   104    107.21
 F569      92        6824       DB      146T    ;   105    106.47
 F56A      92        6825       DB      146T    ;   106    105.73
 F56B      91        6826       DB      145T    ;   107    105.00
 F56C      90        6827       DB      144T    ;   108    104.27
 F56D      90        6828       DB      144T    ;   109    103.54
 F56E      8F        6829       DB      143T    ;   110    102.82
 F56F      8E        6830       DB      142T    ;   111    102.10
 F570      8D        6831       DB      141T    ;   112    101.39
 F571      8D        6832       DB      141T    ;   113    100.67
 F572      8C        6833       DB      140T    ;   114     99.96
 F573      8B        6834       DB      139T    ;   115     99.26
 F574      8B        6835       DB      139T    ;   116     98.55
 F575      8A        6836       DB      138T    ;   117     97.85
 F576      89        6837       DB      137T    ;   118     97.15
 F577      88        6838       DB      136T    ;   119     96.45
 F578      88        6839       DB      136T    ;   120     95.75
 F579      87        6840       DB      135T    ;   121     95.06
 F57A      86        6841       DB      134T    ;   122     94.37
 F57B      86        6842       DB      134T    ;   123     93.68
 F57C      85        6843       DB      133T    ;   124     92.99
 F57D      84        6844       DB      132T    ;   125     92.31
 F57E      84        6845       DB      132T    ;   126     91.62
 F57F      83        6846       DB      131T    ;   127     90.94
 F580      82        6847       DB      130T    ;   128     90.26
 F581      82        6848       DB      130T    ;   129     89.58
 F582      81        6849       DB      129T    ;   130     88.90
 F583      80        6850       DB      128T    ;   131     88.22
 F584      80        6851       DB      128T    ;   132     87.54
 F585      7F        6852       DB      127T    ;   133     86.87
 F586      7E        6853       DB      126T    ;   134     86.19
 F587      7E        6854       DB      126T    ;   135     85.52
 F588      7D        6855       DB      125T    ;   136     84.85
 F589      7C        6856       DB      124T    ;   137     84.17
 F58A      7C        6857       DB      124T    ;   138     83.50
 F58B      7B        6858       DB      123T    ;   139     82.83
 F58C      7A        6859       DB      122T    ;   140     82.16
 F58D      79        6860       DB      121T    ;   141     81.49
 F58E      79        6861       DB      121T    ;   142     80.82
 F58F      78        6862       DB      120T    ;   143     80.15
 F590      77        6863       DB      119T    ;   144     79.48
 F591      77        6864       DB      119T    ;   145     78.81
 F592      76        6865       DB      118T    ;   146     78.14
 F593      75        6866       DB      117T    ;   147     77.47
 F594      75        6867       DB      117T    ;   148     76.80
 F595      74        6868       DB      116T    ;   149     76.13
 F596      73        6869       DB      115T    ;   150     75.46
 F597      73        6870       DB      115T    ;   151     74.79
 F598      72        6871       DB      114T    ;   152     74.12
 F599      71        6872       DB      113T    ;   153     73.44
 F59A      71        6873       DB      113T    ;   154     72.77
 F59B      70        6874       DB      112T    ;   155     72.10
 F59C      6F        6875       DB      111T    ;   156     71.42
 F59D      6F        6876       DB      111T    ;   157     70.74
 F59E      6E        6877       DB      110T    ;   158     70.07
 F59F      6D        6878       DB      109T    ;   159     69.39
 F5A0      6D        6879       DB      109T    ;   160     68.71
 F5A1      6C        6880       DB      108T    ;   161     68.03
 F5A2      6B        6881       DB      107T    ;   162     67.34
 F5A3      6B        6882       DB      107T    ;   163     66.66
 F5A4      6A        6883       DB      106T    ;   164     65.97
 F5A5      69        6884       DB      105T    ;   165     65.28
 F5A6      69        6885       DB      105T    ;   166     64.59
 F5A7      68        6886       DB      104T    ;   167     63.90
 F5A8      67        6887       DB      103T    ;   168     63.21
 F5A9      67        6888       DB      103T    ;   169     62.51
 F5AA      66        6889       DB      102T    ;   170     61.81
 F5AB      65        6890       DB      101T    ;   171     61.11
 F5AC      64        6891       DB      100T    ;   172     60.41
 F5AD      64        6892       DB      100T    ;   173     59.70
 F5AE      63        6893       DB       99T    ;   174     58.99
 F5AF      62        6894       DB       98T    ;   175     58.28
 F5B0      62        6895       DB       98T    ;   176     57.56
 F5B1      61        6896       DB       97T    ;   177     56.84
 F5B2      60        6897       DB       96T    ;   178     56.12
 F5B3      5F        6898       DB       95T    ;   179     55.39
 F5B4      5F        6899       DB       95T    ;   180     54.66
 F5B5      5E        6900       DB       94T    ;   181     53.93
 F5B6      5D        6901       DB       93T    ;   182     53.19
 F5B7      5C        6902       DB       92T    ;   183     52.45
 F5B8      5C        6903       DB       92T    ;   184     51.70
 F5B9      5B        6904       DB       91T    ;   185     50.95
 F5BA      5A        6905       DB       90T    ;   186     50.19
 F5BB      59        6906       DB       89T    ;   187     49.43
 F5BC      59        6907       DB       89T    ;   188     48.67
 F5BD      58        6908       DB       88T    ;   189     47.89
 F5BE      57        6909       DB       87T    ;   190     47.12
 F5BF      56        6910       DB       86T    ;   191     46.33
 F5C0      56        6911       DB       86T    ;   192     45.54
 F5C1      55        6912       DB       85T    ;   193     44.75
 F5C2      54        6913       DB       84T    ;   194     43.95
 F5C3      53        6914       DB       83T    ;   195     43.14
 F5C4      52        6915       DB       82T    ;   196     42.32
 F5C5      51        6916       DB       81T    ;   197     41.50
 F5C6      51        6917       DB       81T    ;   198     40.67
 F5C7      50        6918       DB       80T    ;   199     39.83
 F5C8      4F        6919       DB       79T    ;   200     38.98
 F5C9      4E        6920       DB       78T    ;   201     38.13
 F5CA      4D        6921       DB       77T    ;   202     37.26
 F5CB      4C        6922       DB       76T    ;   203     36.39
 F5CC      4C        6923       DB       76T    ;   204     35.50
 F5CD      4B        6924       DB       75T    ;   205     34.61
 F5CE      4A        6925       DB       74T    ;   206     33.70
 F5CF      49        6926       DB       73T    ;   207     32.79
 F5D0      48        6927       DB       72T    ;   208     31.86
 F5D1      47        6928       DB       71T    ;   209     30.92
 F5D2      46        6929       DB       70T    ;   210     29.97
 F5D3      45        6930       DB       69T    ;   211     29.00
 F5D4      44        6931       DB       68T    ;   212     28.02
 F5D5      43        6932       DB       67T    ;   213     27.02
 F5D6      42        6933       DB       66T    ;   214     26.01
 F5D7      41        6934       DB       65T    ;   215     24.99
 F5D8      40        6935       DB       64T    ;   216     23.94
 F5D9      3F        6936       DB       63T    ;   217     22.88
 F5DA      3E        6937       DB       62T    ;   218     21.80
 F5DB      3D        6938       DB       61T    ;   219     20.70
 F5DC      3C        6939       DB       60T    ;   220     19.58
 F5DD      3A        6940       DB       58T    ;   221     18.44
 F5DE      39        6941       DB       57T    ;   222     17.27
 F5DF      38        6942       DB       56T    ;   223     16.08


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 55
MV_ECU


 F5E0      37        6943       DB       55T    ;   224     14.86
 F5E1      36        6944       DB       54T    ;   225     13.62
 F5E2      34        6945       DB       52T    ;   226     12.34
 F5E3      33        6946       DB       51T    ;   227     11.03
 F5E4      32        6947       DB       50T    ;   228      9.69
 F5E5      30        6948       DB       48T    ;   229      8.31
 F5E6      2F        6949       DB       47T    ;   230      6.90
 F5E7      2D        6950       DB       45T    ;   231      5.44
 F5E8      2C        6951       DB       44T    ;   232      3.93
 F5E9      2A        6952       DB       42T    ;   233      2.38
 F5EA      29        6953       DB       41T    ;   234       .77
 F5EB      27        6954       DB       39T    ;   235      -.90
 F5EC      25        6955       DB       37T    ;   236     -2.63
 F5ED      24        6956       DB       36T    ;   237     -4.43
 F5EE      22        6957       DB       34T    ;   238     -6.31
 F5EF      20        6958       DB       32T    ;   239     -8.28
 F5F0      1E        6959       DB       30T    ;   240    -10.34
 F5F1      1B        6960       DB       27T    ;   241    -12.51
 F5F2      19        6961       DB       25T    ;   242    -14.81
 F5F3      17        6962       DB       23T    ;   243    -17.24
 F5F4      14        6963       DB       20T    ;   244    -19.84
 F5F5      11        6964       DB       17T    ;   245    -22.62
 F5F6      0E        6965       DB       14T    ;   246    -25.63
 F5F7      0B        6966       DB       11T    ;   247    -28.91
 F5F8      07        6967       DB        7T    ;   248    -32.51
 F5F9      03        6968       DB        3T    ;   249    -36.53
 F5FA      00        6969       DB        0T    ;   250    -41.08
 F5FB      00        6970       DB        0T    ;   251    -46.35
 F5FC      00        6971       DB        0T    ;   252    -52.64
 F5FD      00        6972       DB        0T    ;   253    -60.51
 F5FE      00        6973       DB        0T    ;   254    -71.20
 F5FF      D2        6974       DB      210T    ;   255    Sensor Failure - use 170 degF as default
                     6975                                        ; to degrees F+40
                     6976  
                     6977  ;***************************************************************************
                     6978  ; --------------------------- VFD Lookup Tables ---------------------------
                     6979  ;***************************************************************************
                     6980  
                     6981  
 E000                6982       org     $E000       ; Origin at Memory Location $E000 = 57334
                     6983                           ;(uses 357) to memory location $E15B = 57691
                     6984                           ; Flash ends at $FDFF = 65023
                     6985  
                     6986  ;***************************************************************************
                     6987  ; - These tables are the character strings for the top lines of the VFD
                     6988  ;   while in "Display" mode.
                     6989  ;***************************************************************************
                     6990  
                     6991  VARS0_TL_TB:
 E000      4552504D  6992       db     'ERPM MAP AFR CLT MAT'
           204D4150 
           20414652 
           20434C54 
           204D4154 
                     6993              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     6994              ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     6995              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     6996              ; "CLT"  is Engine Coolant Temp in degrees F+40, uses "clt"
                     6997              ; "MAT"  is Manifold Air Temperature in degrees F+40, uses "mat"
                     6998  
                     6999  VARS1_TL_TB:
 E014      20455250  7000       db     ' ERPM KPH LTHR KMLT '
           4D204B50 
           48204C54 
           4852204B 
           4D4C5420 
                     7001              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7002              ; "KPH"  is Vehicle Speed in KPH (Lo Res Fast Update), uses "kph"
                     7003              ; "LTHR" is Current fuel burn in L/Hr x 100, uses "ltrHrH:ltrHrL"
                     7004              ; "KMLT" is Current fuel burn in KM/L x 100, over a 1 second period,
                     7005              ; uses "kmLtrH:kmLtrL"
                     7006  
                     7007  VARS2_TL_TB:
 E028      4552504D  7008       db     'ERPM MAP AFR FTC PLW'
           204D4150 
           20414652 
           20465443 
           20504C57 
                     7009              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7010              ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     7011              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     7012              ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                     7013              ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                     7014  
                     7015  VARS3_TL_TB:
 E03C      4552504D  7016       db     'ERPM MAP TRA CTA MTA'
           204D4150 
           20545241 
           20435441 
           204D5441 
                     7017              ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7018              ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     7019              ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                     7020              ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                     7021              ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                     7022  
                     7023  VARS4_TL_TB:
 E050      2047414D  7024       db     ' GAM WCR ACR BCR TCR'
           20574352 
           20414352 
           20424352 
           20544352 
                     7025              ; "GAM" is Gamma Correction in percent, uses "gammae"
                     7026              ; "WCR" is Engine Coolant Correction in percent, uses "warmcor"
                     7027              ; "ACR" is Manifold Air Temperature Correction in percent, uses "aircor"
                     7028              ; "BCR" is Barometric Pressure Correction in percent, uses "barocor"
                     7029              ; "TCR" is Acceleration Correction in percent, uses "tpsaccel"
                     7030  
                     7031  VARS5_TL_TB:
 E064      2065676F  7032       db     ' ego EGV LMD AFR FTC'
           20454756 
           204C4D44 
           20414652 
           20465443 
                     7033              ; "ego" is Exhaust Gas Oxygen ADC, uses "egoADC"
                     7034              ; "EGV" is Exhaust Gas Oxygen voltage x 10, uses "egoV"
                     7035              ; "LMD" is Exhaust Gas Oxygen Lambda x 10, uses "lambda"
                     7036              ; "AFR"  is Air Fuel Ratio x 10, uses "afr"
                     7037              ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                     7038  
                     7039  VARS6_TL_TB:
 E078      206D6170  7040       db     ' map MAP bar BAR BCR'
           204D4150 
           20626172 
           20424152 
           20424352 
                     7041              ; "map" is Manifold Pressure ADC, uses "mapADC"
                     7042              ; "MAP" is Manifold Absolute Pressure in KPA, uses "map"
                     7043              ; "bar" is Barometric Pressure ADC, uses "baroADC"
                     7044              ; "BAR" is Barometric Pressure in KPA, uses "barometer"
                     7045              ; "BCR" is Barometric Pressure Correction in percent, uses "barocor"
                     7046  
                     7047  VARS7_TL_TB:
 E08C      20766C74  7048       db     ' vlt VLT clt CLT WCR'
           20564C54 
           20636C74 


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 56
MV_ECU


           20434C54 
           20574352 
                     7049              ; "vlt" is Battery Voltage ADC, uses "battADC"
                     7050              ; "VLT" is Battery Voltage x 10, uses "volts"
                     7051              ; "clt" is Engine Coolant Temperature ADC, uses "cltADC"
                     7052              ; "CLT" is Engine Coolant Temperature in degrees F+40, uses "clt"
                     7053              ; "WCR" is Engine Coolant Correction in percent, uses "warmcor"
                     7054  
                     7055  VARS8_TL_TB:
 E0A0      20766C74  7056       db     ' vlt VLT mat MAT ACR'
           20564C54 
           206D6174 
           204D4154 
           20414352 
                     7057              ; "vlt" is Battery Voltage ADC, uses "battADC"
                     7058              ; "VLT" is Battery Voltage x 10, uses "volts"
                     7059              ; "mat" is Manifold Air Temperature ADC, uses "matADC"
                     7060              ; "MAT" is Manifold Air Temperature in degrees F+40, uses "mat"
                     7061              ; "ACR" is Manifold Air Temperature Correction in percent, uses "aircor"
                     7062  
                     7063  VARS9_TL_TB:
 E0B4      20747073  7064       db     ' tps TPP trm FTC TAF'
           20545050 
           2074726D 
           20465443 
           20544146 
                     7065              ; "tps" is Throttle Position ADC, uses "tps"
                     7066              ; "TPP" is Throttle Positioin in percent, uses "tpsp"
                     7067              ; "trm" is Fuel/Ign Trim ADC, uses "trimADC"
                     7068              ; "FTC"  is Fuel Trim Correction in percent, uses "Ftrimcor"
                     7069              ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                     7070  
                     7071  VARS10_TL_TB:
 E0C8      50574852  7072       db      'PWHR PLW FLD VEC DTY'
           20504C57 
           20464C44 
           20564543 
           20445459 
                     7073               ; "PWHR" is Pulse Width Hi Res in mmmS, uses "pwcalcH:pwcalcL"
                     7074               ; "PLW"  is Pulse Width Lo Res in mmS, uses "pw"
                     7075               ; "FLD"  is Fuel Deleivery Pulse Width Lo Res in mmS, uses "fd"
                     7076               ; "VEC   is Volumetric Efficiency(Current VE table value in percent),
                     7077               ; uses "vecurr"
                     7078               ; "DTY"  is Injector Duty Cycle in percent, uses "duty"
                     7079  
                     7080  VARS11_TL_TB:
 E0DC      20455250  7081       db      ' ERPM PIPD MNPD VSPD'
           4D205049 
           5044204D 
           4E504420 
           56535044 
                     7082               ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7083               ;*; "PIPD" is PIP Period Predicted in mmmS, uses "pippprdH:pippprdL"
                     7084               ; "PIPD" is PIP Period in mmmS, uses "tachH:tachL"
                     7085               ; "MNPD" is Ignition Monitor Period in mmmS, uses "monpH:monpL"
                     7086               ; "VSPD" is Vehicle Speed Period in mmS, uses "vspH:vspL"
                     7087  
                     7088  VARS12_TL_TB:
 E0F0      4552504D  7089       db      'ERPM MAP SAF DAF TAF'
           204D4150 
           20534146 
           20444146 
           20544146 
                     7090               ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7091               ; "MAP"  is Manifold Absolute Pressure in KPA, uses "map"
                     7092               ; "SAF"  is Spark Angle Factor(Current ST table value), uses "spkAngFac"
                     7093               ; "DAF"  is Delay Angle Factor, uses "dlyAngFac"
                     7094               ; "TAF"  is Ignition Trim Angle Factor, uses "trmAngFac"
                     7095  
                     7096  VARS13_TL_TB:
 E104      4552504D  7097       db      'ERPM TRA DLA CTA MTA'
           20545241 
           20444C41 
           20435441 
           204D5441 
                     7098               ; "ERPM" is Engine RPM, uses calculated "rpmH:rpmL"
                     7099               ; "TRA"  is Ignition Trim Angle in degrees BTDC, uses "trmAng"
                     7100               ; "DLA"  is Ignition Delay Angle in degrees BTDC, uses "dlyAng"
                     7101               ; "CTA"  is Calculated Timing Angle in degrees BTDC, uses "timAng"
                     7102               ; "MTA"  is Monitored Ignition Timing Angle in degrees BTDC, uses "monTimAng"
                     7103  
                     7104  
                     7105  VARS14_TL_TB:
 E118      4B504820  7106       db      'KPH kph ODS FDSC SEC'
           6B706820 
           4F445320 
           46445343 
           20534543 
                     7107               ; "KPH"  is Vehicle Speed in KPH (Lo Res Fast Update), uses "kph"
                     7108               ; "kph"  is Vehicle Speed in KPH (Hi Res Slow Update), uses "kph1"
                     7109               ; "ODS"  is Odometer Counts over a 1 second period, uses "odoSec"
                     7110               ; "FDSC" is Fuel Delivery Injector On Time over a 1 second period in mmS,
                     7111               ; uses "fdSecH:fdSecL"
                     7112               ; "SEC"  is Seconds Counter Lo byte, uses "secL"
                     7113  
                     7114  
                     7115  VARS15_TL_TB:
 E12C      20524C20  7116       db      ' RL FC  FP FT  AL WL'
           46432020 
           46502046 
           54202041 
           4C20574C 
                     7117               ; "RL" is Rev Limiter(alarmbits 5)
                     7118               ; "FC" is Flood Clear(alarmbits 6)
                     7119               ; "FP" is Fuel Pump(portAbits 0)
                     7120               ; "FT" is Fuel Trim Enable(portAbits 5)
                     7121               ; "AL" is Accel LED(portCbits 1)
                     7122               ; "WL" is Warmup LED(portCbits 2)
                     7123  
                     7124  
                     7125  VARS16_TL_TB:
 E140      20524E20  7126       db      ' RN CR SW  RW AC DC '
           43522053 
           57202052 
           57204143 
           20444320 
                     7127               ; "RN" is Engine Running(engine 0)
                     7128               ; "CR" is Engine Cranking(engine 1)
                     7129               ; "SW" is Start Warmup(engine 2)
                     7130               ; "RW" is Run Warmup(engine 3)
                     7131               ; "AC" is Accellerating(engine 4)
                     7132               ; "DC" is Decelerating(engine 5)
                     7133  
                     7134  
                     7135  ;***************************************************************************
                     7136  ; - This table is the 16 bit vector address index, for the tables of the
                     7137  ;   character strings, for the top lines of the VFD while in "Display" mode.
                     7138  ;***************************************************************************
                     7139  
                     7140  VARS_TL_TB_IND:
 E154      E000      7141       dw     VARS0_TL_TB         ; ScrnCnt=0  'ERPM MAP AFR CLT MAT'
 E156      E014      7142       dw     VARS1_TL_TB         ; ScrnCnt=1  ' ERPM KPH LTHR KMLT '
 E158      E028      7143       dw     VARS2_TL_TB         ; ScrnCnt=2  'ERPM MAP AFR FTC PLW'
 E15A      E03C      7144       dw     VARS3_TL_TB         ; ScrnCnt=3  'ERPM MAP TRA CTA MTA'
 E15C      E050      7145       dw     VARS4_TL_TB         ; ScrnCnt=4  ' GAM WCR ACR BCR TCR'
 E15E      E064      7146       dw     VARS5_TL_TB         ; ScrnCnt=5  ' ego EGV LMD AFR FTC'


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 57
MV_ECU


 E160      E078      7147       dw     VARS6_TL_TB         ; ScrnCnt=6  ' map MAP bar BAR BCR'
 E162      E08C      7148       dw     VARS7_TL_TB         ; ScrnCnt=7  ' vlt VLT clt CLT WCR'
 E164      E0A0      7149       dw     VARS8_TL_TB         ; ScrnCnt=8  ' vlt VLT mat MAT ACR'
 E166      E0B4      7150       dw     VARS9_TL_TB         ; ScrnCnt=9  ' tps TPP trm FTC TAF'
 E168      E0C8      7151       dw     VARS10_TL_TB        ; ScrnCnt=10 'PWHR PLW FLD VEC DTY'
 E16A      E0DC      7152       dw     VARS11_TL_TB        ; ScrnCnt=11 ' ERPM PIPD MNPD VSPD'
 E16C      E0F0      7153       dw     VARS12_TL_TB        ; ScrnCnt=12 'ERPM MAP SAF DAF TAF'
 E16E      E104      7154       dw     VARS13_TL_TB        ; ScrnCnt=13 'ERPM TRA DLA CTA MTA'
 E170      E118      7155       dw     VARS14_TL_TB        ; ScrnCnt=14 'KPH kph ODS FDSC SEC'
 E172      E12C      7156       dw     VARS15_TL_TB        ; ScrnCnt=15 ' RL FC  FP FT  AL WL'
 E174      E140      7157       dw     VARS16_TL_TB        ; ScrnCnt=16 ' RN CR SW  RW AC DC '
                     7158  
                     7159  ;****************************************************************************
                     7160  ; - Interrupt Vector table
                     7161  ;****************************************************************************
                     7162  
 FFDC                7163       org     vec_timebase  ; Origin at $FFDC = 65500
                     7164  
                     7165  
 FFDC      8C0C      7166       dw      Dummy          ;Time Base Vector
 FFDE      8C0C      7167       dw      Dummy          ;ADC Conversion Complete
 FFE0      8C0C      7168       dw      Dummy          ;Keyboard Vector
 FFE2      8C0B      7169       dw      SCITX_ISR      ;SCI Transmit Vector
 FFE4      8BEF      7170       dw      SCIRCV_ISR     ;SCI Receive Vector
 FFE6      8C0C      7171       dw      Dummy          ;SCI Error Vecotr
 FFE8      8C0C      7172       dw    Dummy          ;SPI Transmit Vector
 FFEA      8C0C      7173       dw      Dummy          ;SPI Receive Vector
 FFEC      8C0C      7174       dw    Dummy          ;TIM2 Overflow Vector
 FFEE      8C0C      7175       dw      Dummy          ;TIM2 Ch1 Vector
 FFF0      8B73      7176       dw      TIM2CH0_ISR    ;TIM2 Ch0 Vector
 FFF2      8C0C      7177       dw      Dummy          ;TIM1 Overflow Vector
 FFF4      8C0C      7178       dw      Dummy          ;TIM1 Ch1 Vector
 FFF6      8C0C      7179       dw      Dummy          ;TIM1 Ch0 Vector
 FFF8      8C0C      7180       dw    Dummy          ;PLL Vector
 FFFA      8C0C      7181       dw      Dummy          ;IRQ Vector
 FFFC      8C0C      7182       dw    Dummy          ;SWI Vector
 FFFE      8000      7183       dw      Start          ;Reset Vector
                     7184  
 0000                7185       end
                     7186  
                     7187   

 Symbol Table 

ACCLLED          0001
ACK              0002
ACKK             0002
ACQ              0005
AC_1             00AF
AC_10            00AE
AC_100           00AD
ADCH0            0000
ADCH1            0001
ADCH2            0002
ADCH3            0003
ADCH4            0004
ADCLK            003E
ADCO             0005
ADD_A_TO_HX      9020
ADICLK           0004
ADIV0            0005
ADIV1            0006
ADIV2            0007
ADR              003D
ADSCR            003C
AFR              00E3
AIEN             0006
AIRCOR           00C0
ALARMBITS        00D8
ARCFLAGS         004D
ARFLAGS          004E
ASCII_CONV_1     F200
ASCII_CONV_10    F100
ASCII_CONV_100   F000
AUTO             0007
BAROADC          00BC
BAROCOR          00BE
BAROMETER        00BD
BATTADC          00B9
BCFE             0007
BCS              0004
BKF              0001
BLANK1           00FC
BLANK2           00FD
BLANK3           00FE
BLANK4           00FF
BNKFLOH          00FA
BNKFLOL          00FB
BNKFLOWHMV       00DB
BNKFLOWLMV       00DC
BOTLIN0          0085
BOTLIN0L         0099
BOTLIN1          0086
BOTLIN10         008F
BOTLIN10L        00A3
BOTLIN11         0090
BOTLIN11L        00A4
BOTLIN12         0091
BOTLIN12L        00A5
BOTLIN13         0092
BOTLIN13L        00A6
BOTLIN14         0093
BOTLIN14L        00A7
BOTLIN15         0094
BOTLIN15L        00A8
BOTLIN16         0095
BOTLIN16L        00A9
BOTLIN17         0096
BOTLIN17L        00AA
BOTLIN18         0097
BOTLIN18L        00AB
BOTLIN19         0098
BOTLIN19L        00AC
BOTLIN1L         009A
BOTLIN2          0087
BOTLIN2L         009B
BOTLIN3          0088
BOTLIN3L         009C
BOTLIN4          0089
BOTLIN4L         009D
BOTLIN5          008A
BOTLIN5L         009E
BOTLIN6          008B
BOTLIN6L         009F
BOTLIN7          008C
BOTLIN7L         00A0
BOTLIN8          008D
BOTLIN8L         00A1
BOTLIN9          008E
BOTLIN9L         00A2
BOTLIN_CHK_D     8B61
BOTLIN_CHNG      91E8
BRKA             0006
BRKE             0007
BRKH             FE09
BRKL             FE0A


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 58
MV_ECU


BRKSCR           FE0B
BYTECNT          005C
BYTEGOAL         005D
CALC_AFR         8C66
CALC_CLT         8C21
CALC_DLY_ANG     8CF4
CALC_DUTY        8C77
CALC_EGOV        8C4B
CALC_KM_L        8DF8
CALC_KPH1        8D82
CALC_LAMBDA      8C5C
CALC_L_HR        8D4B
CALC_MAP         8C0D
CALC_MAT         8C17
CALC_MON_TIM_ANG 8D10
CALC_MTA_DONE    8D4A
CALC_RPM         8CAB
CALC_RPM_HR      8CB7
CALC_TIM_ANG     8D07
CALC_TRIM_ANG    8CE3
CALC_VOLTS       8C2B
CALC_VS          8DBB
CHARS_DONE       900C
CHECK_GREATER_TH 9219
CHECK_LESS_THAN  9211
CHK_DB0          90BC
CHK_DB1          90C8
CHK_DB2          90D4
CHK_DB3          90E0
CHK_DB4          9080
CHK_DB5          908C
CHK_DB6          9098
CHK_DB7          90A4
CHK_FRZ_DISP     8B5E
CHXF             0007
CHXIE            0006
CHXMAX           0000
CLT              00DF
CLTADC           00B7
CMP_BOTLIN       910A
CMP_BOTLIN_DONE  91EE
COCO             0007
COLNUM           0080
COMVAL           0082
CONCNT           0057
CONCNT_LST       0059
CONCNT_PRV       0058
CONFIG1          001F
CONFIG2          001E
CONVAL           005B
CONV_16BIT_ASCII 8EBC
CONV_8BIT_ASCII  8EA8
COP              0005
COPCTL           FFFF
CPHA             0003
CPOL             0004
CRANK            0001
CURCON           005A
DATVAL           0081
DB0              0000
DB0M             0001
DB1              0001
DB1M             0002
DB2              0002
DB2M             0004
DB3              0003
DB3M             0008
DB4              0000
DB4M             0010
DB5              0001
DB5M             0020
DB6              0002
DB6M             0040
DB7              0003
DB7M             0080
DDRA             0004
DDRB             0005
DDRC             0006
DDRD             0007
DDRE             000C
DECRMT           92C0
DEC_SCRNCNT      8264
DELAY300         8F9A
DISP_BOT         8280
DISVAL           0084
DIVIDEND         0063
DIVISOR          0065
DIVROUND         92EA
DIVROUND0        92FA
DIVROUND1        92FC
DIVROUND2        92F7
DIV_BY_TEN       8E9A
DIYWBLAMBDA      F300
DLYANG           00E6
DLYANGFAC        00D0
DMARE            0005
DMATE            0004
DONE_WITH_INTERP 925D
DO_INTERP        9224
DSPLY_MODE       8274
DUMMY            8C0C
DUTY             00E4
EGOADC           00BA
EGOV             00E1
ELSXA            0002
ELSXB            0003
ENABLE           0004
ENGINE           00D7
ENSCI            0006
ERASE            0002
ERRIE            0006
FAST_VS_CALC     8DE8
FD               00C9
FDSECH           00CA
FDSECL           00CB
FE               0001
FEIE             0001
FLAGS            0053
FLBPR            FF7E
FLCR             FE08
FLDCLR           0006
FPON             0000
FRZ              0001
FRZCNTR          0051
FTEN             0005
FTRIMCOR         00C1
GAMMAE           00C2
GET_VECT_ADDR    900D
GOT_ORD_NUM      920B
HI_NIB           90B0
HUNDREDS         00B1
HVEN             0008
IDLE             0004
ILAD             0003
ILIE             0004
ILOP             0004


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 59
MV_ECU


ILTY             0002
IMASK            0001
IMASKK           0001
INC_MS           8B9D
INC_MSX5         8BD5
INC_SCRNCNT      8250
INT1             FE04
INT2             FE05
INT3             FE06
INTACC1          0061
INTACC2          0065
INTKBIER         001B
INTKBSCR         001A
INTSCR           001D
IRQF             0003
KBIE0            0000
KBIE1            0001
KBIE2            0002
KBIE3            0003
KBIE4            0004
KBIE5            0005
KBIE6            0006
KBIE7            0007
KEYF             0003
KMLTRH           00ED
KMLTRL           00EE
KPAFACTOR4250RJH F400
KPH              00EB
KPH1             00EC
LAMBDA           00E2
LDA_W_HX_PL_A    9031
LINCHNG          0005
LINENUM          007F
LININTERP        920C
LOAD_PIP_PRD     8D1A
LOAD_SPACE       8FCB
LOCAL_TMP        007D
LOCK             0006
LONG_DELAY       90FC
LOOPS            0007
LOOPY            8241
LO_NIB           90EC
LPFLAGS          004C
LTRHRH           00E9
LTRHRL           00EA
LVI              0001
LVIOUT           0007
LVISR            FE0C
M                0004
MAP              00DD
MAPADC           00B5
MASS             0004
MAT              00DE
MATADC           00B6
MCCH             00F1
MCCL             00F2
MDE              0000
MMH              00EF
MML              00F0
MODE             0000
MODECNTR         0050
MODEK            0000
MODF             0004
MODFEN           0002
MODRST           0002
MONDLYANG        00F4
MONDLYANGFAC     00F3
MONFRNGANG       00F5
MONPH            00D4
MONPL            00D5
MONTIMANG        00E8
MS               005F
MSX5             0060
MSXA             0004
MSXB             0005
NEG_SLOPE        9250
NEIE             0002
NEXT_CHAR        8FFA
NEXT_RCV_BYTE    8BFD
NF               0002
NO_CHNG_BL0      9115
NO_CHNG_BL1      9120
NO_CHNG_BL10     9183
NO_CHNG_BL11     918E
NO_CHNG_BL12     9199
NO_CHNG_BL13     91A4
NO_CHNG_BL14     91AF
NO_CHNG_BL15     91BA
NO_CHNG_BL16     91C5
NO_CHNG_BL17     91D0
NO_CHNG_BL18     91DB
NO_CHNG_BL19     91E6
NO_CHNG_BL2      912B
NO_CHNG_BL3      9136
NO_CHNG_BL4      9141
NO_CHNG_BL5      914C
NO_CHNG_BL6      9157
NO_CHNG_BL7      9162
NO_CHNG_BL8      916D
NO_CHNG_BL9      9178
NO_CHNG_BOTLIN   91EC
NO_CHNG_DB       8B70
NO_CHNG_TOP      8280
ODOSEC           00D1
ONES             00B3
OR               0003
ORD_TABLE_FIND   91EF
ORIE             0003
OVRF             0005
PBWC             0037
PCTL             0036
PE               0000
PEIE             0000
PEN              0001
PGM              0001
PIN              0006
PLLF             0006
PLLIE            0007
PLLON            0005
PLL_WAIT         801E
PMDS             003B
PMRS             003A
PMSH             0038
PMSL             0039
POR              0007
PORTA            0000
PORTABITS        00D9
PORTB            0001
PORTC            0002
PORTCBITS        00DA
PORTD            0003
PORTE            0008
POSINTERP        9237
PRE0             0002
PRE1             0003
PRINT_BOT_D      8B6A


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 60
MV_ECU


PRINT_LINE       8FF6
PRNT_TOPLN_DSP   8FBC
PS0              0000
PS1              0001
PS2              0002
PTAPUE           000D
PTCPUE           000E
PTDPUE           000F
PTY              0000
PW               00C8
PWCALCH          00C6
PWCALCL          00C7
QUOTIENT         0061
R8               0007
RAM_LAST         023F
RAM_START        0040
RCVNG_VAR        8BF6
RCVST            0004
RCVVE            0003
RD_WRT           0005
RE               0002
READBUF          005E
REENT            91F8
REG_SEL          0006
REMAINDER        0061
REVL             0005
ROM_LAST         FDFF
ROM_START        8000
RPF              0000
RPM20            00C4
RPMH             00F6
RPMHRH           00F8
RPMHRL           00F9
RPML             00F7
RPM_CALC_DONE    8CE2
RPM_COMP         8CC3
RTN_TO_0_D       825A
RTN_TO_16        826C
RUNNING          0000
RWU              0001
SBFCR            FE03
SBK              0000
SBSR             FE00
SBSW             0001
SCBR             0019
SCC1             0013
SCC2             0014
SCC3             0015
SCDR             0018
SCIRCV_ISR       8BEF
SCIRCV_ISR_DONE  8C09
SCITX_ISR        8C0B
SCRF             0005
SCRIE            0005
SCRL_D_LFT       8264
SCRL_D_LFT_DONE  826F
SCRL_D_RT        8250
SCRL_D_RT_DONE   825C
SCRNCNT          0054
SCRNCNT_LST      0056
SCRNCNT_PRV      0055
SCRN_0           82EE
SCRN_0_JMP       82BB
SCRN_1           837A
SCRN_10          87EF
SCRN_10_JMP      82D9
SCRN_11          886F
SCRN_11_JMP      82DC
SCRN_12          88F7
SCRN_12_JMP      82DF
SCRN_13          8977
SCRN_13_JMP      82E2
SCRN_14          8A00
SCRN_14_JMP      82E5
SCRN_15          8A83
SCRN_15_JMP      82E8
SCRN_16          8AF2
SCRN_16_JMP      82EB
SCRN_1_JMP       82BE
SCRN_2           8401
SCRN_2_JMP       82C1
SCRN_3           8487
SCRN_3_JMP       82C4
SCRN_4           8513
SCRN_4_JMP       82C7
SCRN_5           8589
SCRN_5_JMP       82CA
SCRN_6           8608
SCRN_6_JMP       82CD
SCRN_7           8681
SCRN_7_JMP       82D0
SCRN_8           86FD
SCRN_8_JMP       82D3
SCRN_9           8779
SCRN_9_JMP       82D6
SCS1             0016
SCS2             0017
SCTE             0007
SCTIE            0007
SECL             00B4
SEL              0002
SELCNTR          0052
SETLSB           92BE
SET_AC           8B44
SET_AC_DONE      8B47
SET_AL           8AD7
SET_AL_DONE      8ADA
SET_CR           8B0F
SET_CR_DONE      8B12
SET_DB0          90C6
SET_DB1          90D2
SET_DB2          90DE
SET_DB3          90EA
SET_DB4          908A
SET_DB5          9096
SET_DB6          90A2
SET_DB7          90AE
SET_DC           8B55
SET_DC_DONE      8B58
SET_FC           8AA0
SET_FC_DONE      8AA3
SET_FP           8AB3
SET_FP_DONE      8AB6
SET_FT           8AC4
SET_FT_DONE      8AC7
SET_RL           8A8F
SET_RL_DONE      8A92
SET_RN           8AFE
SET_RN_DONE      8B01
SET_RW           8B33
SET_RW_DONE      8B36
SET_SW           8B20
SET_SW_DONE      8B23
SET_WL           8AE8
SET_WL_DONE      8AEB
SHFTLP           9282


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 61
MV_ECU


SHORT_DELAY      9108
SLOW_VS_CALC     8DC8
SPCR             0010
SPDR             0012
SPE              0001
SPKANGFAC        00CE
SPMSTR           0005
SPR0             0000
SPR1             0001
SPRF             0007
SPRIE            0007
SPSCR            0011
SPTE             0003
SPTIE            0000
SPWOM            0002
SRSR             FE01
START            8000
STARTW           0002
SUBAR            FE02
SW0              0000
SW0AR            0042
SW0ARC           0041
SW0ARC_CHK_DONE  8BAB
SW0AR_CHK_DONE   8BC3
SW0CLS           0000
SW0DB            0040
SW0DB_CHK_DONE   8B8B
SW0LP            0000
SW0_ARC_CHK      8F1E
SW0_ARC_PROG     8F29
SW0_AR_PROG      8F35
SW0_CHK          8F0C
SW0_CHK_DONE     8F52
SW0_CLS          8F39
SW0_OPN          8F40
SW1              0001
SW1AR            0045
SW1ARC           0044
SW1ARC_CHK_DONE  8BB1
SW1AR_CHK_DONE   8BC9
SW1CLS           0001
SW1DB            0043
SW1DB_CHK_DONE   8B91
SW1LP            0001
SW1_ARC_CHK      8F65
SW1_ARC_PROG     8F70
SW1_AR_PROG      8F7C
SW1_CHK          8F53
SW1_CHK_DONE     8F99
SW1_CLS          8F80
SW1_OPN          8F87
SW2              0002
SW2AR            0048
SW2ARC           0047
SW2ARC_CHK_DONE  8BB7
SW2AR_CHK_DONE   8BCF
SW2CLS           0002
SW2DB            0046
SW2DB_CHK_DONE   8B97
SW2LP            0002
SW3              0003
SW3AR            004B
SW3ARC           004A
SW3ARC_CHK_DONE  8BBD
SW3AR_CHK_DONE   8BD5
SW3CLS           0003
SW3DB            0049
SW3DB_CHK_DONE   8B9D
SW3LP            0003
SWFLAGS          004F
T1CH0H           0026
T1CH0L           0027
T1CH1H           0029
T1CH1L           002A
T1CNTH           0021
T1CNTL           0022
T1MODH           0023
T1MODL           0024
T1SC             0020
T1SC0            0025
T1SC1            0028
T2CH0H           0031
T2CH0L           0032
T2CH1H           0034
T2CH1L           0035
T2CNTH           002C
T2CNTL           002D
T2MODH           002E
T2MODL           002F
T2SC             002B
T2SC0            0030
T2SC1            0033
T8               0006
TACHH            00CC
TACHL            00CD
TACK             0003
TBCR             001C
TBIE             0002
TBIF             0007
TBON             0001
TBR0             0004
TBR1             0005
TBR2             0006
TC               0006
TCIE             0006
TE               0003
TENS             00B2
THERMFACTOR      F500
THOUSANDS        00B0
TIM2CH0_ISR      8B73
TIM2CH0_ISR_DONE 8BED
TIMANG           00E7
TMP1             0069
TMP10            0072
TMP11            0073
TMP12            0074
TMP13            0075
TMP14            0076
TMP15            0077
TMP16            0078
TMP17            0079
TMP18            007A
TMP19            007B
TMP2             006A
TMP20            007C
TMP3             006B
TMP4             006C
TMP5             006D
TMP6             006E
TMP7             006F
TMP8             0070
TMP9             0071
TOF              0007
TOIE             0006
TOPLIN_SUB       8274
TOPVAL           0083


MV300.asm              Assembled with CASM08Z  4/14/12  1:47:52 PM  PAGE 62
MV_ECU


TOVX             0001
TPSACCEL         00C3
TPSADC           00B8
TPSAEN           0004
TPSDEN           0005
TPSP             00D6
TRIMADC          00BB
TRMANG           00E5
TRMANGFAC        00CF
TRST             0004
TSTOP            0005
TXINV            0005
UDVD32           925E
UMUL32           92FD
UMUL32A          9321
UMUL32B          9333
UPDATE_DONE      8BEB
VALUE            007E
VARS0_TL_TB      E000
VARS10_TL_TB     E0C8
VARS11_TL_TB     E0DC
VARS12_TL_TB     E0F0
VARS13_TL_TB     E104
VARS14_TL_TB     E118
VARS15_TL_TB     E12C
VARS16_TL_TB     E140
VARS1_TL_TB      E014
VARS2_TL_TB      E028
VARS3_TL_TB      E03C
VARS4_TL_TB      E050
VARS5_TL_TB      E064
VARS6_TL_TB      E078
VARS7_TL_TB      E08C
VARS8_TL_TB      E0A0
VARS9_TL_TB      E0B4
VARS_TL_TB_IND   E154
VECURR           00C5
VEC_ADC          FFDE
VEC_IRQ          FFFA
VEC_KBD          FFE0
VEC_PLL          FFF8
VEC_RESET        FFFE
VEC_SCIERR       FFE6
VEC_SCIRX        FFE4
VEC_SCITX        FFE2
VEC_SPIRX        FFEA
VEC_SPITX        FFE8
VEC_SWI          FFFC
VEC_TIM1CH0      FFF6
VEC_TIM1CH1      FFF4
VEC_TIM1OV       FFF2
VEC_TIM2CH0      FFF0
VEC_TIM2CH1      FFEE
VEC_TIM2OV       FFEC
VEC_TIMEBASE     FFDC
VFD_SEND         9080
VFD_START_BOT    9062
VFD_START_TOP    9044
VOLTS            00E0
VPR0             0000
VPR1             0001
VSPH             00D2
VSPL             00D3
VS_CALC_DONE     8DF7
VS_COMP          8DC5
WAIT_1           8F9C
WAIT_2           8F9E
WAIT_3           8FA0
WAIT_4           90FE
WAIT_5           8201
WAIT_6           81FF
WAKE             0003
WARMCOR          00BF
WARMUP           0003
WMLED            0002
ZERO_SLOPE       925B
